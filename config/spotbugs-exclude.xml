<?xml version="1.0" encoding="UTF-8"?>
<FindBugsFilter>
    <Match>
        <!-- Ignores all EI_EXPOSE_REP spotbugs warnings-->

        <!--
             Bug Description: https://spotbugs.readthedocs.io/en/latest/bugDescriptions.html#ei-may-expose-internal-representation-by-returning-reference-to-mutable-object-ei-expose-rep
             EI: May expose internal representation by returning reference to mutable object (EI_EXPOSE_REP)
             Returning a reference to a mutable object value stored in one of the object's fields exposes the
             internal representation of the object. If instances are accessed by untrusted code, and unchecked changes
             to the mutable object would compromise security or other important properties,  you will need to do something different.
             Returning a new copy of the object is better approach in many situations.-->

        <!-- Why we're ignoring this warning:
            Spring Boot encourages dependency injection to pass around singleton instances (Beans) of classes we
            use across the app. Though these classes are *technically* mutable, these classes don't expose
            getters and setters to modify the internal state of these classes.

            And, in most cases these classes are marked with the 'final' keyword, meaning they cannot be reassigned.

            In practice, the EI_EXPOSE_REP is giving warnings of valid cases of using Spring patterns. Given
            we're not exposing these classes via getters and setters, it would not make sense to return a copy
            of these classes.

            And, in the case where we are exposing getters/setters via Lombok, the code is auto-generated when the code is compiled,
            which we don't control.

            SpotBugs generally pushes for creating immutable objects, which is a reasonable suggestion, but in cases
            across our codebase, I think risk is low for not making everything an immutable object.
        -->
        <Bug pattern="EI_EXPOSE_REP"/>
    </Match>
    <Match>
        <!-- Ignores all EI_EXPOSE_REP2 spotbugs warnings-->
        <!-- Bug Description: https://spotbugs.readthedocs.io/en/latest/bugDescriptions.html#ei2-may-expose-internal-representation-by-incorporating-reference-to-mutable-object-ei-expose-rep2

        This code stores a reference to an externally mutable object into the internal representation of the object.
        If instances are accessed by untrusted code, and unchecked changes to the mutable object would compromise
        security or other important properties, you will need to do something different. Storing a copy of the object is
        better approach in many situations. -->
        <!-- Why we're ignoring this warning: Refer to EI_EXPOSE_REP explanation -->
        <Bug pattern="EI_EXPOSE_REP2"/>
    </Match>
    <Match>
        <!-- Ignores all CRLF_INJECTION_LOGS spotbugs warnings-->
        <!-- Bug Description: https://find-sec-bugs.github.io/bugs.htm#CRLF_INJECTION_LOGS

        When data from an untrusted source is put into a logger and not neutralized correctly, an attacker could forge
        log entries or include malicious content. Inserted false entries could be used to skew statistics, distract the
        administrator or even to implicate another party in the commission of a malicious act. If the log file is
        processed automatically, the attacker can render the file unusable by corrupting the format of the file or
        injecting unexpected characters. An attacker may also inject code or other commands into the log file and take
        advantage of a vulnerability in the log processing utility (e.g. command injection or XSS). -->
        <!-- Why we're ignoring this warning: We use logstash-logback-encoder for our logs, which outputs JSON logs that
        ignore invalid JSON string characters, including newline. Spotbugs doesn't currently check static files like our
        logback configuration, hence we will have false-positives for this bug unless we ignore it. -->
        <Bug pattern="CRLF_INJECTION_LOGS"/>
    </Match>
    <Match>
        <!-- Ignore all CT_CONSTRUCTOR_THROW spotbugs warnings -->
        <!-- https://spotbugs.readthedocs.io/en/latest/bugDescriptions.html#ct-be-wary-of-letting-constructors-throw-exceptions-ct-constructor-throw 
        
        Classes that throw exceptions in their constructors are vulnerable to Finalizer attacks

        A finalizer attack can be prevented, by declaring the class final, using an empty finalizer declared as final, or by a clever use of a private constructor.

        See SEI CERT Rule OBJ-11 (https://wiki.sei.cmu.edu/confluence/display/java/OBJ11-J.+Be+wary+of+letting+constructors+throw+exceptions) for more information. 
        -->
        <Bug pattern="CT_CONSTRUCTOR_THROW"/>
    </Match>
</FindBugsFilter>
