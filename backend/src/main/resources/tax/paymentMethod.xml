<?xml-model href="./FactDictionaryModule.rng"?>
<!-- The spouse section has its own module because its completion conditions are that complicated -->
<FactDictionaryModule>
  <Facts>
    <Fact path="/bankAccount">
      <Name>Bank Account</Name>
      <Description>Information for the bank account you want to deposit into</Description>
      <Writable>
        <BankAccount />
      </Writable>
    </Fact>

    <Fact path="/refundViaAch">
      <Name>Wants Direct Deposit</Name>
      <Description>Whether the TP wants to receive a direct deposit. Otherwise, they will receive a mailed check.</Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/payViaAch">
      <Name>User's preference to pay via ACH</Name>
      <Description>Whether the TP wants to make an immediate ACH payment through direct file. Otherwise, they will be
        have to make their payment at a different time and/or through a different method.</Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/achPaymentDate">
      <Name>Payment date</Name>
      <Description>When the user would like their payment to be processed</Description>
      <Export mef="true" />

      <Writable>
        <Day />
      </Writable>
    </Fact>

    <Fact path="/achPaymentDateInThePast">
      <Name>Payment date is scheduled in the past</Name>
      <Description>Whether the specified payment date is in the past</Description>
      <BlockSubmissionOnTrue />

      <Derived>
        <All>
          <IsComplete>
            <Dependency path="/achPaymentDate" />
          </IsComplete>
          <Dependency module="taxCalculations" path="/owesBalance" />
          <LessThan>
            <Left>
              <Dependency path="/achPaymentDate" />
            </Left>
            <Right>
              <Dependency module="signing" path="/today" />
            </Right>
          </LessThan>
        </All>
      </Derived>
    </Fact>

    <Fact path="/achPaymentDateMustBeToday">
      <Name>Require the ach payment date be today</Name>
      <Description>Whether to require the ach payment date be today if they are filing after the deadline</Description>
      <Derived>
        <All>
          <GreaterThan>
            <Left>
              <Dependency module="signing" path="/today" />
            </Left>
            <Right>
              <Dependency module="filers" path="/taxDay" />
            </Right>
          </GreaterThan>
        </All>
      </Derived>
    </Fact>

    <Fact path="/achPaymentDateLastAllowableDate">
      <Name>Last allowable date for ach payment</Name>
      <Description>The last possible date for ach payment</Description>
      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency path="/achPaymentDateMustBeToday" />
            </When>
            <Then>
              <Dependency module="signing" path="/today" />
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency module="filers" path="/taxDay" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/achPaymentDateAfterDeadline">
      <Name>Payment date is scheduled for after tax day or last allowable date</Name>
      <Description>Whether the specified payment date comes after the last tax day or last allowable date</Description>
      <BlockSubmissionOnTrue />

      <Derived>
        <All>
          <IsComplete>
            <Dependency path="/achPaymentDate" />
          </IsComplete>
          <Dependency module="taxCalculations" path="/owesBalance" />
          <GreaterThan>
            <Left>
              <Dependency path="/achPaymentDate" />
            </Left>
            <Right>
              <Dependency path="/achPaymentDateLastAllowableDate" />
            </Right>
          </GreaterThan>
        </All>
      </Derived>
    </Fact>

    <Fact path="/isPaperPathAndHasSeenPaymentPaperPathAssertion">
      <Derived>
        <All>
          <Dependency module="signing" path="/isPaperPath" />
          <IsComplete>
            <Dependency module="flow" path="/flowHasSeenPaymentPaperPathAssertion" />
          </IsComplete>
        </All>
      </Derived>
    </Fact>

    <Fact path="/paymentSectionComplete">
      <Name>Payment Section Complete</Name>
      <Description>The Payment Method section is as complete as it needs to be</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <Any>
          <All>
            <!-- If getting refund via ach, must fill out bank account -->
            <Dependency module="taxCalculations" path="/dueRefund" />
            <Dependency path="/refundViaAch" />
            <IsComplete>
              <Dependency path="/bankAccount" />
            </IsComplete>
          </All>
          <All>
            <!-- If getting refund via mail, leverages existing address -->
            <Dependency module="taxCalculations" path="/dueRefund" />
            <Not>
              <Dependency path="/refundViaAch" />
            </Not>
          </All>
          <All>
            <!-- If paying via ach, must fill out bank account -->
            <Dependency module="taxCalculations" path="/owesBalance" />
            <Dependency path="/payViaAch" />
            <IsComplete>
              <Dependency path="/bankAccount" />
            </IsComplete>
            <IsComplete>
              <Dependency path="/achPaymentDate" />
            </IsComplete>
            <Any>
              <Not>
                <Dependency module="signing" path="/isPaperPath" />
              </Not>
              <Not>
                <IsComplete>
                  <Dependency module="signing" path="/isPaperPath" />
                </IsComplete>
              </Not>
            </Any>
          </All>
          <All>
            <!-- If on the paper path, and trying to pay via ach, must see autocorrect screen -->
            <Dependency module="taxCalculations" path="/owesBalance" />
            <Dependency path="/payViaAch" />
            <IsComplete>
              <Dependency path="/bankAccount" />
            </IsComplete>
            <IsComplete>
              <Dependency path="/achPaymentDate" />
            </IsComplete>
            <Dependency module="signing" path="/isPaperPath" />
            <Dependency module="flow" path="/flowHasSeenPaymentMethodAutocorrect" />
          </All>
          <All>
            <!-- If not paying via ach, they're done and they'll see the data view -->
            <Dependency module="taxCalculations" path="/owesBalance" />
            <Not>
              <Dependency path="/payViaAch" />
            </Not>
          </All>
          <Not>
            <!-- They have a zero balance, no money will be exchanging hands -->
            <Any>
              <Dependency module="taxCalculations" path="/dueRefund" />
              <Dependency module="taxCalculations" path="/owesBalance" />
            </Any>
          </Not>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/xmlRefundBankAccount">
      <Name>Refund Bank account</Name>
      <Description>The bank account used for refunds to the taxpayer. Populates the IRS XML elements corresponding to
        1040 lines 35b, 35c, and 35d.</Description>
      <Export mef="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <All>
                <Dependency module="taxCalculations" path="/dueRefund" />
                <Dependency path="/refundViaAch" />
              </All>
            </When>
            <Then>
              <Dependency path="/bankAccount" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/xmlPaymentBankAccount">
      <Name>Payment Bank account</Name>
      <Description>The bank account used for payments from the taxpayer to the IRS. Populates the IRSPayment XML
        elements corresponding to 1040.</Description>
      <Export mef="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <All>
                <Dependency module="taxCalculations" path="/owesBalance" />
                <Dependency path="/payViaAch" />
              </All>
            </When>
            <Then>
              <Dependency path="/bankAccount" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/xmlRefundDisbursementCd">
      <Name>Refund Disbursement Code</Name>
      <Description>
        MeF Variable: Refund Disbursement Code.
        Acceptable values:
        0 – Balance Due/Zero Balance
        1 – Reloadable
        Prepaid Card
        2 – Bank Account
        3 – Paper Check
        4 – Non-reloadable Merchant Gift Card
        5 - Cryptocurrency
        6 - Other 1
        7 -
        Other 2
      </Description>
      <Export mef="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <Any>
                <Dependency module="taxCalculations" path="/owesBalance" />
                <Dependency module="taxCalculations" path="/zeroBalance" />
              </Any>
            </When>
            <Then>
              <Int>0</Int>
            </Then>
          </Case>
          <Case>
            <When>
              <All>
                <Dependency module="taxCalculations" path="/dueRefund" />
                <Dependency path="/refundViaAch" />
              </All>
            </When>
            <Then>
              <Int>2</Int>
            </Then>
          </Case>
          <Case>
            <When>
              <All>
                <Dependency module="taxCalculations" path="/dueRefund" />
                <Not>
                  <Dependency path="/refundViaAch" />
                </Not>
              </All>
            </When>
            <Then>
              <Int>3</Int>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/xmlHasUltimateBankAccount">
      <Name>Has Ultimate Bank Account</Name>
      <Description>
        When an ultimate bank account exists, MeF requires us to add information about that bank account to
        the return headers.
        If /xmlRefundDisbursementCd is any value other than (0, 3, or 4), then
        /xmlHasUltimateBankAccount should be true. Otherwise, it should have no value.
      </Description>
      <Export mef="true" />
      <Derived>
        <Switch>
          <Case>
            <When>
              <All>
                <Not>
                  <Equal>
                    <Left>
                      <Dependency path="/xmlRefundDisbursementCd" />
                    </Left>
                    <Right>
                      <Int>0</Int>
                    </Right>
                  </Equal>
                </Not>
                <Not>
                  <Equal>
                    <Left>
                      <Dependency path="/xmlRefundDisbursementCd" />
                    </Left>
                    <Right>
                      <Int>3</Int>
                    </Right>
                  </Equal>
                </Not>
                <Not>
                  <Equal>
                    <Left>
                      <Dependency path="/xmlRefundDisbursementCd" />
                    </Left>
                    <Right>
                      <Int>4</Int>
                    </Right>
                  </Equal>
                </Not>
              </All>
            </When>
            <Then>
              <True />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>


    <Fact path="/refundAccountIsChecking">
      <Derived>
        <Equal>
          <Left>
            <Dependency path="/xmlRefundBankAccount/accountType" />
          </Left>
          <Right>
            <String>Checking</String>
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/refundAccountIsSavings">
      <Derived>
        <Equal>
          <Left>
            <Dependency path="/xmlRefundBankAccount/accountType" />
          </Left>
          <Right>
            <String>Savings</String>
          </Right>
        </Equal>
      </Derived>
    </Fact>
  </Facts>
</FactDictionaryModule>
