<?xml-model href="./FactDictionaryModule.rng"?>
<FactDictionaryModule>
  <Facts>

    <Fact path="/primaryFilerW2And1099IntStateOptions">
      <Name>Income-state options</Name>
      <Description>Whether the filer earned income in a state from the allowed scopedStateOptions</Description>
      <Derived>
        <EnumOptions>
          <String>anotherState</String>
          <String>onlySame</String>
          <String>noForms</String>
        </EnumOptions>
      </Derived>
    </Fact>

    <Fact path="/spouseW2And1099IntStateOptions">
      <Name>Income-state options</Name>
      <Description>Whether the filer earned income in a state from the allowed scopedStateOptions</Description>
      <Derived>
        <EnumOptions>
          <String>anotherState</String>
          <String>onlySame</String>
          <String>noForms</String>
        </EnumOptions>
      </Derived>
    </Fact>

    <Fact path="/spouseScopedStateOptions">
      <Name>Options for whether the filers spouse lived in the same state with them</Name>
      <Description>Options to describe whether the filer's spouse lived in the same state as the
        filer all year</Description>
      <Derived>
        <EnumOptions>
          <String>sameState</String>
          <String>moreThanOne</String>
          <String>noneOfTheAbove</String>
        </EnumOptions>
      </Derived>
    </Fact>

    <Fact path="/addressIsInMA">
      <Derived>
        <Equal>
          <Left>
            <Dependency path="/address/stateOrProvence" />
          </Left>
          <Right>
            <String>MA</String>
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/addressIsInME">
      <Derived>
        <Equal>
          <Left>
            <Dependency path="/address/stateOrProvence" />
          </Left>
          <Right>
            <String>ME</String>
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/taxDay">
      <Description>The tax day for the primary filer, taking their contact address into account</Description>
      <Export downstreamFacts="true" />
      <TaxYear>2024</TaxYear>
      <Derived>
        <Switch>

          <Case>
            <When>
              <Any>
                <!-- Assume the later day until we know better -->
                <Not>
                  <IsComplete>
                    <Dependency path="/address" />
                  </IsComplete>
                </Not>
                <!-- If we do know where you are, and you're in MA or ME, use the further day.
                     ME and MA have a later filing deadline due to state holidays
                -->
                <All>
                  <IsComplete>
                    <Dependency path="/address" />
                  </IsComplete>
                  <Any>
                    <Dependency path="/addressIsInMA" />
                    <Dependency path="/addressIsInME" />
                  </Any>
                </All>
              </Any>
            </When>
            <Then>
              <Dependency module="constants" path="/massachusettsAndMaineDeadline" />
            </Then>
          </Case>

          <!-- Otherwise, it's April 15th -->
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency module="constants" path="/defaultTaxDay" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/filers">
      <Name>Filers</Name>
      <Description>The filers of the tax return. If a joint return, there are two filers; otherwise,
        there is only one.</Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Collection />
      </Writable>
    </Fact>

    <Fact path="/filers/*/firstName">
      <Name>First name</Name>
      <Description>The first name of the filer. Must match the name as known to the Social Security
        Administration.</Description>
      <Export mef="true" stateSystems="true" downstreamFacts="true" />

      <Writable>
        <String />
        <Limit type="Match">
          <String><![CDATA[[\sA-Za-z\-]+]]></String>
        </Limit>
        <Limit type="MaxLength">
          <Int>20</Int>
        </Limit>
      </Writable>
    </Fact>

    <Fact path="/filers/*/writableMiddleInitial">
      <Name>Middle initial</Name>
      <Description>The middle initial of the filer. Must match the name as known to the Social
        Security Administration.
        This is the writable optional fact. Can be left incomplete. Please use the derived fact in
        downstream
        calculations.</Description>

      <Writable>
        <String />
        <Limit type="Match">
          <String><![CDATA[[\sA-Za-z\-]+]]></String>
        </Limit>
        <Limit type="MaxLength">
          <Int>1</Int>
        </Limit>
      </Writable>
    </Fact>

    <Fact path="/filers/*/middleInitial">
      <Name>Middle Initial</Name>
      <Description>The middle initial of the filer. Must match the name as known to the Social
        Security Administration.</Description>
      <Export mef="true" stateSystems="true" downstreamFacts="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <IsComplete>
                <Dependency path="../writableMiddleInitial" />
              </IsComplete>
            </When>
            <Then>
              <Dependency path="../writableMiddleInitial" />
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <String></String>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/filers/*/firstNameAndInitial">
      <Name>First name and initial</Name>
      <Description>The first name and middle initial of the filer.</Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <IsComplete>
                <Dependency path="../middleInitial" />
              </IsComplete>
            </When>
            <Then>
              <Paste>
                <Dependency path="../firstName" />
                <Dependency path="../middleInitial" />
              </Paste>
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency path="../firstName" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/filers/*/lastName">
      <Name>Last name</Name>
      <Description>The last name of the filer. Must match the name as known to the Social Security
        Administration.</Description>
      <Export downstreamFacts="true" mef="true" stateSystems="true" />

      <Writable>
        <String />
        <Limit type="Match">
          <String><![CDATA[[\sA-Za-z\-]+]]></String>
        </Limit>
        <Limit type="MaxLength">
          <Int>20</Int>
        </Limit>
      </Writable>
    </Fact>

    <Fact path="/filers/*/fullName">
      <Name>Full name</Name>
      <Description>
        The first name, middle initial, and last name of the filer.
        Primarily used for the frontend.
      </Description>
      <Export downstreamFacts="true" mef="true" />

      <Derived>
        <Paste>
          <Dependency path="../firstNameAndInitial" />
          <Dependency path="../lastName" />
          <Dependency path="../suffixString" />
        </Paste>
      </Derived>
    </Fact>

    <Fact path="/filers/*/mefFullName">
      <Description>
        The first name, middle initial, and last name of the filer.
        Abbreviated/truncated to MeF requirements.
      </Description>
      <Export downstreamFacts="true" mef="true" />

      <Derived>
        <TruncateNameForMeF>
          <FirstName>
            <Dependency path="../firstName" />
          </FirstName>
          <MiddleInitial>
            <Dependency path="../middleInitial" />
          </MiddleInitial>
          <LastName>
            <Dependency path="../lastName" />
          </LastName>
          <Suffix>
            <Dependency path="../suffixString" />
          </Suffix>
        </TruncateNameForMeF>
      </Derived>
    </Fact>


    <Fact path="/filers/*/writableSuffix">
      <Description>The suffix of the filer.</Description>

      <Writable>
        <Enum optionsPath="/suffixOptions" />
      </Writable>
    </Fact>

    <Fact path="/filers/*/suffixString">
      <Name>Suffix string</Name>
      <Description>The suffix of the filer as a string for concatenation.</Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <IsComplete>
                <Dependency path="../writableSuffix" />
              </IsComplete>
            </When>
            <Then>
              <AsString>
                <Dependency path="../writableSuffix" />
              </AsString>
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <String />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/filers/*/suffix">
      <Description>
        The suffix of the filer. Exported for mef
      </Description>
      <Export mef="true" stateSystems="true" />

      <Derived>
        <Dependency path="../writableSuffix" />
      </Derived>
    </Fact>


    <Fact path="/filers/*/tin">
      <Name>TIN</Name>
      <Description>The taxpayer identification number of the filer.</Description>
      <Export downstreamFacts="true" mef="true" stateSystems="true" />

      <Writable>
        <TIN />
      </Writable>
    </Fact>

    <Fact path="/filers/*/dateOfBirth">
      <Name>Date of birth</Name>
      <Description>The date of birth of the filer.</Description>
      <Export downstreamFacts="true" mef="true" stateSystems="true" />

      <Writable>
        <Day />
        <Limit type="Max">
          <Day>2024-01-01</Day>
        </Limit>
      </Writable>
    </Fact>

    <Fact path="/filers/*/dayBeforeDateOfBirth">
      <Description>The day before the filer's birthday</Description>
      <Derived>
        <Subtract>
          <Minuend>
            <Dependency path="../dateOfBirth" />
          </Minuend>
          <Subtrahends>
            <Days>1</Days>
          </Subtrahends>
        </Subtract>
      </Derived>
    </Fact>

    <Fact path="/filers/*/ageCalculatedDayBeforeDOB">
      <Name>Age</Name>
      <Description>The age of the filer, calcualted using their birthday as the day before their
        date of birth.</Description>

      <Derived>
        <Subtract>
          <Minuend>
            <Dependency module="constants" path="/taxYear" />
          </Minuend>
          <Subtrahends>
            <Dependency path="../dayBeforeDateOfBirth/year" />
          </Subtrahends>
        </Subtract>
      </Derived>
    </Fact>


    <Fact path="/secondaryFilerDateOfBirthXml">
      <Description>Used to set SelfSelectPINGrp.SpouseBirthDt in XML when applicable</Description>
      <Export mef="true" />
      <Derived>
        <Switch>
          <Case>
            <When>
              <All>
                <Dependency module="standardDeduction" path="/isSpouseInfoApplicableForStandardDeductions" />
                <Not>
                  <Dependency path="/inScopeDeceasedSpouse" />
                </Not>
              </All>
            </When>
            <Then>
              <Dependency path="/secondaryFiler/dateOfBirth" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/filers/*/age">
      <Name>Age</Name>
      <Description>The age of the filer on the last day of the tax year.</Description>

      <Derived>
        <Subtract>
          <Minuend>
            <Dependency module="constants" path="/taxYear" />
          </Minuend>
          <Subtrahends>
            <Dependency path="../dateOfBirth/year" />
          </Subtrahends>
        </Subtract>
      </Derived>
    </Fact>

    <Fact path="/filers/*/eitc8862Age">
      <Name>Age</Name>
      <Description>The age of the filer with no qualifying children at then end of tax year who
        requires form 8862 for
        EITC; for PDF form 8862</Description>
      <Export mef="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency module="eitc" path="/form8862RequiredAndHasNoQualifyingChildren" />
            </When>
            <Then>
              <Dependency path="../ageForSelfOnlyEitcLimits" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/filers/*/isStudent">
      <Name>Filer is a student</Name>
      <Description>Whether the filer is a student.</Description>
      <Export downstreamFacts="true" stateSystems="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/filers/*/isDisabled">
      <Name>Filer is Disabled</Name>
      <Description>Whether the filer is disabled.</Description>
      <Export mef="true" stateSystems="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/filers/*/isStudentOrDisabled">
      <Description>Filer is either a student or disabled</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <Any>
          <Dependency path="../isStudent" />
          <Dependency path="../isDisabled" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/filers/*/isStudentOnly">
      <Description>Filer is a student and is not disabled. Used for content conditions.</Description>

      <Derived>
        <All>
          <Dependency path="../isStudent" />
          <Not>
            <Dependency path="../isDisabled" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/filers/*/isDisabledOnly">
      <Description>Filer is disabled and not is not a student. Used for content conditions.</Description>

      <Derived>
        <All>
          <Dependency path="../isDisabled" />
          <Not>
            <Dependency path="../isStudent" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/filers/*/isStudentAndDisabled">
      <Description>Filer is a student and is disabled. Used for content conditions.</Description>

      <Derived>
        <All>
          <Dependency path="../isStudent" />
          <Dependency path="../isDisabled" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/isStudentOnly">
      <Description>Filer (or spouse if MFJ) is a student and neither is disabled</Description>

      <Derived>
        <All>
          <Any>
            <Dependency path="/primaryFiler/isStudent" />
            <Dependency path="/secondaryFiler/isStudent" />
          </Any>
          <Not>
            <Dependency path="/primaryFiler/isDisabled" />
          </Not>
          <Any>
            <Not>
              <Dependency path="/secondaryFiler/isDisabled" />
            </Not>
            <Not>
              <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
            </Not>
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/isDisabledOnly">
      <Description>Filer (or spouse if MFJ) is disabled and neither is a student</Description>

      <Derived>
        <All>
          <Any>
            <Dependency path="/primaryFiler/isDisabled" />
            <Dependency path="/secondaryFiler/isDisabled" />
          </Any>
          <Not>
            <Dependency path="/primaryFiler/isStudent" />
          </Not>
          <Any>
            <Not>
              <Dependency path="/secondaryFiler/isStudent" />
            </Not>
            <Not>
              <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
            </Not>
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/isStudentAndDisabled">
      <Description>Filer (or spouse if MFJ) is a student and filer (or spouse if MFJ) is disabled</Description>

      <Derived>
        <Any>
          <All>
            <Any>
              <Dependency path="/primaryFiler/isDisabled" />
              <Dependency path="/secondaryFiler/isDisabled" />
            </Any>
            <Any>
              <Dependency path="/primaryFiler/isStudent" />
              <Dependency path="/secondaryFiler/isStudent" />
            </Any>
          </All>
          <All>
            <Not>
              <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
            </Not>
            <Dependency path="/primaryFiler/isDisabled" />
            <Dependency path="/primaryFiler/isStudent" />
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/filers/*/cdccMonthsDisabledOrInSchool">
      <Name>Months disabled or in school</Name>
      <Description>The number of months the filer was either disabled or in school in the current tax year</Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Int />
      </Writable>
    </Fact>

    <Fact path="/filers/*/youngerThan16">
      <Description>Whether the age of the filer is less than 16</Description>
      <Derived>
        <LessThan>
          <Left>
            <Dependency path="../age" />
          </Left>
          <Right>
            <Int>16</Int>
          </Right>
        </LessThan>
      </Derived>
    </Fact>

    <Fact path="/flowKnockoutFilerAgeYoungerThan16">
      <Name>Younger than 16</Name>
      <Description>Whether either filer is younger than 16.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Any>
          <LessThan>
            <Left>
              <Dependency path="/primaryFiler/age" />
            </Left>
            <Right>
              <Int>16</Int>
            </Right>
          </LessThan>
          <All>
            <LessThan>
              <Left>
                <Dependency path="/secondaryFiler/age" />
              </Left>
              <Right>
                <Int>16</Int>
              </Right>
            </LessThan>
            <!-- We don't currently give the TP a way to instead switch to MFS, because we don't
                       want to encourage them to take a worse filing status just to use this tool.
                       They'd be better off using a different filing method.
                    -->
            <Dependency module="filingStatus" path="/treatAsMFJ" />
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/filers/*/age65OrOlder">
      <Name>Age 65 or older</Name>
      <Description>

        Whether the filer is 65 or older. Pub 554 states "You are considered age 65 at the end of
        the year if
        your 65th birthday is
        on or before January 1 of the following year" so we include the January 1 exception here.

        Do NOT use this fact for EITC calculations -- That age 65 requirement does _not_ have the
        January 1 exception.
      </Description>
      <Export downstreamFacts="true" mef="true" />

      <Derived>
        <GreaterThanOrEqual>
          <Left>
            <Dependency path="../ageCalculatedDayBeforeDOB" />
          </Left>
          <Right>
            <Int>65</Int>
          </Right>
        </GreaterThanOrEqual>
      </Derived>
    </Fact>

    <Fact path="/filers/*/age55OrOlder">
      <Name>Age 55 or older</Name>
      <Description>Whether the filer is 55 or older at the end of their tax year.</Description>
      <!-- needs review if we support fiscal years that don't end on December 31 -->
      <Export downstreamFacts="true" />

      <Derived>
        <GreaterThanOrEqual>
          <Left>
            <Dependency path="../age" />
          </Left>
          <Right>
            <Int>55</Int>
          </Right>
        </GreaterThanOrEqual>
      </Derived>
    </Fact>

    <Fact path="/atLeastOneTpIs65OrOlder">
      <Description>At least one TP is 65 or older</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
            </When>
            <Then>
              <Any>
                <Dependency path="/primaryFiler/age65OrOlder" />
                <Dependency path="/secondaryFiler/age65OrOlder" />
              </Any>
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency path="/primaryFiler/age65OrOlder" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/atLeastOneTpIsUnder65">
      <Description>At least one TP is under 65.</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
            </When>
            <Then>
              <Any>
                <Not>
                  <Dependency path="/primaryFiler/age65OrOlder" />
                </Not>
                <Not>
                  <Dependency path="/secondaryFiler/age65OrOlder" />
                </Not>
              </Any>
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Not>
                <Dependency path="/primaryFiler/age65OrOlder" />
              </Not>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/filers/*/age25OrOlderForEitc">
      <Name>Age 25 or older</Name>
      <Description>
        Whether the filer is 25 or older for EITC.
        A person is considered 25 if they turned 25 during the tax
        year, or on January 1 of the next year.

        Per pub 596 for 2022 "You meet the age test if you were born after
        December 31, 1957, and before January 2,
        1998. If you are married filing a joint return, you meet the age test if
        either you or your spouse was born
        after December 31, 1957, and before January 2, 1998."

        This is explicitly
        different than the rule for turning 65 (the maximum age for EITC without QCs), which occurs
        on the person's
        birthday, not the day after. Because the tax code is silly.
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <GreaterThanOrEqual>
          <Left>
            <Dependency path="../ageForSelfOnlyEitcLimits" />
          </Left>
          <Right>
            <Int>25</Int>
          </Right>
        </GreaterThanOrEqual>
      </Derived>
    </Fact>

    <Fact path="/filers/*/ageForSelfOnlyEitcLimits">
      <Description>
        The fact that should be listed as someone's age on Form 8862 for EITC. Uses convoluted logic
        because
        the age for the 25 year old minimum age uses the day before the person's birthday,
        and the age for the 65 year
        old maximum uses the day of the person's brithday.
      </Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <All>
                <!-- We are looking at a deceased secondary filer and they may have turned 25 during
                the year -->
                <Dependency path="/isWidowedInTaxYear" />
                <Dependency path="../isSecondaryFiler" />
                <Equal>
                  <Left>
                    <Dependency path="../age" />
                  </Left>
                  <Right>
                    <Int>25</Int>
                  </Right>
                </Equal>
              </All>
            </When>
            <Then>
              <!-- We have to use the day before their birthday as their day -->
              <Dependency path="/secondaryFilerAgeDayBeforeDeath" />
            </Then>
          </Case>
          <Case>
            <When>
              <All>
                <!-- We are looking at a deceased secondary filer and we don't have to worry about
                them being 25 -->
                <Dependency path="/isWidowedInTaxYear" />
                <Dependency path="../isSecondaryFiler" />
              </All>
            </When>
            <Then>
              <Dependency path="/secondaryFilerAgeDayOfDeath" />
            </Then>
          </Case>
          <Case>
            <When>
              <!-- They aren't deceased, but may have turned 25 during the year so we look at their
              age the day before
              their birthday to handle that special rule -->
              <Any>
                <Equal>
                  <Left>
                    <Dependency path="../ageCalculatedDayBeforeDOB" />
                  </Left>
                  <Right>
                    <Int>25</Int>
                  </Right>
                </Equal>
              </Any>
            </When>
            <Then>
              <Dependency path="../ageCalculatedDayBeforeDOB" />
            </Then>
          </Case>
          <Case>
            <When>
              <!-- Otherwise, we can just look at their age -->
              <True />
            </When>
            <Then>
              <Dependency path="../age" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/filers/*/age64OrYoungerForEitc">
      <Name>Age 64 or younger</Name>
      <Description>
        Whether the filer is 64 or younger for EITC.
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <LessThanOrEqual>
          <Left>
            <Dependency path="../ageForSelfOnlyEitcLimits" />
          </Left>
          <Right>
            <Int>64</Int>
          </Right>
        </LessThanOrEqual>
      </Derived>
    </Fact>

    <Fact path="/filers/*/occupation">
      <Name>Occupation</Name>
      <Description>The occupation of the filer.</Description>
      <Export downstreamFacts="true" />

      <Writable>
        <String />
        <Limit type="Match">
          <String><![CDATA[[\sA-Za-z0-9\-]+]]></String>
        </Limit>
        <Limit type="MaxLength">
          <Int>35</Int>
        </Limit>
      </Writable>
    </Fact>

    <Fact path="/filers/*/mefOccupation">
      <Name>Occupation code</Name>
      <Description>The occupation code of the filer.</Description>
      <Export mef="true" />

      <Derived>
        <Trim>
          <StripChars>
            <Input>
              <Dependency path="../occupation" />
            </Input>
            <Allow>
              <Dependency module="mefTypes" path="/mefOccupationType" />
            </Allow>
          </StripChars>
        </Trim>
      </Derived>
    </Fact>

    <Fact path="/filers/*/identityPin">
      <Name>Identity Pin</Name>
      <Description>The identity pin of the filer</Description>
      <Export mef="true" />

      <Writable>
        <IPPIN />
      </Writable>
    </Fact>

    <Fact path="/spouseIdentityPin">
      <Name>Spouse Identity Pin</Name>
      <Description>The identity pin of the spouse. Used in the Return Header XML.</Description>
      <Export mef="true" />
      <Derived>
        <Switch>
          <Case>
            <When>
              <All>
                <Not>
                  <Dependency path="/inScopeDeceasedSpouse" />
                </Not>
                <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
                <Dependency path="/spouseHasIpPin" />
              </All>
            </When>
            <Then>
              <Dependency path="/secondaryFiler/identityPin" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/primaryFilerHasIpPin">
      <Export downstreamFacts="true" mef="true" />
      <Derived>
        <All>
          <Dependency path='/primaryFiler/hasIpPin' />
          <IsComplete>
            <Dependency path='/primaryFiler/identityPin' />
          </IsComplete>
        </All>
      </Derived>
    </Fact>

    <Fact path="/spouseHasIpPin">
      <Export downstreamFacts="true" />
      <Derived>
        <All>
          <Dependency path='/secondaryFiler/hasIpPin' />
          <IsComplete>
            <Dependency path='/secondaryFiler/identityPin' />
          </IsComplete>
        </All>
      </Derived>
    </Fact>

    <Fact path="/xmlShouldIncludeSpouseIPPIN">
      <Export mef="true" />
      <Derived>
        <All>
          <Dependency path="/spouseHasIpPin" />
          <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/xmlShouldIncludeSpouseNameControlTxt">
      <Export mef="true" />
      <Derived>
        <All>
          <Any>
            <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
            <Dependency module="filingStatus" path="/isFilingStatusMFS" />
          </Any>
          <IsComplete>
            <Dependency path="/secondaryFiler/lastName" />
          </IsComplete>
        </All>
      </Derived>
    </Fact>

    <Fact path="/xmlShouldIncludeSpouseTIN">
      <Export mef="true" />
      <Derived>
        <All>
          <Dependency path="/secondaryFiler/hasTin" />
          <IsComplete>
            <Dependency path="/secondaryFiler/tin" />
          </IsComplete>
          <Any>
            <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
            <Dependency module="filingStatus" path="/isFilingStatusMFS" />
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/filers/*/isBlind">
      <Name>Filer is blind</Name>
      <Description>Whether the filer is considered blind for tax purposes.</Description>
      <Export downstreamFacts="true" mef="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/filers/*/hasIpPin">
      <Name>Filer has IP Pin</Name>
      <Description>Whether the filer has been assigned an IP pin from the IRS</Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/filers/*/flowIpPinReady">
      <Name>Filer has IP Pin</Name>
      <Description>Whether the filer is ready to input their IP pin in the flow</Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/filers/*/flowSpouseIpPinReady">
      <Name>Filer has spouse's IP Pin</Name>
      <Description>Whether the filer is ready to input their spouse's IP pin in the flow. Currently
        separated to be able
        to conjugate the pronoun in the question, but we can eliminate this variable if we improve
        our translation
        customization.</Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/primaryFilerIsMissingIpPin">
      <Export downstreamFacts="true" />
      <Derived>
        <All>
          <Dependency module='filers' path='/primaryFiler/hasIpPin' />
          <Not>
            <Dependency module='filers' path='/primaryFiler/flowIpPinReady' />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/secondaryFilerIsMissingIpPin">
      <Export downstreamFacts="true" />
      <Derived>
        <All>
          <Dependency module='filers' path='/secondaryFiler/hasIpPin' />
          <Not>
            <Dependency module='filers' path='/secondaryFiler/flowSpouseIpPinReady' />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/filers/*/canBeClaimed">
      <Name>Filer can be claimed as a dependent</Name>
      <Description>Whether the filer can be claimed as a dependent by another taxpayer.</Description>
      <Export downstreamFacts="true" mef="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/filers/*/canBeClaimedNoQc">
      <Name>Filer can be claimed as a dependent and has no qualifying children</Name>
      <Description>Whether the filer can be claimed as a dependent by another taxpayer and has no
        qualifying children;
        used for PDF form 8862</Description>
      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency module="eitc" path="/form8862RequiredAndHasNoQualifyingChildren" />
            </When>
            <Then>
              <Dependency path="../canBeClaimed" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/filers/*/canNotBeClaimedNoQc">
      <Name>Filer cannot be claimed as a dependent</Name>
      <Description>Whether the filer cannot be claimed as a dependent by another taxpayer and has no
        qualifying
        children;
        used for pdf form 8862</Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency module="eitc" path="/form8862RequiredAndHasNoQualifyingChildren" />
            </When>
            <Then>
              <Not>
                <Dependency path="../canBeClaimed" />
              </Not>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/filers/*/potentialClaimerMustFile">
      <Name>Person who could claim filer as dependent must file</Name>
      <Description>Whether the person who could claim the filer as a dependent is required to file a
        tax return.</Description>
      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/filers/*/potentialClaimerDidFile">
      <Name>Person who could claim filer as dependent filed</Name>
      <Description>Whether the person who could claim the filer as a dependent filed a tax return.</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/primaryFilerPotentialClaimerFiledOnlyForRefund">
      <Name>Person who could claim the primary filer as dependent filed solely for refund</Name>
      <Description>Whether the person who could claim the primary filer as a dependent filed a tax
        return solely for
        refund of withholding or estimated tax paid.</Description>
      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/filers/*/willBeClaimed">
      <Name>Filer expects to be claimed as a dependent</Name>
      <Description>Whether the filer expects to be claimed as a dependent by another taxpayer. Note that this fact
        should not be used directly, as it can be overwridden if we later learn no one else is allowed to claim the
        taxpayer; use /primaryFilerIsClaimedAsDependent or /secondaryFilerIsClaimedAsDependent instead.
      </Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/primaryFilerIsClaimedAsDependent">
      <Name>Filer is claimed as a dependent</Name>
      <Description>Whether the filer is claimed as a dependent by another taxpayer.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency path="/primaryFilerCouldBeDependentAndClaimerIsRequiredToFileOrFilingForCredits" />
          <Dependency path="/primaryFiler/willBeClaimed" />
          <Not>
            <Dependency path="/taxpayerCannotBeClaimed" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/secondaryFilerIsClaimedAsDependent">
      <Name>Secondary filer is claimed as a dependent</Name>
      <Description>Whether the secondary filer is claimed as a dependent by another taxpayer. False if not MFJ.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency module="filingStatus" path="/treatAsMFJ" />
          <Not>
            <Dependency path="/MFJRequiredToFile" />
          </Not>
          <Dependency path="/secondaryFiler/canBeClaimed" />
          <Dependency path="/secondaryFiler/willBeClaimed" />
          <Not>
            <Dependency path="/taxpayerCannotBeClaimed" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/eitherFilerIsClaimedAsDependent">
      <Name>A filer on the return is claimed as a dependent</Name>
      <Description>Either the primary or secondary filer is claimed as a dependent by another taxpayer.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Any>
          <Dependency path="/primaryFilerIsClaimedAsDependent" />
          <Dependency path="/secondaryFilerIsClaimedAsDependent" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/MFJDependentsFilingForCredits">
      <Description>
        Whether the MFJ filer who can be someone's dependent is claiming a refund only and forgoing
        tax
        benefits like
        dependents and certain credits
      </Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/MFJNotRequiredToFileAndEitherFilerCanBeClaimed">
      <Description>
        Whether the MFJ filer is claiming a refund only and neither primary nor secondary can be claimed as a
        dependent
      </Description>

      <Derived>
        <All>
          <Not>
            <Dependency path="/MFJRequiredToFile" />
          </Not>
          <Dependency path="/eitherFilerCanBeClaimed" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/MFJClaimingRefundOnly">
      <Description>Whether the MFJ filer is claiming a refund only and forgoing tax benefits like
        dependents and certain
        credits</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Not>
          <Dependency path="/MFJDependentsFilingForCredits" />
        </Not>
      </Derived>
    </Fact>

    <Fact path="/primaryFilerCouldBeDependentAndClaimerIsRequiredToFileOrFilingForCredits">
      <Name>Taxpayer could be a dependent</Name>
      <Description>Whether the primary TP could be a dependent. If they are not MFJ, then they in
        fact are a dependent.
        The only way for them not to be a dependent is if they file as MFJ and are required to file,
        or if they file as
        MFJ and opt to claim tax benefits.</Description>

      <Derived>
        <All>
          <Dependency path="/primaryFiler/canBeClaimed" />
          <Any>
            <Dependency path="/primaryFiler/potentialClaimerMustFile" />
            <All>
              <Not>
                <Dependency path="/primaryFiler/potentialClaimerMustFile" />
              </Not>
              <Dependency path="/primaryFiler/potentialClaimerDidFile" />
              <Not>
                <Dependency path="/primaryFilerPotentialClaimerFiledOnlyForRefund" />
              </Not>
            </All>
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/primaryFilerSocialSecurityNumberRestrictionsAreUnderstood">
      <Description>If the primary filer has restrictions on their social security number, we know
        them</Description>
      <Derived>
        <Any>
          <!-- We didn't need to collect ssn work status so we're good -->
          <Not>
            <Dependency path="/primaryFiler/needsSSNWorkStatus" />
          </Not>
          <All>
            <!-- We collected it and we know everything we need to know about the validity -->
            <Dependency path="/primaryFiler/needsSSNWorkStatus" />
            <IsComplete>
              <Dependency path="/primaryFilerSsnEmploymentValidity" />
            </IsComplete>

            <!-- We collected it but still needed to know if it was for a federally funded benefit
            only -->
            <Any>
              <Not>
                <Dependency path="/primaryFiler/ssnNotValidForEmployment" />
              </Not>
              <All>
                <Dependency path="/primaryFiler/ssnNotValidForEmployment" />
                <IsComplete>
                  <Dependency path="/primaryFiler/ssnOnlyForFederallyFundedBenefit" />
                </IsComplete>
              </All>
            </Any>
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/secondaryFilerSocialSecurityNumberRestrictionsAreComplete">
      <Description>If the secondary filer has restrictions on their social security number, we know
        they completed
        answering questions about them.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Any>
          <!-- We didn't need to collect ssn work status so we're good -->
          <Not>
            <Dependency path="/secondaryFiler/needsSSNWorkStatus" />
          </Not>
          <All>
            <!-- We collected it and we know everything we need to know about the validity -->
            <Dependency path="/secondaryFiler/needsSSNWorkStatus" />
            <IsComplete>
              <Dependency path="/secondaryFilerSsnEmploymentValidity" />
            </IsComplete>

            <!-- We collected it but still  -->
            <Any>
              <Not>
                <Dependency path="/secondaryFiler/ssnNotValidForEmployment" />
              </Not>
              <All>
                <Dependency path="/secondaryFiler/ssnNotValidForEmployment" />
                <IsComplete>
                  <Dependency path="/secondaryFiler/writableHasSSNOnlyForBenefits" />
                </IsComplete>
              </All>
            </Any>
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/aboutYouIsComplete">
      <Description>The About You section is complete</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <All>
          <IsComplete>
            <Dependency path="/primaryFiler/fullName" />
          </IsComplete>
          <IsComplete>
            <Dependency path="/primaryFiler/dateOfBirth" />
          </IsComplete>
          <IsComplete>
            <Dependency path="/address" />
          </IsComplete>
          <IsComplete>
            <Dependency path="/phone" />
          </IsComplete>
          <IsComplete>
            <Dependency path="/primaryFilerCouldBeDependentAndClaimerIsRequiredToFileOrFilingForCredits" />
          </IsComplete>
          <Any>
            <Not>
              <Dependency path="/primaryFilerCouldBeDependentAndClaimerIsRequiredToFileOrFilingForCredits" />
            </Not>
            <IsComplete>
              <Dependency path="/primaryFiler/willBeClaimed" />
            </IsComplete>
          </Any>
          <Dependency path="/primaryFilerSocialSecurityNumberRestrictionsAreUnderstood" />
          <IsComplete>
            <Dependency path="/filerResidenceAndIncomeState" />
          </IsComplete>
          <IsComplete>
            <Dependency path="/allPrimaryFilerIncomeFormsInScopedState" />
          </IsComplete>
          <IsComplete>
            <Dependency path="/primaryFiler/isBlind" />
          </IsComplete>
          <IsComplete>
            <Dependency path="/primaryFilerIsCitizenOrRAAllYear" />
          </IsComplete>
          <IsComplete>
            <Dependency path="/primaryFiler/isDisabled" />
          </IsComplete>
          <IsComplete>
            <Dependency path="/primaryFiler/isStudent" />
          </IsComplete>
          <IsComplete>
            <Dependency path="/receivedAlaskaPfd" />
          </IsComplete>
        </All>
      </Derived>
    </Fact>

    <Fact path="/flowMFJSpouseFilingRequirementSubsection">
      <Name>Fact for controlling the flow of showing the MFJ Spouse Filing Requirement Subsection</Name>
      <Description>Either the secondary filer can be claimed or the secondary filer can not be
        claimed and the primary
        filer is claimed.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Any>
          <Dependency path="/secondaryFiler/canBeClaimed" />
          <All>
            <Not>
              <Dependency path="/secondaryFiler/canBeClaimed" />
            </Not>
            <Dependency path="/primaryFilerCouldBeDependentAndClaimerIsRequiredToFileOrFilingForCredits" />
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/treatFilersAsDependents">
      <Description>

        The filer can be claimed as a dependent by someone who must file, or by someone who is
        filing for
        credits + deductions
        (not just for a refund). This means that they themselves cannot claim dependents, or use
        qualifying children to
        claim EITC. If they are filing MFJ, the filers have to choose to file for refund only to
        get into this status.

        This means that we treat the filers as dependents, and in this case:
        1. They will not be
        eligible to claim
        dependents, CTC, or ODC
        2. They will receive a reduced standard deduction.

      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <All>
                <Dependency module="filingStatus" path="/treatAsMFJ" />
                <IsComplete>
                  <Dependency path="/isMFJDependent" />
                </IsComplete>
              </All>
            </When>
            <Then>
              <Dependency path="/isMFJDependent" />
            </Then>
          </Case>
          <Case>
            <When>
              <!-- If not MFJ, it's just the primary filer's claimer status -->
              <True />
            </When>
            <Then>
              <Dependency path="/primaryFilerCouldBeDependentAndClaimerIsRequiredToFileOrFilingForCredits" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/MFJRequiredToFile">
      <Name>MFJ Required to File</Name>
      <Description>Whether an MFJ couple is required to file</Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/eitherFilerCanBeClaimed">
      <Description>Whether either filer can be claimed</Description>

      <Derived>
        <Any>
          <Dependency path="/primaryFiler/canBeClaimed" />
          <Dependency path="/secondaryFiler/canBeClaimed" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/isMFJDependent">
      <Name>isMFJDependent</Name>
      <Description>Whether the TP is categorized as an MFJ dependent</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency module="filingStatus" path="/treatAsMFJ" />
          <Dependency path="/flowMFJSpouseFilingRequirementSubsection" />
          <Not>
            <Dependency path="/MFJRequiredToFile" />
          </Not>
          <Dependency path="/MFJClaimingRefundOnly" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/taxpayerCannotBeClaimed">
      <Name>Taxpayer cannot be claimed</Name>
      <Description>The taxpayer is filing a joint return for tax benefits and cannot be claimed by another taxpayer</Description>

      <Derived>
        <All>
          <Dependency module="filingStatus" path="/treatAsMFJ" />
          <Dependency path="/flowMFJSpouseFilingRequirementSubsection" />
          <Not>
            <Dependency path="/MFJRequiredToFile" />
          </Not>
          <Not>
            <Dependency path="/MFJClaimingRefundOnly" />
          </Not>
        </All>
      </Derived>

      <Placeholder>
        <False />
      </Placeholder>
    </Fact>

    <Fact path="/filers/*/isPrimaryFiler">
      <Name>Filer is primary</Name>
      <Description>The primary filer is listed first on the tax return.</Description>
      <Export downstreamFacts="true" stateSystems="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/filers/*/isSecondaryFiler">
      <Name>Filer is secondary</Name>
      <Description>The secondary filer is listed second on the tax return.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <NotEqual>
          <Left>
            <Find path="/filers">
              <Dependency path="isPrimaryFiler" />
            </Find>
          </Left>
          <Right>
            <Dependency path=".." />
          </Right>
        </NotEqual>
      </Derived>
    </Fact>

    <Fact path="/pdfSecondaryFiler">
      <Name>Secondary filer for use in generating PDFs</Name>
      <Description>The spouse, if they should appear in PDFs as the secondary filer</Description>
      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
            </When>
            <Then>
              <Dependency path="/secondaryFiler" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/primaryFilerSsnEmploymentValidity">
      <Name>Employment validity for the primary filer</Name>
      <Description>Employment validity statements printed on filer's Social Security card.</Description>

      <Writable>
        <Enum optionsPath="/primaryFilerSsnEmploymentValidityOptions" />
      </Writable>
    </Fact>

    <Fact path="/secondaryFilerSsnEmploymentValidity">
      <Name>Employment validity</Name>
      <Description>Employment validity statements printed on filer's Social Security card.</Description>

      <Writable>
        <Enum optionsPath="/ssnEmploymentValidityOptions" />
      </Writable>
    </Fact>

    <Fact path="/filers/*/ssnValidForEitc">
      <Derived>
        <Any>
          <All>
            <Dependency path="../isSecondaryFiler" />
            <Dependency path="../tin/isSSN" />
            <Any>
              <!-- If we didn't need to ask work status, it's good -->
              <Not>
                <Dependency path="../needsSSNWorkStatus" />
              </Not>
              <Equal>
                <Left>
                  <Dependency path="/secondaryFilerSsnEmploymentValidity" />
                </Left>
                <Right>
                  <Enum optionsPath="/ssnEmploymentValidityOptions">validOnlyWithDhsAuthorization</Enum>
                </Right>
              </Equal>
              <Equal>
                <Left>
                  <Dependency path="/secondaryFilerSsnEmploymentValidity" />
                </Left>
                <Right>
                  <Enum optionsPath="/ssnEmploymentValidityOptions">neither</Enum>
                </Right>
              </Equal>
              <All>
                <!-- if their SSN is not valid for work, it can still provide EITC as long as it
                wasn't acquired only
                for
                     federal benefits-->
                <Dependency path="../ssnNotValidForEmployment" />
                <Not>
                  <Dependency path="../ssnOnlyForFederallyFundedBenefit" />
                </Not>
              </All>
            </Any>
          </All>
          <All>
            <Dependency path="../isPrimaryFiler" />
            <Dependency path="../tin/isSSN" />
            <Any>
              <Not>
                <!-- If we didn't need to ask work status, it's good -->
                <Dependency path="../needsSSNWorkStatus" />
              </Not>
              <Equal>
                <Left>
                  <Dependency path="/primaryFilerSsnEmploymentValidity" />
                </Left>
                <Right>
                  <Enum optionsPath="/primaryFilerSsnEmploymentValidityOptions">
                    validOnlyWithDhsAuthorization</Enum>
                </Right>
              </Equal>
              <Equal>
                <Left>
                  <Dependency path="/primaryFilerSsnEmploymentValidity" />
                </Left>
                <Right>
                  <Enum optionsPath="/primaryFilerSsnEmploymentValidityOptions">neither</Enum>
                </Right>
              </Equal>
              <All>
                <!-- if their SSN is not valid for work, it can still provide EITC as long as it
                wasn't acquired only
                for federal benefits-->
                <Dependency path="../ssnNotValidForEmployment" />
                <Not>
                  <Dependency path="../ssnOnlyForFederallyFundedBenefit" />
                </Not>
              </All>
            </Any>
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/filers/*/ssnNotValidForEmployment">
      <Description>The SSN is marked "not valid" for employment</Description>
      <Export stateSystems="true" />

      <Derived>
        <Any>
          <All>
            <Dependency path="../isSecondaryFiler" />
            <Dependency path="../tin/isSSN" />
            <Equal>
              <Left>
                <Dependency path="/secondaryFilerSsnEmploymentValidity" />
              </Left>
              <Right>
                <Enum optionsPath="/ssnEmploymentValidityOptions">notValid</Enum>
              </Right>
            </Equal>
          </All>
          <All>
            <Dependency path="../isPrimaryFiler" />
            <Dependency path="../tin/isSSN" />
            <Equal>
              <Left>
                <Dependency path="/primaryFilerSsnEmploymentValidity" />
              </Left>
              <Right>
                <Enum optionsPath="/primaryFilerSsnEmploymentValidityOptions">notValid</Enum>
              </Right>
            </Equal>
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/filers/*/writableHasSSNOnlyForBenefits">
      <Description>Does the filer only have a SSN to apply for federal benefits</Description>
      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/filers/*/ssnOnlyForFederallyFundedBenefit">
      <Description>Does the filer only have a SSN to apply for federal benefits</Description>
      <Derived>
        <All>
          <Dependency path="../tin/isSSN" />
          <IsComplete>
            <Dependency path="../writableHasSSNOnlyForBenefits" />
          </IsComplete>
          <IsComplete>
            <Dependency path="../ssnNotValidForEmployment" />
          </IsComplete>
          <Dependency path="../ssnNotValidForEmployment" />
          <Dependency path="../writableHasSSNOnlyForBenefits" />
        </All>
      </Derived>
    </Fact>


    <Fact path="/filers/*/isUsCitizenFullYear">
      <Name>Citizenship</Name>
      <Description>Whether the filer was a U.S. Citizen for all of the tax year</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/filers/*/needsSSNWorkStatus">
      <Name>Needs SSN Work Status</Name>
      <Description>A test for whether the flow should ask if the filer's SSN card has printed
        work-validitiy info</Description>
      <Derived>
        <All>
          <Not>
            <Dependency path="../isUsCitizenFullYear" />
          </Not>
          <Dependency path="../tin/isSSN" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/filers/*/writableCitizenAtEndOfTaxYear">
      <Name>(Writable) Citizenship at end of tax year</Name>
      <Description>(Writable) Whether the filer was a U.S. Citizen at the end of the tax year after
        starting the year as
        a U.S. resident</Description>
      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/filers/*/citizenAtEndOfTaxYear">
      <Name>Citizenship at end of tax year</Name>
      <Description>Whether the filer was a U.S. Citizen at the end of the tax year after starting
        the year as a U.S.
        resident</Description>

      <Derived>
        <All>
          <Not>
            <Dependency path="../isUsCitizenFullYear" />
          </Not>
          <Dependency path="../writableCitizenAtEndOfTaxYear" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/filers/*/writableIsNoncitizenResidentFullYear">
      <Name>(Writable) Non-citizen residency (full tax year)</Name>
      <Description>(Writable) Was the filer a resident for the whole tax year and not a citizen?</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/filers/*/isNoncitizenResidentFullYear">
      <Name>Non-citizen residency (full tax year)</Name>
      <Description>Was the filer a resident for the whole tax year and not a citizen? Includes
        spouses who are
        non-residents but whom have elected to be treated as a resident for tax purposes per IRC §
        6013(g), Election to
        Treat Nonresident Individual as Resident of the United States</Description>
      <Derived>
        <All>
          <Not>
            <Dependency path="../isUsCitizenFullYear" />
          </Not>
          <Not>
            <Dependency path="../citizenAtEndOfTaxYear" />
          </Not>
          <Dependency path="../writableIsNoncitizenResidentFullYear" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/filers/*/writableIsNational">
      <Name>(Writable) U.S. National</Name>
      <Description>(Writable) Whether the filer was a U.S. national</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/filers/*/isNational">
      <Name>U.S. National</Name>
      <Description>Whether the filer was a U.S. national</Description>

      <Derived>
        <All>
          <Not>
            <Dependency path="../isUsCitizenFullYear" />
          </Not>
          <Not>
            <Dependency path="../citizenAtEndOfTaxYear" />
          </Not>
          <Dependency path="../isNoncitizenResidentFullYear" />
          <Dependency path="../writableIsNational" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/filers/*/isCitizenOrNational">
      <Description>Was the filer a citizen all year, by the end of the year, or a national</Description>
      <Derived>
        <Any>
          <Dependency path="../isUsCitizenFullYear" />
          <Dependency path="../isNoncitizenResidentFullYear" />
          <Dependency path="../isNational" />
        </Any>
      </Derived>
    </Fact>

    <!-- TODO: Revist writable facts to determine a better way to handle this so we don't have to
    repeat logic: https://git.irslabs.org/irslabs-prototypes/direct-file/-/issues/2576 -->
    <Fact path="/primaryFilerResidencyKnockout">
      <Name>Primary filer because citizen and residency status</Name>
      <Description>Whether the primary filer was knocked out due to their citizen and residency
        status</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Not>
            <Dependency path="/primaryFiler/isUsCitizenFullYear" />
          </Not>
          <Not>
            <Dependency path="/primaryFiler/citizenAtEndOfTaxYear" />
          </Not>
          <Not>
            <Dependency path="/primaryFiler/isNoncitizenResidentFullYear" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/filers/*/daysMainHomeInUS">
      <Name>Number of days lived in the United States</Name>
      <Description>The number of days the filer's main home was in the U.S. Used for pdf form 8862.
        Assumed to be 365
        because taxpayers assert that they live in the state where their income was sourced all year</Description>
      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency module="eitc" path="/form8862RequiredAndHasNoQualifyingChildren" />
            </When>
            <Then>
              <String>365</String>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/filerResidenceAndIncomeState">
      <Name>Income from supported state</Name>
      <Description>Which state(s) the filer earned income in from our in-scope states</Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Enum optionsPath="/scopedStateOptions" />
      </Writable>
    </Fact>

    <Fact path="/primaryFilerW2And1099IntInScopedState">
      <Name>Primary filer's W-2 and 1099-INT forms are from an in-scope state</Name>
      <Description>Did all of the primary filer's W-2 and 1099-INT forms come from the same in-scope
        state?</Description>
      <Writable>
        <Enum optionsPath="/primaryFilerW2And1099IntStateOptions" />
      </Writable>
    </Fact>

    <Fact path="/receivedAlaskaPfd">
      <Description>Did the primary filer have an Alaska Permanent Fund Dividend?</Description>
      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/spouseReceivedAlaskaPfd">
      <Description>Did the secondary filer have an Alaska Permanent Fund Dividend?</Description>
      <Export downstreamFacts="true" />
      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/spouseW2And1099IntInScopedState">
      <Name>Spouse's W-2 and 1099-INT forms are from an in-scope state</Name>
      <Description>Did all of the spouse's W-2 and 1099-INT forms come from the same in-scope state?</Description>
      <Writable>
        <Enum optionsPath="/spouseW2And1099IntStateOptions" />
      </Writable>
      <Placeholder>
        <Dependency path="/spouseIncomeFormsInScopedState" />
      </Placeholder>
    </Fact>

    <Fact path="/livesInCommunityPropertyState">
      <Description>The filer lives in a Community Property state, where the income of a married
        couple is considered
        shared property of both individuals. This does not include two states,
        Tennessee and South Dakota, which have
        elective Community Property laws.</Description>

      <Derived>
        <Any>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">az</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">ca</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">id</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <!-- <Equal>
              <Left>
                <Enum optionsPath="/scopedStateOptions">la</Enum>
              </Left>
              <Right>
                <Dependency path="/filerResidenceAndIncomeState" />
              </Right>
            </Equal> -->
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">nm</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">nv</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">tx</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">wa</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">wi</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/allPrimaryFilerIncomeFormsInScopedState">
      <Name>All primary filer income forms are from an in-scope state</Name>
      <Description>Derives a state based on all primary filer income forms, prioritizing
        'anotherState'.</Description>
      <Derived>
        <Switch>
          <Case>
            <When>
              <Any>
                <Equal>
                  <Left>
                    <Dependency path="/primaryFilerW2And1099IntInScopedState" />
                  </Left>
                  <Right>
                    <Enum optionsPath="/primaryFilerW2And1099IntStateOptions">anotherState</Enum>
                  </Right>
                </Equal>
              </Any>
            </When>
            <Then>
              <Enum optionsPath="/primaryFilerW2And1099IntStateOptions">anotherState</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency path="/primaryFilerW2And1099IntInScopedState" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/allSpouseFormsInScopedState">
      <Name>All spouse income forms are from an in-scope state</Name>
      <Description>Derives a state based on all spouse income forms, prioritizing 'anotherState'.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <IsComplete>
                <Dependency path="/spouseIncomeFormsInScopedState" />
              </IsComplete>
            </When>
            <Then>
              <Dependency path="/spouseIncomeFormsInScopedState" />
            </Then>
          </Case>
          <Case>
            <When>
              <Any>
                <Equal>
                  <Left>
                    <Dependency path="/spouseW2And1099IntInScopedState" />
                  </Left>
                  <Right>
                    <Enum optionsPath="/spouseW2And1099IntStateOptions">anotherState</Enum>
                  </Right>
                </Equal>
              </Any>
            </When>
            <Then>
              <Enum optionsPath="/primaryFilerW2And1099IntStateOptions">anotherState</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency path="/spouseW2And1099IntInScopedState" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/spouseLivesOrHasW2InAnotherState">
      <Description>The filer has some W-2 forms from out of state</Description>
      <Derived>
        <Any>
          <All>
            <Dependency module="filingStatus" path="/treatAsMFJ" />
            <Equal>
              <Left>
                <Dependency path="/spouseLivesInTPState" />
              </Left>
              <Right>
                <Enum optionsPath="/spouseScopedStateOptions">moreThanOne</Enum>
              </Right>
            </Equal>
          </All>
          <All>
            <Dependency module="filingStatus" path="/treatAsMFJ" />
            <Equal>
              <Left>
                <Dependency path="/spouseLivesInTPState" />
              </Left>
              <Right>
                <Enum optionsPath="/spouseScopedStateOptions">noneOfTheAbove</Enum>
              </Right>
            </Equal>
          </All>
          <All>
            <Equal>
              <Left>
                <Dependency path="/spouseW2And1099IntInScopedState" />
              </Left>
              <Right>
                <Enum optionsPath="/spouseW2And1099IntStateOptions">anotherState</Enum>
              </Right>
            </Equal>
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/livedInNy">
      <Name>The filer(s) lives in New York</Name>
      <Description>We support a special set of Box 14 codes for New York, so we need to condition
        the flow on whether
        the
        filer(s) lived there in the tax year</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Equal>
          <Left>
            <Enum optionsPath="/scopedStateOptions">ny</Enum>
          </Left>
          <Right>
            <Dependency path="/filerResidenceAndIncomeState" />
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/livedInNj">
      <Name>The filer(s) lives in New Jersey</Name>
      <Description>We support a special set of Box 14 codes for New Jersey, so we need to condition
        the flow on whether
        the
        filer(s) lived there in the tax year</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Equal>
          <Left>
            <Enum optionsPath="/scopedStateOptions">nj</Enum>
          </Left>
          <Right>
            <Dependency path="/filerResidenceAndIncomeState" />
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/livedInMd">
      <Name>The filer(s) lives in Maryland</Name>
      <Description>We support a special set of Box 14 codes for Maryland, so we need to condition
        the flow on whether
        the
        filer(s) lived there in the tax year</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Equal>
          <Left>
            <Enum optionsPath="/scopedStateOptions">md</Enum>
          </Left>
          <Right>
            <Dependency path="/filerResidenceAndIncomeState" />
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/livedInNc">
      <Name>The filer(s) lives in North Carolina</Name>
      <Description>We show North Carolina-specific information when the filer(s) lives in North Carolina</Description>

      <Derived>
        <Equal>
          <Left>
            <Enum optionsPath="/scopedStateOptions">nc</Enum>
          </Left>
          <Right>
            <Dependency path="/filerResidenceAndIncomeState" />
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/livedInMa">
      <Name>The filer(s) lives in Massachusetts</Name>
      <Description>Washington has a Working Families Tax Credit, so we need a condition to show
        Massachusetts-specific
        content.</Description>
      <Derived>
        <Equal>
          <Left>
            <Enum optionsPath="/scopedStateOptions">ma</Enum>
          </Left>
          <Right>
            <Dependency path="/filerResidenceAndIncomeState" />
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/livedInWa">
      <Name>The filer(s) lives in Washington State</Name>
      <Description>Washington has a Working Families Tax Credit, so we need a condition to send the
        filer(s) to the
        website in order to check their eligibility.</Description>
      <Derived>
        <Equal>
          <Left>
            <Enum optionsPath="/scopedStateOptions">wa</Enum>
          </Left>
          <Right>
            <Dependency path="/filerResidenceAndIncomeState" />
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/livedInCa">
      <Name>The filer(s) lives in California</Name>
      <Description>California does not support transferring data from Direct File, so we need a
        condition so that we can
        provide relavent content to the filer(s) living there.</Description>
      <Derived>
        <Equal>
          <Left>
            <Enum optionsPath="/scopedStateOptions">ca</Enum>
          </Left>
          <Right>
            <Dependency path="/filerResidenceAndIncomeState" />
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/livedInAk">
      <Description>Lived in Alaska</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <Equal>
          <Left>
            <Enum optionsPath="/scopedStateOptions">ak</Enum>
          </Left>
          <Right>
            <Dependency path="/filerResidenceAndIncomeState" />
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/livedInHi">
      <Description>Lived in Hawaii</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <Equal>
          <Left>
            <Enum optionsPath="/scopedStateOptions">hi</Enum>
          </Left>
          <Right>
            <Dependency path="/filerResidenceAndIncomeState" />
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/stateFilingDeadline">
      <Description>Filing deadline based on the TP's state of residence</Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency path="/livedInMa" />
            </When>
            <Then>
              <Dependency module="constants" path="/massachusettsAndMaineDeadline" />
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency module="constants" path="/defaultTaxDay" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/mayBenefitFromFilingStateTaxes">
      <Name>Filer(s) may benefit from filing state taxes</Name>
      <Description>Used to show additional info on knockout screen that filer(s) may benefit from filing
        state taxes</Description>

      <Derived>
        <Any>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">az</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">ca</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">ct</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">id</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">il</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">ks</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">me</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">md</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">ma</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">nj</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">nm</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">ny</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">nc</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">or</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">pa</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">wi</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/filerResidenceOrIncomeStateOutOfScope">
      <Description>The primary filer earned income either in none of our in scope states or multiple</Description>
      <Derived>
        <Any>
          <Equal>
            <Left>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Left>
            <Right>
              <Enum optionsPath="/scopedStateOptions">noneOfThese</Enum>
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Left>
            <Right>
              <Enum optionsPath="/scopedStateOptions">moreThanOne</Enum>
            </Right>
          </Equal>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/isResidentOfStateWithMarketplace">
      <Name>Resident of specific states</Name>
      <Description>Whether the filer resides in CA, CO, CT, DC, GA, ID, KY, ME, MD, MA, MN, NV,
        NJ, NM, NY, PA, RI, VT
        and WA.</Description>

      <Derived>
        <Any>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">ca</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">co</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">ct</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">dc</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">ga</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">id</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">ky</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">me</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">md</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">ma</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">mn</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">nv</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">nj</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">nm</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">ny</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">pa</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">ri</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">vi</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">vt</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Enum optionsPath="/scopedStateOptions">wa</Enum>
            </Left>
            <Right>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Right>
          </Equal>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/stateMarketplaceName">
      <Name>State Marketplace Name</Name>
      <Description>Returns the marketplace name key for states with their own health insurance marketplace</Description>
      <Derived>
        <Switch>
          <Case>
            <When>
              <Not>
                <Dependency path="/isResidentOfStateWithMarketplace" />
              </Not>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">none</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">ca</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">covered_california</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">co</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">connect_health_colorado</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">ct</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">access_health_ct</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">dc</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">dc_health_link</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">ga</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">georgia_access</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">id</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">your_health_idaho</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">ky</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">kynect</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">me</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">cover_me</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">md</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">maryland_health_connection</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">ma</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">mass_health_connector</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">mn</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">mnsure</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">nv</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">nevada_health_link</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">nj</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">get_covered_nj</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">nm</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">bewell</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">ny</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">ny_state_of_health</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">pa</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">pennie</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">ri</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">healthsource_ri</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">vi</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">virginia_insurance_marketplace</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">vt</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">vermont_health_connect</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Enum optionsPath="/scopedStateOptions">wa</Enum>
                </Left>
                <Right>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/stateMarketplaceOptions">washington_healthplanfinder</Enum>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/spouseResidenceAndIncomeStateOutOfScope">
      <Description>The spouse earned income either in none of our in scope states or multiple</Description>
      <Derived>
        <Any>
          <All>
            <Dependency module="filingStatus" path="/treatAsMFJ" />
            <Equal>
              <Left>
                <Dependency path="/spouseLivesInTPState" />
              </Left>
              <Right>
                <Enum optionsPath="/spouseScopedStateOptions">moreThanOne</Enum>
              </Right>
            </Equal>
          </All>
          <All>
            <Dependency module="filingStatus" path="/treatAsMFJ" />
            <Equal>
              <Left>
                <Dependency path="/spouseLivesInTPState" />
              </Left>
              <Right>
                <Enum optionsPath="/spouseScopedStateOptions">noneOfTheAbove</Enum>
              </Right>
            </Equal>
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/filerResidenceOrIncomeOrW2StateOutOfScope">
      <Description>The primary filer earned income or W-2 forms either in none of our in scope states or multiple</Description>
      <Derived>
        <Any>
          <Equal>
            <Left>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Left>
            <Right>
              <Enum optionsPath="/scopedStateOptions">noneOfThese</Enum>
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Left>
            <Right>
              <Enum optionsPath="/scopedStateOptions">moreThanOne</Enum>
            </Right>
          </Equal>

          <Equal>
            <Left>
              <Dependency path="/allPrimaryFilerIncomeFormsInScopedState" />
            </Left>
            <Right>
              <Enum optionsPath="/primaryFilerW2And1099IntStateOptions">anotherState</Enum>
            </Right>
          </Equal>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/hasIncomeInScope">
      <Name>Flow: Filer Has Income In-Scope</Name>
      <Description>The filer has only earned income in ONE of our in-scope states</Description>
      <Derived>
        <Not>
          <Any>
            <Dependency path="/filerResidenceOrIncomeStateOutOfScope" />
            <Equal>
              <Left>
                <Dependency path="/allPrimaryFilerIncomeFormsInScopedState" />
              </Left>
              <Right>
                <Enum optionsPath="/primaryFilerW2And1099IntStateOptions">anotherState</Enum>
              </Right>
            </Equal>

            <All>
              <IsComplete>
                <Dependency path="/receivedAlaskaPfd" />
              </IsComplete>
              <Dependency path="/receivedAlaskaPfd" />
              <NotEqual>
                <Left>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Left>
                <Right>
                  <Enum optionsPath="/scopedStateOptions">ak</Enum>
                </Right>
              </NotEqual>
            </All>

            <All>
              <Dependency module="filingStatus" path="/treatAsMFJ" />
              <IsComplete>
                <Dependency path="/spouseReceivedAlaskaPfd" />
              </IsComplete>
              <Dependency path="/spouseReceivedAlaskaPfd" />
              <NotEqual>
                <Left>
                  <Dependency path="/filerResidenceAndIncomeState" />
                </Left>
                <Right>
                  <Enum optionsPath="/scopedStateOptions">ak</Enum>
                </Right>
              </NotEqual>
            </All>

            <!-- If they are MFJ -->
            <Dependency path="/spouseResidenceAndIncomeStateOutOfScope" />
            <All>
              <Dependency module="filingStatus" path="/treatAsMFJ" />
              <Equal>
                <Left>
                  <Dependency path="/allSpouseFormsInScopedState" />
                </Left>
                <Right>
                  <Enum optionsPath="/primaryFilerW2And1099IntStateOptions">anotherState</Enum>
                </Right>
              </Equal>
            </All>
          </Any>
        </Not>
      </Derived>
    </Fact>

    <Fact path="/filingStateOrProvince">
      <Name>The state(s) in which the taxpayer should file state taxes</Name>
      <Description>The sole fact used to determine where the taxpayer should file state taxes</Description>
      <Derived>
        <Switch>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Dependency path="/hasIncomeInScope" />
                </Left>
                <Right>
                  <True />
                </Right>
              </Equal>
            </When>
            <Then>
              <Dependency path="/filerResidenceAndIncomeState" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <!--
      #################################
      ### FILER ALIASES/AGGREGATORS ###
      #################################
    -->

    <Fact path="/primaryFiler">
      <Name>Primary filer</Name>
      <Description>The primary filer of the tax return.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Find path="/filers">
          <Dependency path="isPrimaryFiler" />
        </Find>
      </Derived>
    </Fact>

    <Fact path="/secondaryFiler">
      <Name>Secondary filer</Name>
      <Description>The secondary filer of the tax return, if there is one.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Find path="/filers">
          <Dependency path="isSecondaryFiler" />
        </Find>
      </Derived>
    </Fact>

    <Fact path="/primarySomeoneCanClaimForTaxBenefits">
      <Name>Primary filer can be claimed as a dependent</Name>
      <Description>Whether the 1040 should indicate someone can claim primary filer as a dependent.</Description>
      <Export mef="true" downstreamFacts="true" />

      <Derived>
        <Any>
          <All>
            <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
            <Dependency path="/isMFJDependent" />
            <Dependency path="/primaryFilerCouldBeDependentAndClaimerIsRequiredToFileOrFilingForCredits" />
          </All>
          <Dependency
            path="/notMfjAndPrimaryFilerCouldBeDependentAndClaimerIsRequiredToFileOrFilingForCredits" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/notMfjAndPrimaryFilerCouldBeDependentAndClaimerIsRequiredToFileOrFilingForCredits">
      <Description>Not MFJ + /primaryFilerCouldBeDependentAndClaimerIsRequiredToFileOrFilingForCredits</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <All>
          <Not>
            <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
          </Not>
          <Dependency path="/primaryFilerCouldBeDependentAndClaimerIsRequiredToFileOrFilingForCredits" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/secondarySomeoneCanClaimForTaxBenefits">
      <Name>Secondary filer can be claimed as a dependent</Name>
      <Description>Whether the 1040 should indicate someone can claim secondary filer as a
        dependent.</Description>
      <Export mef="true" downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
          <Dependency path="/isMFJDependent" />
          <Dependency path="/secondaryFiler/canBeClaimed" />
        </All>
      </Derived>
    </Fact>


    <Fact path="/filers/*/hasTin">
      <Name>Filer has TIN</Name>
      <Description>The filer has provided their TIN</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <IsComplete>
          <Dependency path="../tin" />
        </IsComplete>
      </Derived>
    </Fact>

    <Fact path="/filersWithTins">
      <Name>Filers with TINs</Name>
      <Description>All filers who have provided TINs</Description>
      <Derived>
        <Filter path="/filers">
          <Dependency path="hasTin" />
        </Filter>
      </Derived>
    </Fact>


    <Fact path="/filers/*/isTinUnique">
      <Name>Filer Tin is unique</Name>
      <Description>Is this filer's TIN unique among filers with TINs?</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <Equal>
          <Left>
            <Count>
              <Equal>
                <Left>
                  <Dependency path="../tin" />
                </Left>
                <Right>
                  <Dependency path="/filersWithTins/*/tin" />
                </Right>
              </Equal>
            </Count>
          </Left>
          <Right>
            <Int>1</Int>
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/exemptSpouse">
      <Name>Exempt spouse</Name>
      <Description>The spouse of the primary filer if the spouse is exempt. Used for populating the
        1040's exempt
        spousal
        information.</Description>
      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency path="/isSpouseExempt" />
            </When>
            <Then>
              <Dependency path="/secondaryFiler" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/isSpouseExempt">
      <Name>Is spouse exempt</Name>
      <Description>Whether the spouse of the primary filer is exempt from filing a separate tax
        return.</Description>
      <Derived>
        <All>
          <Not>
            <Dependency path="/secondaryFiler/canBeClaimed" />
          </Not>
          <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/minimumFilerDateOfBirth">
      <Name>Date of birth of oldest filer</Name>
      <Description>The date of birth of the oldest filer, for purposes of the age test for
        qualifying children.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <All>
                <Dependency module="filingStatus" path="/treatAsMFJ" />
                <IsComplete>
                  <Dependency path="/secondaryFiler/dateOfBirth" />
                </IsComplete>
              </All>
            </When>
            <Then>
              <Minimum>
                <Dependency path="/filers/*/dateOfBirth" />
              </Minimum>
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency path="/primaryFiler/dateOfBirth" />
            </Then>
          </Case>
        </Switch>

      </Derived>
    </Fact>


    <!-- Maybe all of the below in a spouse module -->

    <Fact path="/spouseItemizes">
      <Name>Is the filer's spouse itemizing deductions?</Name>
      <Description>If your spouse itemizes deductions on their tax return when filing separately
        from you, it means you
        the filer cannot take the standard deduction on their own return.</Description>
      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/spouseItemizesKnockout">
      <Name>Spouse itemizes knockout</Name>
      <Description>We should knock the user out because their spouse is filing and itemizing.
        Includes both facts to be
        defensive to edits.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency path="/spouseItemizes" />
          <Dependency path="/MFSSpouseFilingReturnDerived" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/64yearsBeforeTaxYear">
      <Name>64 Years before tax year</Name>
      <Description>64 years before the current tax year.</Description>

      <Derived>
        <Subtract>
          <Minuend>
            <Dependency module="constants" path="/taxYear" />
          </Minuend>
          <Subtrahends>
            <Int>64</Int>
          </Subtrahends>
        </Subtract>
      </Derived>
    </Fact>

    <Fact path="/secondaryFilerDateOfDeath">
      <Description>The date of death of the secondary filer.</Description>
      <Export downstreamFacts="true" />
      <TaxYear>2024</TaxYear>

      <Writable>
        <Day />
        <Limit type="Max">
          <Day>2025-01-01</Day>
        </Limit>
      </Writable>
    </Fact>

    <Fact path="/spouseDateOfDeath">
      <Description>The date of death of the primary filer's spouse. Used to populate the form 1040
        SpouseDeathDt XML
        element.</Description>
      <Export mef="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <All>
                <Dependency path="/inScopeDeceasedSpouse" />
                <IsComplete>
                  <Dependency path="/secondaryFilerDateOfDeath" />
                </IsComplete>
              </All>
            </When>
            <Then>
              <Dependency path="/secondaryFilerDateOfDeath" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/inScopeDeceasedSpouse">
      <Description>Whether the primary filer has a deceased spouse currently supported by DF. Used
        to populate the
        form
        1040 SurvivingSpouseInd element.</Description>
      <Export mef="true" />

      <Derived>
        <All>
          <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
          <IsComplete>
            <Dependency path="/isWidowedInTaxYear" />
          </IsComplete>
          <Dependency path="/isWidowedInTaxYear" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/secondaryFilerAgeDuringDeathYear">
      <Description>The age that the spouse may have turned during the year they died</Description>

      <Derived>
        <Subtract>
          <Minuend>
            <Dependency path="/secondaryFilerDateOfDeath/year" />
          </Minuend>
          <Subtrahends>
            <Dependency path="/secondaryFiler/dayBeforeDateOfBirth/year" />
          </Subtrahends>
        </Subtract>
      </Derived>
    </Fact>

    <Fact path="/secondaryFilerAgeDayBeforeDeath">
      <Description>
        The age at death of the filer when counting the day before their birthday as their birthday.
        This
        birthday definition is used for at least the standard deduction and the 25-year minimum
        age for EITC. It is not
        used for the 65 year maximum age for EITC.
      </Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Dependency path="/secondaryFilerDateOfDeath/month" />
                </Left>
                <Right>
                  <Dependency path="/secondaryFiler/dayBeforeDateOfBirth/month" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Switch>
                <!-- If they didn't reach the day before their birthday before dying, they did not
                age -->
                <Case>
                  <When>
                    <LessThan>
                      <Left>
                        <Dependency path="/secondaryFilerDateOfDeath/day" />
                      </Left>
                      <Right>
                        <!-- The day before their birthday is when they are 65. -->
                        <Dependency path="/secondaryFiler/dayBeforeDateOfBirth/day" />
                      </Right>
                    </LessThan>
                  </When>
                  <Then>
                    <Subtract>
                      <Minuend>
                        <Dependency path="/secondaryFilerAgeDuringDeathYear" />
                      </Minuend>
                      <Subtrahends>
                        <Int>1</Int>
                      </Subtrahends>
                    </Subtract>
                  </Then>
                </Case>
                <Case>
                  <When>
                    <True />
                  </When>
                  <Then>
                    <Dependency path="/secondaryFilerAgeDuringDeathYear" />
                  </Then>
                </Case>
              </Switch>
            </Then>
          </Case>
          <Case>
            <When>
              <GreaterThan>
                <Left>
                  <Dependency path="/secondaryFilerDateOfDeath/month" />
                </Left>
                <Right>
                  <Dependency path="/secondaryFiler/dayBeforeDateOfBirth/month" />
                </Right>
              </GreaterThan>
            </When>
            <Then>
              <Dependency path="/secondaryFilerAgeDuringDeathYear" />
            </Then>
          </Case>
          <Case>
            <When>
              <LessThan>
                <Left>
                  <Dependency path="/secondaryFilerDateOfDeath/month" />
                </Left>
                <Right>
                  <Dependency path="/secondaryFiler/dayBeforeDateOfBirth/month" />
                </Right>
              </LessThan>
            </When>
            <Then>
              <Subtract>
                <Minuend>
                  <Dependency path="/secondaryFilerAgeDuringDeathYear" />
                </Minuend>
                <Subtrahends>
                  <Int>1</Int>
                </Subtrahends>
              </Subtract>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/secondaryFilerAgeDayOfDeath">
      <Description>
        The age of the secondary filer on their date of death, counting
        their actual date of birth as their
        birthday. This is used for
        the 65-year maximum age on self-only EITC, but is not used
        for the 25-year minimum age,
        or for standard deduction.
      </Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Dependency path="/secondaryFilerDateOfDeath/month" />
                </Left>
                <Right>
                  <Dependency path="/secondaryFiler/dateOfBirth/month" />
                </Right>
              </Equal>
            </When>
            <Then>
              <Switch>
                <Case>
                  <When>
                    <LessThan>
                      <Left>
                        <Dependency path="/secondaryFilerDateOfDeath/day" />
                      </Left>
                      <Right>
                        <!-- If they didn't reach their birthday, then they did not age. -->
                        <Dependency path="/secondaryFiler/dateOfBirth/day" />
                      </Right>
                    </LessThan>
                  </When>
                  <Then>
                    <Subtract>
                      <Minuend>
                        <Dependency path="/secondaryFilerAgeDuringDeathYear" />
                      </Minuend>
                      <Subtrahends>
                        <Int>1</Int>
                      </Subtrahends>
                    </Subtract>
                  </Then>
                </Case>
                <Case>
                  <When>
                    <True />
                  </When>
                  <Then>
                    <Dependency path="/secondaryFilerAgeDuringDeathYear" />
                  </Then>
                </Case>
              </Switch>
            </Then>
          </Case>
          <Case>
            <When>
              <GreaterThan>
                <Left>
                  <Dependency path="/secondaryFilerDateOfDeath/month" />
                </Left>
                <Right>
                  <Dependency path="/secondaryFiler/dateOfBirth/month" />
                </Right>
              </GreaterThan>
            </When>
            <Then>
              <Dependency path="/secondaryFilerAgeDuringDeathYear" />
            </Then>
          </Case>
          <Case>
            <When>
              <LessThan>
                <Left>
                  <Dependency path="/secondaryFilerDateOfDeath/month" />
                </Left>
                <Right>
                  <Dependency path="/secondaryFiler/dateOfBirth/month" />
                </Right>
              </LessThan>
            </When>
            <Then>
              <Subtract>
                <Minuend>
                  <Dependency path="/secondaryFilerAgeDuringDeathYear" />
                </Minuend>
                <Subtrahends>
                  <Int>1</Int>
                </Subtrahends>
              </Subtract>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>


    <Fact path="/MFJDeceasedSpouseReachedAge65ForStandardD">
      <Name>Whether the deceased spouse turned age 65 in the tax year.</Name>
      <Description>
        The spouse died and turned 65 in the tax year. Calculated using their day of birth
        as the day before
        their birthday. Cannot be used for the EIC calculation.
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <GreaterThanOrEqual>
          <Left>
            <Dependency path="/secondaryFilerAgeDayBeforeDeath" />
          </Left>
          <Right>
            <Int>65</Int>
          </Right>
        </GreaterThanOrEqual>
      </Derived>
    </Fact>

    <Fact path="/MFSSpouseFilingReturnDerived">
      <Name>**SUPERCEDES /MFSSpouseFilingReturn.** Whether or not the spouse is filing a return.</Name>
      <Description>If the spouse is filing a return or having a return filed for them. I'm
        intentionally leaving this as
        all marital statuses except widowed here though i could be convinced to add a case for
        married only. Tests in
        filers.test.ts reflect this choice. kate3/6/24
      </Description>

      <Derived>
        <Any>
          <Switch>
            <Case>
              <When>
                <All>
                  <Dependency path="/isWidowed" />
                  <IsComplete>
                    <Dependency path="/MFSDeceasedSpouseFilingReturn" />
                  </IsComplete>
                </All>
              </When>
              <Then>
                <Dependency path="/MFSDeceasedSpouseFilingReturn" />
              </Then>
            </Case>
            <Case>
              <When>
                <All>
                  <Not>
                    <Dependency path="/isWidowed" />
                  </Not>
                  <IsComplete>
                    <Dependency path="/MFSLivingSpouseFilingReturn" />
                  </IsComplete>
                </All>
              </When>
              <Then>
                <Dependency path="/MFSLivingSpouseFilingReturn" />
              </Then>
            </Case>
            <Case>
              <When>
                <!-- patch for old returns that use this fact -->
                <IsComplete>
                  <Dependency path="/MFSSpouseFilingReturn" />
                </IsComplete>
              </When>
              <Then>
                <Dependency path="/MFSSpouseFilingReturn" />
              </Then>
            </Case>
          </Switch>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/MFSSpouseFilingReturn">
      <Name>**DEPRECATED: The correct fact to rely on is now /MFSSpouseFilingReturnDerived.** MFS
        spouse will file
        return</Name>
      <Description>If the spouse is filing a return or having a return filed for them.</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/MFSLivingSpouseFilingReturn">
      <Name>Living MFS spouse will file return</Name>
      <Description>Active voice: "my MFS spouse will file a return"</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/MFSDeceasedSpouseFilingReturn">
      <Name>Dead MFS spouse will have return filed for them</Name>
      <Description>Passive voice: "someone will file a return for my MFS spouse"</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/MFSSpouseHasNRTIN">
      <Name>Wether or not the spouse has a Tax Identification Number</Name>
      <Description>If the spouse has a Tax Identification Number</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/MFSSpouseHasGrossIncome">
      <Name>Whether or not the spouse has a gross income.</Name>
      <Description>If the spouse had any gross income in the tax year.</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/MFSSpouse65OrOlder">
      <Name>Whether or not the spouse is 65 or older.</Name>
      <Description>If the spouse had reached age 65 in the tax year.</Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/MFSNeedSpouseTaxId">
      <Name>Whether to get the taxID of the spouse.</Name>
      <Description>Check if the spouse has a NRTIN or is a US citizen.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Any>
          <Dependency path="/MFSSpouseHasNRTIN" />
          <Dependency path="/secondaryFiler/isUsCitizenFullYear" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/MFSLivesInMdNcSpouseHasNoTin">
      <Name>Whether MFS TP lives in NC or MD and spouse has no TIN/SSN.</Name>
      <Description>Check if the MFS TP lives in NC or MD and spouse has no TIN/SSN.</Description>

      <Derived>
        <All>
          <Not>
            <Dependency path="/MFSSpouseHasNRTIN" />
          </Not>
          <Any>
            <Equal>
              <Left>
                <Enum optionsPath="/scopedStateOptions">md</Enum>
              </Left>
              <Right>
                <Dependency module="filers" path="/filerResidenceAndIncomeState" />
              </Right>
            </Equal>
            <Equal>
              <Left>
                <Enum optionsPath="/scopedStateOptions">nc</Enum>
              </Left>
              <Right>
                <Dependency module="filers" path="/filerResidenceAndIncomeState" />
              </Right>
            </Equal>
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/MFSSpouseProvidesNoBenefits">
      <Name>The MFS spouse will provide no benefits for the standard deduction.</Name>
      <Description>End the questionaire if the spouse is filing a tax return or does have gross
        income or can be claimed
        as a dependent.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Any>
          <Dependency path="/MFSSpouseFilingReturnDerived" />
          <All>
            <Not>
              <Dependency path="/MFSSpouseFilingReturnDerived" />
            </Not>
            <Any>
              <Dependency path="/MFSSpouseHasGrossIncome" />
              <All>
                <Not>
                  <Dependency path="/MFSSpouseHasGrossIncome" />
                </Not>
                <Dependency path="/secondaryFiler/canBeClaimed" />
              </All>
            </Any>
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/MFSFilingThresholdAmount">
      <Name>Married Filing Separately Threshold Amount</Name>
      <Description>Filing threshold amount for filers who are married filing separately. (Equal to
        the amount of the
        personal exemption, but due to suspension of the personal exemption under TCJA, the
        exemption was reduced to $0.
        While the exemption is $0, IRS will use $5 as the threshold.)</Description>
      <TaxYear>2024</TaxYear>

      <Derived>
        <Dollar>
          5
        </Dollar>
      </Derived>
    </Fact>

    <Fact path="/secondaryFilerResidencyEligibleForMFJ">
      <Name>Filers's marriage is valid for MFJ</Name>
      <Description> The filer's spouse met some citizenship or residency requirement that allows
        them to file jointly.
        https://www.irs.gov/publications/p519
      </Description>
      <Export downstreamFacts="true" />


      <Derived>
        <Any>
          <Dependency path="/secondaryFiler/isUsCitizenFullYear" />
          <Dependency path="/secondaryFiler/citizenAtEndOfTaxYear" />
          <Dependency path="/secondaryFiler/isNoncitizenResidentFullYear" />
        </Any>
      </Derived>
    </Fact>


    <Fact path="/spouseIncomeFormsInScopedState">
      <Name>Filer's W-2 and 1099-G forms are from an in-scope state</Name>
      <Description>Did all of the filer's W-2 and 1099-G forms come from the same state?</Description>
      <Writable>
        <Enum optionsPath="/primaryFilerW2And1099IntStateOptions" />
      </Writable>
    </Fact>

    <Fact path="/spouseLivesInTPState">
      <Name>Whether spouse lives in the tax payer's state</Name>
      <Description>Whether the filer's spouse lived in the same state as them all year, in mulitple
        states, or something
        else</Description>
      <Writable>
        <Enum optionsPath="/spouseScopedStateOptions" />
      </Writable>
    </Fact>

    <Fact path="/livedTogetherApartFlowIsComplete">
      <Description>Spouse questions related to living together/apart have been completed</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Any>
          <Dependency path="/livedTogetherAllYearWithSpouse" />
          <All>
            <Not>
              <Dependency path="/livedTogetherAllYearWithSpouse" />
            </Not>
            <Dependency path="/livedApartAllYear" />
          </All>
          <All>
            <Not>
              <Dependency path="/livedTogetherAllYearWithSpouse" />
            </Not>
            <Dependency path="/livedTogetherMoreThanSixMonths" />
            <IsComplete>
              <Dependency path="/writableSeparationAgreement" />
            </IsComplete>
          </All>
          <All>
            <Not>
              <Dependency path="/livedTogetherAllYearWithSpouse" />
            </Not>
            <Dependency path="/livedTogetherSixMonthsOrLess" />
            <Dependency path="/writableLivedApartLastSixMonths" />
          </All>
          <All>
            <Not>
              <Dependency path="/livedTogetherAllYearWithSpouse" />
            </Not>
            <Dependency path="/livedTogetherSixMonthsOrLess" />
            <Not>
              <Dependency path="/writableLivedApartLastSixMonths" />
            </Not>
            <IsComplete>
              <Dependency path="/writableSeparationAgreement" />
            </IsComplete>
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/livedTogetherAllYearWithSpouse">
      <Name>Lived with the spouse during the entire tax year</Name>
      <Description>Whether the taxpayer lived together with their spouse the entire Tax Year</Description>
      <Export downstreamFacts="true" />
      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/spouseLivedTogetherMonths">
      <Name>Months lived apart from spouse during tax year</Name>
      <Description>Months lived apart from their spouse in the Tax Year</Description>

      <Writable>
        <Enum optionsPath="/spouseLivedTogetherMonthsOptions" />
      </Writable>
    </Fact>

    <Fact path="/spouseLivedTogetherMonthsOptions">
      <Name>Months Spouse Lived Apart Options</Name>
      <Description>Months a spouse lived apart options</Description>

      <Derived>
        <EnumOptions>
          <String>livedApartAllYear</String>
          <String>livedTogetherSixMonthsOrLess</String>
          <String>livedTogetherMoreThanSixMonths</String>
        </EnumOptions>
      </Derived>
    </Fact>

    <Fact path="/livedTogetherSixMonthsOrLess">
      <Description>Whether the taxpayer lived with their spouse for six months or less.</Description>

      <Derived>
        <All>
          <Not>
            <Dependency path="/livedTogetherAllYearWithSpouse" />
          </Not>
          <Equal>
            <Left>
              <Dependency path="/spouseLivedTogetherMonths" />
            </Left>
            <Right>
              <Enum optionsPath="/spouseLivedTogetherMonthsOptions">livedTogetherSixMonthsOrLess</Enum>
            </Right>
          </Equal>
        </All>
      </Derived>
    </Fact>

    <Fact path="/livedTogetherMoreThanSixMonths">
      <Description>Whether the taxpayer lived with their spouse for more than six months but less than the full year.</Description>

      <Derived>
        <All>
          <Not>
            <Dependency path="/livedTogetherAllYearWithSpouse" />
          </Not>
          <Equal>
            <Left>
              <Dependency path="/spouseLivedTogetherMonths" />
            </Left>
            <Right>
              <Enum optionsPath="/spouseLivedTogetherMonthsOptions">livedTogetherMoreThanSixMonths</Enum>
            </Right>
          </Equal>
        </All>
      </Derived>
    </Fact>

    <Fact path="/showSpouseLivingApartLastDaySepAgreement">
      <Description>Whether to show the separation agreement screen based on the taxpayer living with their spouse for
        more than six months but not the whole year.</Description>

      <Derived>
        <All>
          <Not>
            <Dependency path="/livedTogetherAllYearWithSpouse" />
          </Not>
          <Any>
            <Dependency path="/livedTogetherMoreThanSixMonths" />
            <Not>
              <Dependency path="/writableLivedApartLastSixMonths" />
            </Not>
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/writableLivedApartLastSixMonths">
      <Description>Whether the taxpayer lived apart from their spouse for the last six months of the
        year.</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/livedApartLastSixMonths">
      <Description>Whether the taxpayer lived apart from their spouse for the last six months of the
        year. Takes into
        account implied answers based on previous information.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Switch>
          <!-- They did not live apart the last six months if they lived together more than six months or all year -->
          <Case>
            <When>
              <Any>
                <Dependency path="/livedTogetherMoreThanSixMonths" />
                <Dependency path="/livedTogetherAllYearWithSpouse" />
              </Any>
            </When>
            <Then>
              <False />
            </Then>
          </Case>
          <!-- They lived apart the last six months if they lived apart all year -->
          <Case>
            <When>
              <Dependency path="/livedApartAllYear" />
            </When>
            <Then>
              <True />
            </Then>
          </Case>
          <!-- They lived apart if they explicitly answered that they lived apart the last six months -->
          <Case>
            <When>
              <Dependency path="/livedTogetherSixMonthsOrLess" />
            </When>
            <Then>
              <Dependency path="/writableLivedApartLastSixMonths" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>


    <Fact path="/livedApartAllYear">
      <Name>Lived apart from spouse the whole year</Name>
      <Description>Whether the taxpayer lived apart from their spouse for the whole year.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Not>
            <Dependency path="/livedTogetherAllYearWithSpouse" />
          </Not>
          <Equal>
            <Left>
              <Dependency path="/spouseLivedTogetherMonths" />
            </Left>
            <Right>
              <Enum optionsPath="/spouseLivedTogetherMonthsOptions">livedApartAllYear</Enum>
            </Right>
          </Equal>
        </All>
      </Derived>
    </Fact>

    <Fact path="/writableSeparationAgreement">
      <Name>Spouse separation agreement last day</Name>
      <Description>Whether the taxpayer was living apart from their spouse and had a separation
        agreement on the last
        day
        of the year.</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/separationAgreement">
      <Name>Spouse separation agreement last day</Name>
      <Description>Whether the taxpayer was living apart from their spouse and had a separation
        agreement on the last
        day
        of the year.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency path="/livedTogetherAllYearWithSpouse" />
            </When>
            <Then>
              <False />
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency path="/writableSeparationAgreement" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/canFileJointlyYearOfSpouseDeath">
      <Name>Qualified to file jointly in year of spouse death</Name>
      <Description>Whether the taxpayer was qualified to file jointly for the year in which their
        spouse died.</Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <!-- Maybe there should be a a marital status module -->


    <Fact path="/maritalStatusOptions">
      <Name>Marital Status Options</Name>
      <Description>Options for a marital status</Description>
      <Derived>
        <EnumOptions>
          <String>single</String>
          <String>married</String>
          <String>divorced</String>
          <String>widowed</String>
        </EnumOptions>
      </Derived>
    </Fact>

    <Fact path="/maritalStatus">
      <Name>Marital status</Name>
      <Description>The marital status the primary filer tells us.</Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Enum optionsPath="/maritalStatusOptions" />
      </Writable>
    </Fact>

    <Fact path="/isMarried">
      <Name>The filer declared they are married</Name>
      <Description>The filer stated they are married</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <Equal>
          <Left>
            <Dependency path="/maritalStatus" />
          </Left>
          <Right>
            <Enum optionsPath="/maritalStatusOptions">married</Enum>
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/isSingle">
      <Name>Single</Name>
      <Description>The filer stated they were never married.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Equal>
          <Left>
            <Dependency path="/maritalStatus" />
          </Left>
          <Right>
            <Enum optionsPath="/maritalStatusOptions">single</Enum>
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/isWidowed">
      <Name>Widowed</Name>
      <Description>The primary filer's marital status is widowed.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Equal>
          <Left>
            <Dependency path="/maritalStatus" />
          </Left>
          <Right>
            <Enum optionsPath="/maritalStatusOptions">widowed</Enum>
          </Right>
        </Equal>
      </Derived>
    </Fact>


    <Fact path="/isWidowedInTaxYear">
      <Name>Is (really Was) Widowed in Tax Year</Name>
      <Description>Was the filer widowed in the current tax year?</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency path="/isWidowed" />
          <Equal>
            <Left>
              <Dependency path="/yearOfSpouseDeath" />
            </Left>
            <Right>
              <Enum optionsPath="/yearOfSpouseDeathOptions">taxYear</Enum>
            </Right>
          </Equal>
        </All>
      </Derived>
    </Fact>

    <Fact path="/widowedBeforeTaxYearMinusTwo">
      <Name>Widowed before tax year minus two</Name>
      <Description>The TP was widowed before TY minus 2</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency path="/isWidowed" />
          <Equal>
            <Left>
              <Dependency path="/yearOfSpouseDeath" />
            </Left>
            <Right>
              <Enum optionsPath="/yearOfSpouseDeathOptions">beforeTaxYearMinusTwo</Enum>
            </Right>
          </Equal>
        </All>
      </Derived>
    </Fact>

    <Fact path="/checkForRegisteredDomesticPartner">
      <Name>Check For Registered Domestic Partner</Name>
      <Description>Whether to show the filer the question to see if they had a registered domestic
        partner. Only show
        the
        question if they chose "never married", "widowed", "divorced or legally separated" and
        if they live in a
        Community Property state (this is overly broad, but avoids us needing to
        produce an exhaustive list of county and
        local registries).</Description>
      <Derived>
        <All>
          <Dependency path="/livesInCommunityPropertyState" />
          <Any>
            <Equal>
              <Left>
                <Dependency path='/maritalStatus' />
              </Left>
              <Right>
                <Enum optionsPath='/maritalStatusOptions'>single</Enum>
              </Right>
            </Equal>
            <Equal>
              <Left>
                <Dependency path='/maritalStatus' />
              </Left>
              <Right>
                <Enum optionsPath='/maritalStatusOptions'>divorced</Enum>
              </Right>
            </Equal>
            <Equal>
              <Left>
                <Dependency path='/maritalStatus' />
              </Left>
              <Right>
                <Enum optionsPath='/maritalStatusOptions'>widowed</Enum>
              </Right>
            </Equal>
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/inRegisteredDomesticPartnership">
      <Name>In Registered Domestic Partnership</Name>
      <Description> Whether the filer was in a registered domestic partnership in the tax year or
        not.</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/hasCompletedRegisteredDomesticPartnerIfApplicable">
      <Name>Has completed registered domestic partner if applicable</Name>
      <Description>Checks whether registered domestic partnership is applicable and if so ensures
        it's complete</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Any>
          <Not>
            <Dependency path="/checkForRegisteredDomesticPartner" />
          </Not>
          <IsComplete>
            <Dependency path="/inRegisteredDomesticPartnership" />
          </IsComplete>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/flowKnockoutHasApplicableRegisteredDomesticPartnership">
      <Name>Flow knockout for registered domestic partnership</Name>
      <Description>Registered domestic partnership is applicable and user has one</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency path="/checkForRegisteredDomesticPartner" />
          <Dependency path="/inRegisteredDomesticPartnership" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/knockoutSubjectToCommunityPropertyLaws">
      <Description>The filer is subject to community property laws if they are only eligible for
        MFS, or they chose MFS,
        or they chose HoH and said their marital status is married and they live in Arizona,
        California, Nevada, Texas,
        or Washinton.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency path="/livesInCommunityPropertyState" />
          <Any>
            <All>
              <Dependency module="filers" path="/isMarried" />
              <Not>
                <Dependency module="filingStatus" path="/eligibleForMFJ" />
              </Not>
              <Not>
                <Dependency module="filingStatus" path="/eligibleForHoh" />
              </Not>
            </All>
            <Dependency module="filingStatus" path="/treatAsMFS" />
            <All>
              <Dependency module="filingStatus" path="/treatAsHoh" />
              <Equal>
                <Left>
                  <Dependency path='/maritalStatus' />
                </Left>
                <Right>
                  <Enum optionsPath='/maritalStatusOptions'>married</Enum>
                </Right>
              </Equal>
            </All>
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/filersCouldntBeDependents">
      <Name>Filers couldn't be dependents</Name>
      <Description>Neither filer could be claimed as a dependent.</Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency module="filingStatus" path="/treatAsMFJ" />
            </When>
            <Then>
              <Not>
                <Dependency path="/isMFJDependent" />
              </Not>
            </Then>
          </Case>
          <!-- The TP is any other filing status, we care only about their dependency -->
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Not>
                <Dependency path="/primaryFiler/canBeClaimed" />
              </Not>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/yearOfSpouseDeathOptions">
      <Name>Year of Spouse Death Options</Name>
      <Description>The year that a taxpayer's spouse died</Description>
      <Derived>
        <EnumOptions>
          <String>taxYear</String>
          <String>taxYearMinusOne</String>
          <String>taxYearMinusTwo</String>
          <String>beforeTaxYearMinusTwo</String>
        </EnumOptions>
      </Derived>
    </Fact>


    <Fact path="/yearOfSpouseDeath">
      <Name>Year of spouse's death</Name>
      <Description>The relative year a widowed filer's spouse died.</Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Enum optionsPath="/yearOfSpouseDeathOptions" />
      </Writable>
    </Fact>

    <Fact path="/flowKnockoutUnsupportedState">
      <Name>Either filer not in a supported state</Name>
      <Description>Used to control a flow knockout state</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Any>
          <Not>
            <Dependency path="/hasIncomeInScope" />
          </Not>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/address">
      <Name>Address</Name>
      <Description>The mailing address of the taxpayer(s).</Description>
      <Export downstreamFacts="true" mef="true" />

      <Writable>
        <Address />
      </Writable>
    </Fact>

    <Fact path="/streetAddressAs1Line">
      <Description>
        The combination of street address lines 1 and 2
      </Description>
      <Export mef="true" />

      <Derived>
        <Paste>
          <Dependency path="/address/streetAddress" />
          <Dependency path="/address/streetAddressLine2" />
        </Paste>
      </Derived>
    </Fact>


    <Fact path="/mefAddressZip">
      <Name>Mailing address zip in MeF Format</Name>
      <Description>The mailing address zip of the taxpayer(s), with hyphens and spaces stripped for
        MeF compliance</Description>
      <Export mef="true" />
      <Derived>
        <Trim>
          <StripChars>
            <Input>
              <Dependency path="/address/postalCode" />
            </Input>
            <Allow>
              <Dependency module="mefTypes" path="/mefZipCodeType" />
            </Allow>
          </StripChars>
        </Trim>
      </Derived>
    </Fact>

    <Fact path="/usStateName">
      <Name>US State Name</Name>
      <Description>The state inside the US if the address isn't foreign</Description>
      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency path="/address/foreignAddress" />
            </When>
            <Then>
              <String />
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency path="/address/stateOrProvence" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/foreignStateName">
      <Name>Foreign State Name</Name>
      <Description>The state/provence outside the US</Description>
      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency path="/address/foreignAddress" />
            </When>
            <Then>
              <Dependency path="/address/stateOrProvence" />
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <String />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/foreignCountryName">
      <Name>Foreign Country Name</Name>
      <Description>The country outside the US</Description>
      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency path="/address/foreignAddress" />
            </When>
            <Then>
              <Dependency path="/address/country" />
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <String />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/usPostalCode">
      <Name>US Postal Code</Name>
      <Description>The postal code if the address is in the US</Description>
      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency path="/address/foreignAddress" />
            </When>
            <Then>
              <String />
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency path="/address/postalCode" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/foreignPostalCode">
      <Name>Foreign Postal Code</Name>
      <Description>The postal code when the address is not in the US</Description>
      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency path="/address/foreignAddress" />
            </When>
            <Then>
              <Dependency path="/address/postalCode" />
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <String />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/phone">
      <Name>Phone</Name>
      <Description>The phone number of the taxpayer(s).</Description>
      <Export mef="true" downstreamFacts="true" />

      <Writable>
        <PhoneNumber />
      </Writable>
    </Fact>

    <Fact path="/email">
      <Name>Email address</Name>
      <Description>The email address of the taxpayer(s).</Description>

      <Writable>
        <EmailAddress />
      </Writable>
    </Fact>

    <Fact path="/emailString">
      <Description>
        The string version of the email
      </Description>

      <Derived>
        <AsString>
          <Dependency path="/email" />
        </AsString>
      </Derived>
    </Fact>

    <Fact path="/mefEmail">
      <Description>
        The email address of the taxpayer(s) sent to MeF.
        If the address is over 75 characters, we do not send
        an email.
        This is allowed by MeF Business rules, and they will not accept emails
        over 75 characters in length
      </Description>
      <Export mef="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <GreaterThan>
                <Left>
                  <Length>
                    <Dependency path="/emailString" />
                  </Length>
                </Left>
                <Right>
                  <Int>75</Int>
                </Right>
              </GreaterThan>
            </When>
            <Then>
              <String />
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency path="/emailString" />
            </Then>
          </Case>
        </Switch>
      </Derived>

    </Fact>

    <Fact path="/filerCouldQualifyForHoh">
      <Name>Whether, prior to asking about dependents, the TP might be eligible for HoH</Name>
      <Description> Whether, prior to asking about dependents, the TP might qualify as HoH. Used to
        decide whether to
        ask
        the questions about whether a person could be a dependent. A TP is eligible for be HoH
        as long as they are
        not
        eligible to file MFJ. If they are married, they need to have lived apart for the last
        six months or the
        spouse
        must have been a noncitizen who was not a resident for the fully TY.
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Any>
          <Not>
            <!-- If they meet the noncitizen nonresident exception, they won't be eligible for MFJ,
            which will make them
            eligible for HoH -->
            <Dependency module="filingStatus" path="/eligibleForMFJ" />
          </Not>
          <All>
            <Dependency module="filingStatus" path="/eligibleForMFJ" />
            <Dependency path="/livedApartLastSixMonths" />
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/widowedCouldQualifyForQSS">
      <Export downstreamFacts="true" />
      <Derived>
        <All>
          <Dependency path="/isWidowed" />
          <Any>
            <Equal>
              <Left>
                <Dependency path="/yearOfSpouseDeath" />
              </Left>
              <Right>
                <Enum optionsPath="/yearOfSpouseDeathOptions">taxYearMinusOne</Enum>
              </Right>
            </Equal>
            <Equal>
              <Left>
                <Dependency path="/yearOfSpouseDeath" />
              </Left>
              <Right>
                <Enum optionsPath="/yearOfSpouseDeathOptions">taxYearMinusTwo</Enum>
              </Right>
            </Equal>
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/filerCouldQualifyForQss">
      <Description>Based on filer information, the filer may qualify for QSS</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency path="/widowedCouldQualifyForQSS" />
          <Dependency path="/canFileJointlyYearOfSpouseDeath" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/filersCouldQualifyForEitc">
      <Description>
        Based on filer + spouse information, the filer may qualify for EITC
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Not>
            <!-- We ban an MFJ dependent here, as they have opted not to take credits. A single
            person who is a
            dependent may still be eligible for EITC with qualifying children, so they are not banned from
            EITC.  -->
            <Dependency path="/isMFJDependent" />
          </Not>
          <Dependency path="/filersUSCitizenOrRAAllYear" />
          <Dependency path="/filersHaveValidSSNsForEitc" />
          <Switch>
            <Case>
              <!-- If the TP is MFS, they must have lived apart or have a separation agreement. -->
              <When>
                <All>
                  <IsComplete>
                    <Dependency module="filingStatus" path="/treatAsMFS" />
                  </IsComplete>
                  <Dependency module="filingStatus" path="/treatAsMFS" />
                </All>
              </When>
              <Then>
                <Dependency path="/specialRuleForSeparatedSpouses" />
              </Then>
            </Case>
            <Case>
              <When>
                <True />
              </When>
              <Then>
                <True />
              </Then>
            </Case>
          </Switch>
        </All>
      </Derived>
    </Fact>

    <Fact path="/filersCouldQualifyForCdcc">
      <Description>
        Based on filer + spouse information only, the filer could qualify to receive CDCC Credit for any
        qualifying people.
        If MFJ, they could all
        qualify, but
        if MFS, they can't unless they are considered unmarried.
        At
        this point we cannot determine
        mfsConsideredUnmarried completely as we don't know information per qualifying
        person.
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency module="filingStatus" path="/treatAsMFS" />
            </When>
            <Then>
              <Dependency path="/mfsFilerCouldBeConsiderUnmarriedForCdcc" />
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <True />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>


    <Fact path="/mfsFilerCouldBeConsiderUnmarriedForCdcc">
      <Description>
        Based on filer + spouse only - whether the MFS primary filer could be considered unmarried for
        purposes
        of claiming the credit on Form 2441. This does not include the per-qualifying-person requirements.
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <!--
              """
              Generally, married persons must file a joint return to claim the credit. If your filing status is married filing
          separately and all of the following apply, you are considered unmarried for purposes of claiming the credit
          on Form 2441.
              * You lived apart from your spouse during the last 6 months of 2023.
              """

              Additional qualifying criteria is dependent on the qualifying persons
              -->
          <IsComplete>
            <Dependency module="filingStatus" path="/treatAsMFS" />
          </IsComplete>
          <Dependency module="filingStatus" path="/treatAsMFS" />
          <Dependency path="/livedApartLastSixMonths" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/filersHaveValidSSNsForEitc">
      <Description>Whether the TP(s) have a valid SSN for EITC</Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency module="filingStatus" path="/treatAsMFJ" />
            </When>
            <Then>
              <All>
                <Dependency path="/primaryFiler/ssnValidForEitc" />
                <Dependency path="/secondaryFiler/ssnValidForEitc" />
              </All>
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency path="/primaryFiler/ssnValidForEitc" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/filersUSCitizenOrRAAllYear">
      <Name>Filer(s) are US citizen or RA all year</Name>
      <Description>Whether the TP(s) are U.S. citizens or resident aliens all year</Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency module="filingStatus" path="/treatAsMFJ" />
            </When>
            <Then>
              <!-- TODO: When we support nonresident aliens we'll need to add the exception here for
              them -->
              <All>
                <Dependency path="/primaryFilerIsCitizenOrRAAllYear" />
                <Dependency path="/secondaryFilerIsCitizenOrRAAllYear" />
              </All>
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency path="/primaryFilerIsCitizenOrRAAllYear" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>


    <Fact path="/primaryFilerIsCitizenOrRAAllYear">
      <Name>Primary filer is citizen or RA all year</Name>
      <Description>Whether the primary filer is a U.S. citizen or resident alien the entire year</Description>

      <Derived>
        <Any>
          <Dependency path="/primaryFiler/isNoncitizenResidentFullYear" />
          <Dependency path="/primaryFiler/isUsCitizenFullYear" />
          <Dependency path="/primaryFiler/citizenAtEndOfTaxYear" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/secondaryFilerIsCitizenOrRAAllYear">
      <Name>Secondary filer is citizen or RA all year</Name>
      <Description>Whether the secondary filer is a U.S. citizen or resident alien the entire year</Description>

      <Derived>
        <Any>
          <Dependency path="/secondaryFiler/isNoncitizenResidentFullYear" />
          <Dependency path="/secondaryFiler/isUsCitizenFullYear" />
          <Dependency path="/secondaryFiler/citizenAtEndOfTaxYear" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/eitherFilerUSCitizenOrNational">
      <Name>Either filer is a US citizen or US national</Name>
      <Description>Whether at least one of the TPs is a U.S. citizen or U.S. national</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency module="filingStatus" path="/treatAsMFJ" />
            </When>
            <Then>
              <Any>
                <Dependency path="/primaryFilerIsCitizenOrNational" />
                <Dependency path="/secondaryFilerIsCitizenOrNational" />
              </Any>
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency path="/primaryFilerIsCitizenOrNational" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/allEligibleFilersAreUSCitizensOrNationals">
      <Description>Both filers (when applicable) are U.S. citizens or U.S. nationals</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency module="filingStatus" path="/treatAsMFJ" />
            </When>
            <Then>
              <All>
                <Dependency path="/primaryFilerIsCitizenOrNational" />
                <Dependency path="/secondaryFilerIsCitizenOrNational" />
              </All>
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency path="/primaryFilerIsCitizenOrNational" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/primaryFilerIsCitizenOrNational">
      <Name>Primary filer is a U.S. citizen or U.S. national</Name>
      <Description>Whether the primary filer is a U.S. citizen or U.S. national</Description>

      <Derived>
        <Any>
          <Dependency path="/primaryFiler/isUsCitizenFullYear" />
          <Dependency path="/primaryFiler/citizenAtEndOfTaxYear" />
          <Dependency path="/primaryFiler/isNational" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/secondaryFilerIsCitizenOrNational">
      <Name>Secondary filer is a U.S. citizen or U.S. national</Name>
      <Description>Whether the secondary filer is a U.S. citizen or U.S. national</Description>

      <Derived>
        <Any>
          <Dependency path="/secondaryFiler/isUsCitizenFullYear" />
          <Dependency path="/secondaryFiler/citizenAtEndOfTaxYear" />
          <Dependency path="/secondaryFiler/isNational" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/specialRuleForSeparatedSpouses">
      <Name>Special rule for separated spouses</Name>
      <Description>Checks whether the spouse lived apart the last 6 months or are legally separated</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Any>
          <Dependency path="/livedApartLastSixMonths" />
          <Dependency path="/separationAgreement" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/filersCouldHaveDependentOrQualifyingPerson">
      <Description> The filer(s) are eligible to enter people. This means that they are still
        potentially eligible to
        claim deductions, credits, or HoH/QSS filing status.
      </Description>
      <Derived>
        <Any>
          <Not>
            <Dependency path="/treatFilersAsDependents" />
          </Not>
          <All>
            <Not>
              <Dependency module="filingStatus" path="/treatAsMFJ" />
            </Not>
            <!-- Even if the person could qualify for HoH, we don't show it to them if they've
            chosen to be MFJ -->
            <Dependency path="/filerCouldQualifyForHoh" />
          </All>
          <Dependency path="/filerCouldQualifyForQss" />
          <Dependency path="/filersCouldQualifyForEitc" />
          <Dependency path="/filersCouldQualifyForCdcc" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/isSecondaryFilerNra">
      <Name>Is the secondary filer a non-resident alien</Name>
      <Description>Whether the secondaryFiler is considered a non-resident alien.</Description>

      <Derived>
        <Not>
          <Dependency path="/secondaryFilerIsCitizenOrRAAllYear" />
        </Not>
      </Derived>
    </Fact>

    <Fact path="/xmlNraLiteralCd">
      <Name>NRA literal code</Name>
      <Description>The code used to populate the IRS 1040 NRALiteralCd (nonresident alien) XML
        element when required</Description>
      <Export mef="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <All>
                <Dependency module="filingStatus" path="/isFilingStatusMFS" />
                <Dependency path="/isSecondaryFilerNra" />
              </All>
            </When>
            <Then>
              <String>NRA</String>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/xmlSpouseName">
      <Name>The spouse's name</Name>
      <Description>The spouse's name used to populate the SpouseNm 1040 XML element.</Description>
      <Export mef="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <All>
                <Not>
                  <Dependency path="/isSecondaryFilerNra" />
                </Not>
                <Dependency module="filingStatus" path="/isFilingStatusMFS" />
              </All>
            </When>
            <Then>
              <Dependency path="/secondaryFiler/mefFullName" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/conditionalSpouseName">
      <Name>Conditional spouse name</Name>
      <Description>A spouse name that will be blank if the filer is not married. Helpful because we
        don't clear
        /secondaryFiler/fullName if the filer changes their marital status</Description>
      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency path="/isMarried" />
            </When>
            <Then>
              <Dependency path="/secondaryFiler/fullName" />
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <String />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/xmlOver65SRIndicator">
      <Name>1040SR Indicator</Name>
      <Description>Whether these filer(s) should be filing on a 1040SR</Description>
      <Export mef="true" />

      <Derived>
        <Any>
          <Dependency path="/primaryFiler/age65OrOlder" />
          <All>
            <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
            <Dependency path="/secondaryFiler/age65OrOlder" />
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/pdfNotOver65SRIndicator">
      <Name>Negate 1040SR Indicator</Name>
      <Description>Whether these filer(s) should be filing on a regular 1040</Description>

      <Derived>
        <Any>
          <Not>
            <IsComplete>
              <Dependency path="/xmlOver65SRIndicator" />
            </IsComplete>
          </Not>
          <Not>
            <Dependency path="/xmlOver65SRIndicator" />
          </Not>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/secondaryFilerIsBlindIndicatorXml">
      <Export mef="true" />
      <Derived>
        <All>
          <Dependency module="standardDeduction" path="/isSpouseInfoApplicableForStandardDeductions" />
          <Dependency path="/secondaryFiler/isBlind" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/mfsButEligibleForCdcc">
      <Name>Primary filer is MFS and is considered unmarried for the purposes of claiming CDCC credit</Name>
      <Description>
        The TP is considered unmarried for the purposes of claiming CDCC credit. At this point we should be
        able to fully determine whether they are eligible for the credit. Used to set `EligibilityRequirementMetInd`
        in
        MeF.
        Form 2441, Line A
      </Description>
      <Export downstreamFacts="true" mef="true" />

      <Derived>
        <All>
          <Dependency module="filingStatus" path="/isFilingStatusMFS" />
          <Dependency path="/livedApartLastSixMonths" />
          <GreaterThan>
            <Left>
              <Dependency module="familyAndHousehold" path="/cdccQualifyingNonFilersCount" />
            </Left>
            <Right>
              <Int>0</Int>
            </Right>
          </GreaterThan>
          <Dependency module="cdcc" path="/cdccQualifyingDependentsPassResidencyTest" />
          <Dependency module="cdcc" path="/cdccQualifyingDependentsPassTpPaidMostOfHomeUpkeep" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/mfsNotEligibleForCdcc">
      <Name>Primary filer is MFS and is considered married</Name>
      <Description>If the filer meets some requirements, they are considered unmarried for the purposes of claiming CDCC
        credit. This filer did not meet those requirements and will be considered married. Used for determining Child
        and
        Dependent Care
        Credit.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency module="filingStatus" path="/isFilingStatusMFS" />
          <Not>
            <Dependency path="/mfsButEligibleForCdcc" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/filers/*/isUnder18">
      <Description>Whether the filer is under 18 for purposes of the Saver's Credit</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <LessThan>
          <Left>
            <Dependency path="../ageCalculatedDayBeforeDOB" />
          </Left>
          <Right>
            <Int>18</Int>
          </Right>
        </LessThan>
      </Derived>
    </Fact>

    <Fact path="/filers/*/isEligibleForSaversCredit">
      <Description>Whether the filer is eligible for the saver's credit based on filer info</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <All>
          <Not>
            <Dependency path="../isUnder18" />
          </Not>
          <Any>
            <All>
              <Dependency path="../isPrimaryFiler" />
              <Not>
                <Dependency path="/primaryFilerIsClaimedAsDependent" />
              </Not>
            </All>
            <All>
              <Dependency path="../isSecondaryFiler" />
              <Not>
                <Dependency path="/secondaryFilerIsClaimedAsDependent" />
              </Not>
            </All>
          </Any>
          <Not>
            <Dependency path="../isStudent" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/filers/*/isPrimaryFilerOrMfjAndEither">
      <Description>Whether the filer is the primary filer or MFJ and either primary or secondary.</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <Any>
          <All>
            <Dependency path="../isSecondaryFiler" />
            <Dependency module="filingStatus" path="/isFilingStatusMFJ" />
          </All>
          <Dependency path="../isPrimaryFiler" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/filers/*/cdccQualifyingPerson">
      <Description>
        This filer qualifies the taxpayer for CDCC
      </Description>

      <!--
        """
        A qualifying person is any of the following.

        2. Your disabled spouse who:
            a) wasn't physically or mentally able to care for themselves
            b) lived with you for more than half the year.
        """

        Feedback from SMEs is that the same requirements apply to primary filers
      -->

      <Derived>
        <All>
          <IsComplete>
            <!-- This ensures that /cdccQualifyingFilers will never be incomplete -->
            <Dependency path="../isDisabled" />
          </IsComplete>
          <Dependency path="../isDisabled" />
          <Dependency module="filingStatus" path="/treatAsMFJ" />
          <Any>
            <Dependency path="/livedTogetherAllYearWithSpouse" />
            <Equal>
              <Left>
                <Dependency path="/spouseLivedTogetherMonths" />
              </Left>
              <Right>
                <Enum optionsPath="/spouseLivedTogetherMonthsOptions">livedTogetherMoreThanSixMonths</Enum>
              </Right>
            </Equal>
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/cdccQualifyingFilers">
      <Description>Filers who qualify the taxpayer for CDCC</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Filter path="/filers">
          <Dependency path="cdccQualifyingPerson" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/cdccQualifyingFilersCount">
      <Description>
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <CollectionSize>
          <Dependency path="/cdccQualifyingFilers" />
        </CollectionSize>
      </Derived>
    </Fact>

    <Fact path="/filers/*/cdccExpensesCollected">
      <Description>
        We have collected expenses for CDCC if required. Used to test completion of the CDCC QP loop.
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Any>
          <Not>
            <!-- Nothing to collect if they have no expenses overall -->
            <Dependency module="cdcc" path="/cdccMaybeHasQualifyingExpenses" />
          </Not>
	  <!-- Nothing to collect if they said the qp didn't have qualified care expenses -->
          <Not>
            <Dependency path="../cdccHasDependentCareExpenses" />
          </Not>
          <!-- Nothing to collect if they said the qp didn't have expenses paid to a qualified care provider -->
          <All>
            <Dependency path="../cdccHasDependentCareExpenses" />
            <Not>
              <Dependency path="../cdccHadExpensesPaidToQualifyingProvider" />
            </Not>
          </All>
          <!-- Or if we were collecting, let's make sure it's a complete amount-->
          <IsComplete>
            <Dependency path="../cdccQualifyingExpenseAmount" />
          </IsComplete>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/filers/*/cdccQualifyingExpenseAmount">
      <Name>Qualifying Expense Amount for CDCC</Name>
      <Description>
        Amount of qualifying expenses paid for this qualifying person.
        Only applies if the person is a CDCC QP
        and a filer
      </Description>
      <Export downstreamFacts="true" mef="true" />
      <ExportZero />

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency path="../cdccHasQualifyingExpenses" />
            </When>
            <Then>
              <Round>
                <Dependency path="../writableCdccQualifyingExpenseAmount" />
              </Round>
            </Then>
          </Case>
          <Case>
            <When>
              <Not>
                <Dependency path="../cdccHasQualifyingExpenses" />
              </Not>
            </When>
            <Then>
              <Dollar>0</Dollar>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/filers/*/writableCdccQualifyingExpenseAmount">
      <Name>Qualifying Expense Amount for CDCC</Name>
      <Description>
        Amount of qualifying expenses paid for this qualifying person.
        Only applies if the person is a CDCC QP
        and a filer
      </Description>

      <Writable>
        <Dollar />
      </Writable>
    </Fact>

    <Fact path="/filers/*/cdccHasDependentCareExpenses">
      <Description>
        Whether the QP has qualifying dependent care expenses
      </Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/filers/*/cdccHadExpensesPaidToQualifyingProvider">
      <Description>
        Whether the QP's expenses were paid to a qualified provider
      </Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/filers/*/cdccHasQualifyingExpenses">
      <Description>
        Whether this filer who was a qp for cdcc had expenses that were qualifying and paid to a qualified
        provider
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency path="../cdccHasDependentCareExpenses" />
          <Dependency path="../cdccHadExpensesPaidToQualifyingProvider" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/has1095AInIRDAS">
      <Name>Filer has 1095-A in IRDAS</Name>
      <Description>
        Whether the filer has at least one Form 1095-A in IRDAS
      </Description>
      <Export downstreamFacts="false" />
      <Writable>
        <Boolean />
      </Writable>
    </Fact>

  </Facts>
</FactDictionaryModule>
