<?xml-model href="./FactDictionaryModule.rng"?>
<FactDictionaryModule>
  <Facts>

    <Fact path="/monthsLivedWithTPInUSOptions">
      <Description>Months lived with TP in US Options</Description>
      <Derived>
        <EnumOptions>
          <String>twelve</String>
          <String>eleven</String>
          <String>ten</String>
          <String>nine</String>
          <String>eight</String>
          <String>seven</String>
          <String>six</String>
        </EnumOptions>
      </Derived>
    </Fact>

    <Fact path="/familyAndHouseholdSsnEmploymentValidityOptions">
      <Name>SSN Employment Validity Options</Name>
      <Description>Options for SSN Employment validity</Description>
      <Derived>
        <EnumOptions>
          <String>neither</String>
          <String>notValid</String>
          <String>validOnlyWithDhsAuthorizationInEffect</String>
          <String>validOnlyWithDhsAuthorizationExpired</String>
        </EnumOptions>
      </Derived>
    </Fact>


    <Fact path="/residencyDurationOptions">
      <Name>Residency duration Options</Name>
      <Description>Options for residency duration</Description>
      <Derived>
        <EnumOptions>
          <String>allYear</String>
          <String>sixToElevenMonths</String>
          <String>lessThanSixMonths</String>
        </EnumOptions>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold">
      <Name>Family and Household</Name>
      <Description>The people entered in the family and household section who may qualify as QPs or dependents</Description>

      <Writable>
        <Collection />
      </Writable>
    </Fact>

    <Fact path="/familyAndHouseholdIsDone">
      <Name>Dependents is Done</Name>
      <Description>The user has clicked "Done" for the family and HH section</Description>
      <Export downstreamFacts="true" />
      <Writable>
        <Boolean />
      </Writable>
      <Placeholder>
        <False />
      </Placeholder>
    </Fact>

    <Fact path="/hasIncompleteDependents">
      <Name>Has incomplete dependents</Name>
      <Description>One or more of the dependents entered is incomplete</Description>
      <BlockSubmissionOnTrue />

      <Derived>
        <GreaterThan>
          <Left>
            <Count>
              <Dependency path="/familyAndHousehold/*/isIncomplete" />
            </Count>
          </Left>
          <Right>
            <Int>0</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>

    <!-- This is a hack; CollectionItem references are not currently deleted when their referenced collection item is
    deleted, so we can use a combination of Find and IsComplete to detect stale collection item references using this
    fact -->
    <Fact path="/familyAndHousehold/*/existentialFact">
      <Name>First name</Name>
      <Description>Do I exist? Used to detect stale collection references.</Description>
      <Derived>
        <True />
      </Derived>
    </Fact>


    <Fact path="/familyAndHousehold/*/firstName">
      <Name>First name</Name>
      <Description>The first name of the dependent. Must match the name as known to the Social Security Administration.</Description>
      <Export mef="true" stateSystems="true" />

      <Writable>
        <String />
        <Limit type="Match">
          <String><![CDATA[[\sA-Za-z\-]+]]></String>
        </Limit>
        <Limit type="MaxLength">
          <Int>20</Int>
        </Limit>
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/writableMiddleInitial">
      <Name>Middle initial</Name>
      <Description>The middle initial of the dependent. Must match the name as known to the Social Security
        Administration. This is the optional writable fact. Please use derived fact in downstream calculations.</Description>
      <Writable>
        <String />
        <Limit type="Match">
          <String><![CDATA[[\sA-Za-z\-]+]]></String>
        </Limit>
        <Limit type="MaxLength">
          <Int>1</Int>
        </Limit>
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/middleInitial">
      <Name>Middle Initial</Name>
      <Description>The middle initial of the dependent. Must match the name as known to the Social Security
        Administration.</Description>
      <Export stateSystems="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <IsComplete>
                <Dependency path="../writableMiddleInitial" />
              </IsComplete>
            </When>
            <Then>
              <Dependency path="../writableMiddleInitial" />
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <String />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/lastName">
      <Name>Last name</Name>
      <Description>The last name of the dependent. Must match the name as known to the Social Security Administration.</Description>
      <Export mef="true" stateSystems="true" />

      <Writable>
        <String />
        <Limit type="Match">
          <String><![CDATA[[\sA-Za-z\-]+]]></String>
        </Limit>
        <Limit type="MaxLength">
          <Int>20</Int>
        </Limit>
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/lastNameAndSuffix">
      <Description>The last name and suffix of the dependent</Description>
      <Export mef="true" />
      <Derived>
        <Paste>
          <Dependency path="../lastName" />
          <Dependency path="../suffixString" />
        </Paste>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/writableSuffix">
      <Description>The suffix of the dependent.</Description>

      <Writable>
        <Enum optionsPath="/suffixOptions" />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/suffixString">
      <Name>Suffix string</Name>
      <Description>The suffix of the dependent as a string for concatenation.</Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <IsComplete>
                <Dependency path="../writableSuffix" />
              </IsComplete>
            </When>
            <Then>
              <AsString>
                <Dependency path="../writableSuffix" />
              </AsString>
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <String />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>


    <Fact path="/familyAndHousehold/*/suffix">
      <Description>
        The suffix of the dependent. Exported for mef
      </Description>
      <Export mef="true" stateSystems="true" />

      <Derived>
        <Dependency path="../writableSuffix" />
      </Derived>
    </Fact>


    <Fact path="/familyAndHousehold/*/hasIpPin">
      <Name>Dependent Has IP PIN</Name>
      <Description>Whether the dependent has an IP Pin</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/flowIpPinReady">
      <Name>Dependent IP Pin Ready</Name>
      <Description>Whether the TP is ready to input the IP PIN</Description>
      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/identityPin">
      <Name>Dependent IP Pin</Name>
      <Description>The Identity PIN of the Dependent</Description>
      <Export mef="true" />

      <Writable>
        <IPPIN />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/fullName">
      <Name>Dependent's full name</Name>
      <Description>
        The full name of the dependent, used for the frontend
      </Description>

      <Derived>
        <Paste>
          <Dependency path="../firstName" />
          <Dependency path="../middleInitial" />
          <Dependency path="../lastName" />
          <Dependency path="../suffixString" />
        </Paste>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/mefFullName">
      <Name>Dependent's full name</Name>
      <Description>The full name of the dependent</Description>
      <Export downstreamFacts="true" mef="true" />

      <Derived>
        <TruncateNameForMeF>
          <FirstName>
            <Dependency path="../firstName" />
          </FirstName>
          <MiddleInitial>
            <Dependency path="../middleInitial" />
          </MiddleInitial>
          <LastName>
            <Dependency path="../lastName" />
          </LastName>
          <Suffix>
            <Dependency path="../suffixString" />
          </Suffix>
        </TruncateNameForMeF>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/tinType">
      <Name>TIN type</Name>
      <Description>The type of the dependent's TIN.</Description>

      <Writable>
        <Enum optionsPath="/tinTypeOptions" />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/tinTypeShort">
      <Name>TIN type long</Name>
      <Description>Alias for a dependent's TIN as a separate fact to specifically display the shortened (acronym) text.</Description>
      <Derived>
        <Dependency path="../tinType" />
      </Derived>
    </Fact>


    <Fact path="/familyAndHousehold/*/tinTypeLong">
      <Name>TIN type long</Name>
      <Description>The type of the dependent's TIN as a separate fact to display the full text.</Description>
      <Derived>
        <Switch>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Dependency path="../tinType" />
                </Left>
                <Right>
                  <Enum optionsPath="/tinTypeOptions">ssn</Enum>
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/tinTypeOptionsLong">ssn</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Dependency path="../tinType" />
                </Left>
                <Right>
                  <Enum optionsPath="/tinTypeOptions">itin</Enum>
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/tinTypeOptionsLong">itin</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Dependency path="../tinType" />
                </Left>
                <Right>
                  <Enum optionsPath="/tinTypeOptions">atin</Enum>
                </Right>
              </Equal>
            </When>
            <Then>
              <Enum optionsPath="/tinTypeOptionsLong">atin</Enum>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/hasTinTypeOfNone">
      <Name>TIN type is none</Name>
      <Description>Whether the type of the dependent's TIN is none.</Description>

      <Derived>
        <Equal>
          <Left>
            <Dependency path="../tinType" />
          </Left>
          <Right>
            <Enum optionsPath="/tinTypeOptions">none</Enum>
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/tin">
      <Name>TIN</Name>
      <Description> The taxpayer identification number of the family or household member. Collected only if the TP is
        claiming the
        dependent or claiming them as a qualifying person for a credit. Do *not* ever use `/tin/isSSN` the
        way we might for filers, because we haven't necessarily collected
        the tin at the times we need that test.
        Instead, check the tinType.
      </Description>
      <Export mef="true" stateSystems="true" />

      <Writable>
        <TIN />
      </Writable>
    </Fact>


    <Fact path="/familyAndHousehold/*/hasTin">
      <Name>Dependent has TIN</Name>
      <Description>Dependent has provided a TIN</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <IsComplete>
          <Dependency path="../tin" />
        </IsComplete>
      </Derived>
    </Fact>

    <Fact path="/familyAndHouseholdWithTins">
      <Name>Dependents with TINs</Name>
      <Description>All dependents who have provided TINs</Description>
      <Derived>
        <Filter path="/familyAndHousehold">
          <Dependency path="hasTin" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isTinUnique">
      <Name>Dependent TIN is unique</Name>
      <Description>Is this dependent's TIN unique among dependents and filers?</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <All>
          <Equal>
            <Left>
              <Count>
                <Equal>
                  <Left>
                    <Dependency path="../tin" />
                  </Left>
                  <Right>
                    <Dependency path="/familyAndHouseholdWithTins/*/tin" />
                  </Right>
                </Equal>
              </Count>
            </Left>
            <Right>
              <Int>1</Int>
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Count>
                <Equal>
                  <Left>
                    <Dependency path="../tin" />
                  </Left>
                  <Right>
                    <Dependency module="filers" path="/filersWithTins/*/tin" />
                  </Right>
                </Equal>
              </Count>
            </Left>
            <Right>
              <Int>0</Int>
            </Right>
          </Equal>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/hasInvalidSSN">
      <Name>Dependent's SSN is invalid</Name>
      <Description>Checks whether dependent is declared to have an SSN, but the TIN is not a valid SSN</Description>

      <Derived>
        <All>
          <Dependency path="../hasTin" />
          <Equal>
            <Left>
              <Dependency path="../tinType" />
            </Left>
            <Right>
              <Enum optionsPath="/tinTypeOptions">ssn</Enum>
            </Right>
          </Equal>
          <Not>
            <Dependency path="../tin/isSSN" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/hasInvalidITIN">
      <Name>Dependent's ITIN is invalid</Name>
      <Description>Checks whether dependent is declared to have an ITIN, but the TIN is not a valid ITIN</Description>

      <Derived>
        <All>
          <Dependency path="../hasTin" />
          <Equal>
            <Left>
              <Dependency path="../tinType" />
            </Left>
            <Right>
              <Enum optionsPath="/tinTypeOptions">itin</Enum>
            </Right>
          </Equal>
          <Not>
            <Dependency path="../tin/isITIN" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/hasInvalidATIN">
      <Name>Dependent's ATIN is invalid</Name>
      <Description>Checks whether dependent is declared to have an ATIN, but the TIN is not a valid ATIN</Description>

      <Derived>
        <All>
          <Dependency path="../hasTin" />
          <Equal>
            <Left>
              <Dependency path="../tinType" />
            </Left>
            <Right>
              <Enum optionsPath="/tinTypeOptions">atin</Enum>
            </Right>
          </Equal>
          <Not>
            <Dependency path="../tin/isATIN" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHouseholdHasInvalidTIN">
      <Name>At least one dependent has an invalid TIN</Name>
      <Description>Whether at least one dependent's TIN does not match the format for the type of TIN they were declared
        to have</Description>
      <BlockSubmissionOnTrue />

      <Derived>
        <GreaterThan>
          <Left>
            <Count>
              <Any>
                <Dependency path="/familyAndHousehold/*/hasInvalidSSN" />
                <Dependency path="/familyAndHousehold/*/hasInvalidITIN" />
                <Dependency path="/familyAndHousehold/*/hasInvalidATIN" />
              </Any>
            </Count>
          </Left>
          <Right>
            <Int>0</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/dateOfBirth">
      <Name>Date of birth</Name>
      <Description>The date of birth of the dependent.</Description>
      <Export stateSystems="true" />

      <Writable>
        <Day />
        <Limit type="Max">
          <Day>2025-01-01</Day>
        </Limit>
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/yearOfBirth">
      <Name>Year of birth</Name>
      <Description>The year of the dependent's birth</Description>
      <Export mef="true" />

      <Derived>
        <Dependency path="../dateOfBirth/year" />
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/yearOfBirthSameAsTaxYear">
      <Description>The year of the dependent's birth is the same as the tax year</Description>
      <Derived>
        <Equal>
          <Left>
            <Dependency module="constants" path="/taxYear" />
          </Left>
          <Right>
            <Dependency path="../dateOfBirth/year" />
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/birthDateIfBornInTaxYear">
      <Description>Date dependent was born if born in the tax year</Description>
      <Export mef="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency path="../yearOfBirthSameAsTaxYear" />
            </When>
            <Then>
              <Dependency path="../dateOfBirth" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/deceased">
      <Name>Deceased</Name>
      <Description>Whether the dependent died during the tax year</Description>
      <Export mef="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/deathDateIfDiedInTaxYear">
      <Description>Date dependent died if died in the tax year</Description>
      <Export mef="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency path="../deceased" />
            </When>
            <Then>
              <Dependency path="../dateOfDeath" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/mefDeceasedCode">
      <Name>Deceased Code</Name>
      <Description>The MeF code to be set when the dependent is both deceased and does not have a TIN.</Description>
      <Export mef="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <All>
                <Dependency path="../deceased" />
                <Dependency path="../hasTinTypeOfNone" />
              </All>
            </When>
            <Then>
              <String>DIED</String>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/bornAndDiedInTaxYearWithoutTin">
      <Description>
        The person was born and died in the tax year, and never received a TIN. This person is not supported
        by direct file.

        In future years, we will have to submit binary attachments along with this person and set the
        DiedLiteralCd in MeF
      </Description>

      <Derived>
        <All>
          <!-- The person was born in the tax year-->
          <Equal>
            <Left>
              <Dependency module="constants" path="/taxYear" />
            </Left>
            <Right>
              <Dependency path="../dateOfBirth/year" />
            </Right>
          </Equal>
          <!-- The person died in the tax year -->
          <Dependency path="../deceased" />
          <!-- The person does not a have a TIN -->
          <Dependency path="../hasTinTypeOfNone" />
        </All>
      </Derived>
    </Fact>


    <Fact path="/dependentWhoWasBornAndDiedInTaxYearWithoutTin">
      <Description>
        The family/household member who caused the born and died in TY knockout
      </Description>
      <Derived>
        <IndexOf>
          <Collection>
            <Filter path="/familyAndHousehold">
              <Dependency path="bornAndDiedInTaxYearWithoutTin"></Dependency>
            </Filter>
          </Collection>
          <Index>
            <Int>0</Int>
          </Index>
        </IndexOf>
      </Derived>
    </Fact>

    <Fact path="/knockoutPersonBornAndDiedInTaxYearWithoutTin">
      <Description>
        We should knockout the user because one of their family and household was born and died in the tax
        year without a TIN.
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <GreaterThan>
          <Left>
            <Count>
              <Dependency path="/familyAndHousehold/*/bornAndDiedInTaxYearWithoutTin" />
            </Count>
          </Left>
          <Right>
            <Int>0</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/notDeceased">
      <Name>Not Deceased</Name>
      <Description>Whether the dependent did not die during the tax year</Description>
      <Export mef="true" />

      <Derived>
        <Not>
          <Dependency path="../deceased" />
        </Not>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/dateOfDeath">
      <Name>Date of death</Name>
      <Description>The date on which the person died</Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Day />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/age">
      <Name>Age</Name>
      <Description>The age of the dependent at the end of the tax year.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Subtract>
          <Minuend>
            <Dependency module="constants" path="/taxYear" />
          </Minuend>
          <Subtrahends>
            <Dependency path="../dateOfBirth/year" />
          </Subtrahends>
        </Subtract>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/studentStatusMayAffectBenefits">
      <Description>
        Whether the dependent is older than 18 and under 24 at the end of the year. In the future, when we
        support more tax credits, we may want to ask this of everyone.
      </Description>

      <Derived>
        <All>
          <GreaterThan>
            <Left>
              <Dependency path="../age" />
            </Left>
            <Right>
              <Int>18</Int>
            </Right>
          </GreaterThan>
          <LessThan>
            <Left>
              <Dependency path="../age" />
            </Left>
            <Right>
              <Int>24</Int>
            </Right>
          </LessThan>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/disabilityStatusMayAffectBenefits">
      <Description>
        Disability status is used to qualify someone as a dependent, passing the age test. E.g. Even if a
        person is 99 years old, they can still pass the age test to be a qualifying child.

        A disabled person may also be
        eligible to be claimed for a benefit split. Therefore we need to ask about disability status whenever:
        1. The
        person is 18.5 or older, so they may be eligible for the benefit split due to disability
        2. The person is not
        18.5, but they are younger than the filer (or spouse if MFJ)
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Any>
          <GreaterThanOrEqual>
            <Left>
              <Dependency path="../ageAtFirstHalfOfYear" />
            </Left>
            <Right>
              <Int>18</Int>
            </Right>
          </GreaterThanOrEqual>
          <All>
            <LessThan>
              <Left>
                <Dependency path="../ageAtFirstHalfOfYear" />
              </Left>
              <Right>
                <Int>18</Int>
              </Right>
            </LessThan>
            <LessThan>
              <Left>
                <Dependency path="../dateOfBirth" />
              </Left>
              <Right>
                <Dependency module="filers" path="/minimumFilerDateOfBirth" />
              </Right>
            </LessThan>
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isClaimedPersonOrEligibleByBenefitSplit">
      <Description>
        The person has been claimed if they are claimable, or the TP
        is eligible to use them for benefits
        based on a benefit split
      </Description>

      <Derived>
        <Any>
          <All>
            <Dependency module="dependentsBenefitSplit" path="../tpCanClaimSplitBenefitsHohEitcCdcc" />
            <Dependency module="dependentsBenefitSplit" path="../eligibleForBenefitSplit" />
          </All>
          <Dependency path="../isClaimedDependent" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/cdccNonDependentQualifyingPerson">
      <Description>
        A non-dependent who qualifies for CDCC
      </Description>

      <Derived>

        <Any>
          <!--     Non-dependent eligible for special benefits split     -->
          <All>
            <Dependency path="../qualifyingChild" />
            <Dependency module="dependentsBenefitSplit" path="../tpCanClaimSplitBenefitsHohEitcCdcc" />
            <Dependency module="dependentsBenefitSplit" path="../eligibleForBenefitSplit" />
            <Not>
              <Dependency path="../isClaimedDependent" />
            </Not>
            <Any>
              <LessThan>
                <Left>
                  <Dependency path="../age" />
                </Left>
                <Right>
                  <Int>13</Int>
                </Right>
              </LessThan>
              <Dependency path="../cdccTurnedThirteenAfterJanFirst" />
            </Any>
          </All>
          <!--     Non-dependent who lived with you incapable of self-care and not necessarily a qualifying child     -->
          <All>
            <Dependency path="../residencyTest" />
            <Dependency path="../unableToCareForSelf" />
            <Dependency module="dependentsBenefitSplit" path="../tpCanClaimSplitBenefitsHohEitcCdcc" />
            <Dependency module="dependentsBenefitSplit" path="../eligibleForBenefitSplit" />
            <Not>
              <Dependency path="../isClaimedDependent" />
            </Not>
          </All>
          <!-- A person incapable of self-care who could be claimed except for:
          * The joint return test
          * Gross income test
          * TP may be claimed as a dependent of another TP.

          Below is the definitions of an eligible dependent with removal of requirements for the above conditions
         -->
          <All>
            <Not>
              <Dependency path="../eligibleDependent" />
            </Not>
            <Dependency path="../unableToCareForSelf" />
            <Dependency path="../citizenOrResidentTest" />
            <Dependency path="../residencyTest" />
            <NotEqual>
              <Left>
                <Dependency path="../tinType" />
              </Left>
              <Right>
                <Enum optionsPath="/tinTypeOptions">none</Enum>
              </Right>
            </NotEqual>
            <Any>
              <!-- qualifying child -->
              <All>
                <Dependency module="dependentsRelationship" path="../qcRelationshipTest" />
                <Dependency path="../ageTest" />
                <Dependency path="../qcSupportTest" />
              </All>
              <!--  qualifying relative  -->
              <All>
                <Dependency path="../notQualifyingChildTest" />
                <Dependency path="../relationshipMemberOfHouseholdTest" />
                <Dependency path="../qrSupportTest" />
              </All>
            </Any>
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/cdccCannotHaveParentAsCareProvider">
      <Description>A child for whom the parent cannot be listed as care provider. If a child is biological, adopted, or
        a foster child, and under 13 years old, then they cannot have a parent listed as care provider.</Description>

      <Derived>
        <All>
          <Dependency path="../cdccQualifyingPerson" />
          <Dependency path="../isBiologicalAdoptedFosterOrStepchild" />
          <LessThan>
            <Left>
              <Dependency path="../ageOnJanFirst" />
            </Left>
            <Right>
              <Int>13</Int>
            </Right>
          </LessThan>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/cdccOrEitcNonDependentQualifyingPerson">
      <Description>
        A non-dependent who qualifies for CDCC and/or EITC. Used to determine showing tin/pin info in Family
        and HH.
      </Description>

      <Derived>
        <Any>
          <Dependency path="../cdccNonDependentQualifyingPerson" />
          <Dependency path="../isEITCQCUnclaimedDependent" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/cdccNonDependentQualifyingPeopleAssignedTins">
      <Description>
        The set of non-dependent people, added in the family + HH section, who may qualify for the Child and
        Dependent Care Credit for whom we may still need to collect a TIN (or PIN if provided). They did indicate in the
        Family and Household subsection that they have a tin (assigned by the government). This is used to determine
        whether to collect a TIN and PIN later in the application if needed.
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Filter path="/familyAndHousehold">
          <All>
            <Dependency path="cdccNonDependentQualifyingPerson" />
            <Not>
              <Dependency path="hasTinTypeOfNone" />
            </Not>
          </All>
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/cdccNonDependentQualifyingPeopleTinsPinsSaved">
      <Description>
        The set of non-dependent people, added in the family + HH section, who qualify for the Child and
        Dependent Care Credit for whom we have collected a TIN (or PIN if provided).
      </Description>

      <Derived>
        <Filter path="/cdccNonDependentQualifyingPeopleAssignedTins">
          <All>
            <Dependency path="hasTin" />
            <IsComplete>
              <Dependency path="hasIpPin" />
            </IsComplete>
            <Any>
              <All>
                <Dependency path="hasIpPin" />
                <Dependency path="flowIpPinReady" />
                <IsComplete>
                  <Dependency path="identityPin" />
                </IsComplete>
              </All>
              <Not>
                <Dependency path="hasIpPin" />
              </Not>
            </Any>
          </All>
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/cdccNonDepQpTinsSavedNotZero">
      <Description>
        There is at least one CDCC nondependent qualifying person for whom we have collected a TIN (or PIN if
        provided).
        Used for conditionally showing content.
      </Description>

      <Derived>
        <GreaterThan>
          <Left>
            <CollectionSize>
              <Dependency path="/cdccNonDependentQualifyingPeopleTinsPinsSaved" />
            </CollectionSize>
          </Left>
          <Right>
            <Int>0</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>

    <Fact path="/cdccNonDependentQualifyingPeopleTinsPinsNeeded">
      <Description>
        The set of non-dependent people, added in the family + HH section, who qualify for the Child and
        Dependent Care Credit for whom we have not yet collected a TIN (or PIN if provided).
      </Description>

      <Derived>
        <Filter path="/cdccNonDependentQualifyingPeopleAssignedTins">
          <Any>
            <Not>
              <Dependency path="hasTin" />
            </Not>
            <Not>
              <IsComplete>
                <Dependency path="hasIpPin" />
              </IsComplete>
            </Not>
            <All>
              <Dependency path="hasIpPin" />
              <Not>
                <Dependency path="flowIpPinReady" />
              </Not>
            </All>
            <All>
              <Dependency path="hasIpPin" />
              <Dependency path="flowIpPinReady" />
              <Not>
                <IsComplete>
                  <Dependency path="identityPin" />
                </IsComplete>
              </Not>
            </All>
          </Any>
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/cdccNonDepQpTinsNoneToCollect">
      <Description>
        Whether there are no TINs (or IP PINs if needed) to collect for non-dependent people who qualify for
        the Child and
        Dependent Care Credit.
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Equal>
          <Left>
            <CollectionSize>
              <Dependency path="/cdccNonDependentQualifyingPeopleTinsPinsNeeded" />
            </CollectionSize>
          </Left>
          <Right>
            <Int>0</Int>
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/hasExactlyOneCdccNonDepQpTinNeeded">
      <Description>
        TP has only one CDCC non-dependent qualifying person who was assigned a tin.
      </Description>

      <Derived>
        <All>
          <Equal>
            <Left>
              <CollectionSize>
                <Dependency path="/cdccNonDependentQualifyingPeopleTinsPinsNeeded" />
              </CollectionSize>
            </Left>
            <Right>
              <Int>1</Int>
            </Right>
          </Equal>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/personCouldQualifyTPForCdcc">
      <Description>
        Whether or not this person could qualify the taxpayer for the CDCC. Pending the taxpayer electing to
        claim then as a
        dependent.
      </Description>
      <Derived>
        <All>
          <Dependency module="filers" path="/filersCouldQualifyForCdcc" />
          <Any>
            <!-- A QC who is a dependent and was under age 13 when care provided -->
            <All>
              <Dependency path="../qualifyingChild" />
              <Any>
                <LessThan>
                  <Left>
                    <Dependency path="../age" />
                  </Left>
                  <Right>
                    <Int>13</Int>
                  </Right>
                </LessThan>
                <Dependency path="../cdccTurnedThirteenAfterJanFirst" />
              </Any>
            </All>
            <!-- Or a dependent who lived with you incapable of self-care -->
            <All>
              <Dependency path="../residencyTest" />
              <Dependency path="../unableToCareForSelf" />
            </All>
            <!-- Or a person incapable of self-care who is not claimable as a dependent or a person not claimed but who qualifies through special benefits split -->
            <Dependency path="../cdccNonDependentQualifyingPerson" />
          </Any>
        </All>
      </Derived>

    </Fact>

    <Fact path="/familyAndHousehold/*/cdccQualifyingPerson">
      <Description>
        This person qualifies the taxpayer for CDCC
      </Description>

      <Derived>
        <All>
          <!--
            We need this to ensure that a filer going back to update their dependents doesn't get hit with a knockout they can't view
            https://git.irslabs.org/irslabs-prototypes/direct-file/-/issues/14186

            TODO: We need a more reliable way to avoid triggering knockouts in inaccessible parts of the flow
          -->
          <IsComplete>
            <Dependency path="../isClaimedIfClaimable" />
          </IsComplete>

          <Dependency path="../isClaimedIfClaimable" />
          <Any>
            <!-- A QC who is a dependent and was under age 13 when care provided -->
            <All>
              <Dependency path="../qualifyingChild" />
              <Dependency path="../isClaimedDependent" />
              <Any>
                <LessThan>
                  <Left>
                    <Dependency path="../age" />
                  </Left>
                  <Right>
                    <Int>13</Int>
                  </Right>
                </LessThan>
                <Dependency path="../cdccTurnedThirteenAfterJanFirst" />
              </Any>
            </All>
            <!-- Or a dependent who lived with you incapable of self-care -->
            <All>
              <Dependency path="../residencyTest" />
              <Dependency path="../isClaimedDependent" />
              <Dependency path="../unableToCareForSelf" />
            </All>
            <!-- Or a person incapable of self-care who is not claimable as a dependent or a person not claimed but who qualifies through special benefits split -->
            <Dependency path="../cdccNonDependentQualifyingPerson" />
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/cdccQualifyingPeople">
      <Description>
        The set of people, added in the family + HH section, who may qualify
        for the Child and Dependent Care
        Credit.
      </Description>

      <Derived>
        <Filter path="/familyAndHousehold">
          <Dependency path="cdccQualifyingPerson" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/cdccQualifyingNonFilersCount">
      <Description>Count of Qualifying Persons for CDCC that are not filers</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <CollectionSize>
          <Dependency path="/cdccQualifyingPeople" />
        </CollectionSize>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/unableToCareForSelf">
      <Description>
        The person was physically or mentally unable to care for themselves
      </Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/unableToCareForSelfAndOverAge12">
      <Description>Household member is over age 12 and unable to care for themselves. Used for CDCC qualification, pdf,
        and mef.</Description>
      <Export mef="true" />

      <Derived>
        <All>
          <Dependency path="../unableToCareForSelf" />
          <GreaterThanOrEqual>
            <Left>
              <Dependency path="../age" />
            </Left>
            <Right>
              <Int>13</Int>
            </Right>
          </GreaterThanOrEqual>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/cdccExpensesCollected">
      <Description>
        We have collected expenses for CDCC if required. Used to test completion of the CDCC QP loop.
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Any>
          <Not>
            <!-- Nothing to collect if they said they have no expenses overall -->
            <Dependency module="cdcc" path="/cdccMaybeHasQualifyingExpenses" />
          </Not>
	  <!-- Nothing to collect if they said the qp didn't have qualified care expenses -->
          <Not>
            <Dependency path="../cdccHasDependentCareExpenses" />
          </Not>
          <!-- Nothing to collect if they said the qp didn't have expenses paid to a qualified care provider -->
          <All>
            <Dependency path="../cdccHasDependentCareExpenses" />
            <Not>
              <Dependency path="../cdccHadExpensesPaidToQualifyingProvider" />
            </Not>
          </All>
          <!-- Or if we were collecting, let's make sure it's a complete amount-->
          <IsComplete>
            <Dependency path="../cdccQualifyingExpenseAmount" />
          </IsComplete>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/cdccQualifyingExpenseAmount">
      <Name>Qualifying Expense Amount for CDCC</Name>
      <Description>
        Amount of qualifying expenses paid for this qualifying person.
        Only applies if the person is a CDCC QP
      </Description>
      <Export mef="true" downstreamFacts="true" />
      <ExportZero />

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency path="../cdccHasQualifyingExpenses" />
            </When>
            <Then>
              <Round>
                <Dependency path="../writableCdccQualifyingExpenseAmount" />
              </Round>
            </Then>
          </Case>
          <Case>
            <When>
              <Not>
                <Dependency path="../cdccHasQualifyingExpenses" />
              </Not>
            </When>
            <Then>
              <Dollar>0</Dollar>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/writableCdccQualifyingExpenseAmount">
      <Name>Qualifying Expense Amount for CDCC</Name>
      <Description>
        Amount of qualifying expenses paid for this qualifying person.
        Only applies if the person is a CDCC QP
      </Description>

      <Writable>
        <Dollar />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/cdccHasDependentCareExpenses">
      <Description>
        Whether the QP has qualifying dependent care expenses
      </Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>


    <Fact path="/familyAndHousehold/*/cdccHadExpensesPaidToQualifyingProvider">
      <Description>
        Whether the QP's expenses were paid to a qualified provider
      </Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/cdccHasQualifyingExpenses">
      <Description>
        Whether the dependent had expenses that were qualifying
        and paid to a qualified provider
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency path="../cdccHasDependentCareExpenses" />
          <Dependency path="../cdccHadExpensesPaidToQualifyingProvider" />
        </All>
      </Derived>
    </Fact>


    <Fact path="/familyAndHousehold/*/ageUnderNineteen">
      <Name>Under Age 19</Name>
      <Description>Whether or not the dependent is under the age of 19</Description>

      <Export mef="true" />
      <Derived>
        <LessThan>
          <Left>
            <Dependency path="../age" />
          </Left>
          <Right>
            <Int>19</Int>
          </Right>
        </LessThan>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isBornOnJanFirst">
      <Description>Whether the dependent was born on January 1st of the tax year.</Description>
      <Derived>
        <All>
          <Equal>
            <Left>
              <Dependency path="../dateOfBirth/month" />
            </Left>
            <Right>
              <Int>1</Int>
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Dependency path="../dateOfBirth/day" />
            </Left>
            <Right>
              <Int>1</Int>
            </Right>
          </Equal>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/ageOnJanFirst">
      <Description>The age of the dependent on January 1st of the tax year, assuming if born on that day their age is
        incremented on that day</Description>
      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency path="../isBornOnJanFirst" />
            </When>
            <Then>
              <Dependency path="../age" />
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Subtract>
                <Minuend>
                  <Dependency path="../age" />
                </Minuend>
                <Subtrahends>
                  <Int>1</Int>
                </Subtrahends>
              </Subtract>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/cdccTurnedThirteenAfterJanFirst">
      <Description>Whether the dependent turned 13 after Jan 1st in the tax year as required for CDCC conditions</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <All>
          <Not>
            <Dependency path="../isBornOnJanFirst" />
          </Not>
          <Equal>
            <Left>
              <Dependency path="../age" />
            </Left>
            <Right>
              <Int>13</Int>
            </Right>
          </Equal>
        </All>
      </Derived>
    </Fact>

    <Fact path="/cdccNonFilerQpsWhoTurned13InTaxYear">
      <Description>The collection of cdcc qualified people who turned thirteen after January 1 of the tax year</Description>

      <Derived>
        <Filter path="/cdccQualifyingPeople">
          <Dependency path="cdccTurnedThirteenAfterJanFirst" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/cdccNonFilerQpsWhoTurned13InTaxYearAbleToCareForSelf">
      <Description>The collection of cdcc qualified people who turned thirteen after January 1 of the tax year who were
        not unable to care for themselves. Used to determine conditional content for what expenses to exclude.
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Filter path="/cdccQualifyingPeople">
          <All>
            <Dependency path="cdccTurnedThirteenAfterJanFirst" />
            <Not>
              <Dependency path="unableToCareForSelf" />
            </Not>
          </All>
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/cdccNonFilerQcsWhoTurned13InTaxYearUnableToCareForSelf">
      <Description>The collection of cdcc-qualified qualifying children who turned thirteen after January 1 of the tax
        year who were
        unable to care for themselves. Used to determine conditional content for what expenses to exclude.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Filter path="/cdccQualifyingPeople">
          <All>
            <Dependency path="cdccTurnedThirteenAfterJanFirst" />
            <Dependency path="unableToCareForSelf" />
            <Dependency path="qualifyingChild" />
          </All>
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/unableToCareForSelfAndNotQcUnderAge13">
      <Description>
        The HH member was unable to care for themselves and was not
        qualifying child under age 13. Used to
        determine conditional content for what expenses to include.
      </Description>

      <Derived>
        <All>
          <Dependency path="../unableToCareForSelf" />
            <!-- If they are a qc under age 13, we know all expenses qualify regardless of ability to care for self.
            They could still be a qualifying relative under age 13 -->
          <Not>
            <All>
              <Dependency path="../qualifyingChild" />
              <LessThan>
                <Left>
                  <Dependency path="../age" />
                </Left>
                <Right>
                  <Int>13</Int>
                </Right>
              </LessThan>
            </All>
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/cdccNonFilerQpsWhoWereUnableToCareForSelfAndNotQcUnderAge13">
      <Description>
        The collection of CDCC qualified people who were unable to care for themselves and were not
        qualifying children under age 13. This collection also does not include Qcs who turned 13 in the tax year.
        Used
        to determine
        conditional content for what expenses to include.
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Filter path="/cdccQualifyingPeople">
          <All>
            <Dependency path="unableToCareForSelfAndNotQcUnderAge13" />
            <!--    Not QC who was unable to care for self and turned 13 in the tax year    -->
            <All>
              <Dependency path="unableToCareForSelf" />
              <Not>
                <All>
                  <Dependency path="qualifyingChild" />
                  <Dependency path="cdccTurnedThirteenAfterJanFirst" />
                </All>
              </Not>
            </All>
          </All>
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/ageAtFirstHalfOfYear">
      <Description>The age of the dependent for the majority of the year, i.e. their age on July 2. Note that July 2
        works regardless of whether it is a leap year or not.
      </Description>
      <Export downstreamFacts="true" />
      <TaxYear>2024</TaxYear>

      <Derived>
        <Switch>
          <Case>
            <When>
              <Any>
                <GreaterThan>
                  <Left>
                    <Dependency path="../dateOfBirth/month" />
                  </Left>
                  <Right>
                    <Int>7</Int>
                  </Right>
                </GreaterThan>
                <All>
                  <Equal>
                    <Left>
                      <Dependency path="../dateOfBirth/month" />
                    </Left>
                    <Right>
                      <Int>7</Int>
                    </Right>
                  </Equal>
                  <GreaterThan>
                    <Left>
                      <Dependency path="../dateOfBirth/day" />
                    </Left>
                    <Right>
                      <Int>2</Int>
                    </Right>
                  </GreaterThan>
                </All>
              </Any>
            </When>
            <Then>
              <Subtract>
                <Minuend>
                  <Dependency path="../age" />
                </Minuend>
                <Subtrahends>
                  <Int>1</Int>
                </Subtrahends>
              </Subtract>
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency path="../age" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>


    <Fact path="/familyAndHousehold/*/youngerThanEighteenAtEndOfYear">
      <Name>Younger than eighteen at end of year</Name>
      <Description>Whether the dependent is younger than 18 at the end of the year.</Description>

      <Derived>
        <LessThan>
          <Left>
            <Dependency path="../age" />
          </Left>
          <Right>
            <Int>18</Int>
          </Right>
        </LessThan>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/flowShowParentHelpText">
      <Name>Flow show parent help text</Name>
      <Description>Whether to show parent help text in the flow</Description>

      <Derived>
        <All>
          <Dependency path="../qualifyingChild" />
          <Any>
            <Equal>
              <Left>
                <Dependency module="dependentsRelationship" path="../relationship" />
              </Left>
              <Right>
                <Enum optionsPath="/relationshipOptions">biologicalChild</Enum>
              </Right>
            </Equal>
            <Dependency path="../childIsAdopted" />
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/childIsFosterOrAdopted">
      <Description>Whether a dependent is at least one of: foster or adopted child of TP</Description>

      <Derived>
        <All>
          <Any>
            <Equal>
              <Left>
                <Dependency module="dependentsRelationship" path="../relationship" />
              </Left>
              <Right>
                <Enum optionsPath="/relationshipOptions">fosterChild</Enum>
              </Right>
            </Equal>
            <Dependency path="../childIsAdopted" />
          </Any>
        </All>
      </Derived>
    </Fact>
    <Fact path="/familyAndHousehold/*/xmlIsClaimedChildLivingWithTP">
      <Name>Is claimed child living with taxpayer</Name>
      <Description>Is the dependent considered a child living with and claimed by the taxpayer? Used in the 1040 XML.</Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <All>
                <IsComplete>
                  <Dependency path="../isClaimedDependent" />
                </IsComplete>
                <Dependency path="../isClaimedDependent" />
                <Any>
                  <Equal>
                    <Left>
                      <Dependency module="dependentsRelationship" path="../xmlRelationship" />
                    </Left>
                    <Right>
                      <String>DAUGHTER</String>
                    </Right>
                  </Equal>
                  <Equal>
                    <Left>
                      <Dependency module="dependentsRelationship" path="../xmlRelationship" />
                    </Left>
                    <Right>
                      <String>GRANDCHILD</String>
                    </Right>
                  </Equal>
                  <Equal>
                    <Left>
                      <Dependency module="dependentsRelationship" path="../xmlRelationship" />
                    </Left>
                    <Right>
                      <String>STEPCHILD</String>
                    </Right>
                  </Equal>
                </Any>
              </All>
            </When>
            <Then>
              <True />
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <False />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/xmlIsClaimedOtherDependent">
      <Name>Is claimed other dependent</Name>
      <Description>Is the dependent considered an other dependent and claimed by the taxpayer? Used in the 1040 XML.</Description>

      <Derived>
        <All>
          <IsComplete>
            <Dependency path="../isClaimedDependent" />
          </IsComplete>
          <Dependency path="../isClaimedDependent" />
          <Not>
            <Dependency path="../xmlIsClaimedChildLivingWithTP" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/xmlClaimedChildWhoLivedWithYouCount">
      <Name>Claimed child who lived with you count</Name>
      <Description>A count of the child who lived with and are claimed by the taxpayer. Used in the 1040 XML.</Description>
      <Export mef="true" />

      <Derived>
        <Count>
          <Dependency path="/familyAndHousehold/*/xmlIsClaimedChildLivingWithTP" />
        </Count>
      </Derived>
    </Fact>

    <Fact path="/xmlClaimedOtherDependentsListedCount">
      <Name>Claimed other dependents listed count</Name>
      <Description>A count of the other dependents claimed by the taxpayer. Used in the 1040 XML.</Description>
      <Export mef="true" />

      <Derived>
        <Count>
          <Dependency path="/familyAndHousehold/*/xmlIsClaimedOtherDependent" />
        </Count>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/fullTimeStudent">
      <Name>Full-time student</Name>
      <Description>Is the dependent a full-time student?</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/permanentTotalDisability">
      <Name>Permanent and total disability</Name>
      <Description> Is the dependent permanently and totally disabled? We intentionally do not AND this with
        "../disabilityStatusMayAffectBenefits" in our MeF export, as that would mark people as "not disabled" when the
        app simply did not ask them about their disability status.
      </Description>
      <Export downstreamFacts="true" mef="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/ageTest">
      <Name>Age test</Name>
      <Description>Does the dependent pass the Age test to be a qualifying child?</Description>

      <Derived>
        <Any>
          <All>
            <LessThan>
              <Left>
                <Dependency path="../age" />
              </Left>
              <Right>
                <Int>19</Int>
              </Right>
            </LessThan>
            <GreaterThan>
              <Left>
                <Dependency path="../dateOfBirth" />
              </Left>
              <Right>
                <Dependency module="filers" path="/minimumFilerDateOfBirth" />
              </Right>
            </GreaterThan>
          </All>
          <Dependency path="../isAStudentUnder24" />
          <All>
            <Dependency path="../permanentTotalDisability" />
            <Dependency path="../disabilityStatusMayAffectBenefits" />
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/residencyDuration">
      <Name>Residency duration</Name>
      <Description>What portion of the year did the dependent live with you?</Description>
      <Export stateSystems="true" />

      <Writable>
        <Enum optionsPath="/residencyDurationOptions" />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/residencyTest">
      <Name>Residency test</Name>
      <Description>Did the dependent live with you for more than half the year? Used for dependents other than QSS.</Description>
      <Export downstreamFacts="true" mef="true" />

      <Derived>
        <NotEqual>
          <Left>
            <Dependency path="../residencyDuration" />
          </Left>
          <Right>
            <Enum optionsPath="/residencyDurationOptions">lessThanSixMonths</Enum>
          </Right>
        </NotEqual>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/qssPersonResidencyTest">
      <Name>Residency test</Name>
      <Description>Did the dependent live with you for the whole year? This is the rule for QSS Persons. See
        https://www.irs.gov/publications/p501</Description>
      <Derived>
        <Equal>
          <Left>
            <Dependency path="../residencyDuration" />
          </Left>
          <Right>
            <Enum optionsPath="/residencyDurationOptions">allYear</Enum>
          </Right>
        </Equal>
      </Derived>
    </Fact>


    <Fact path="/familyAndHousehold/*/flowAddPersonKeepingUpHome">
      <Name>Need to show screen AddPersonKeepingUpHome</Name>
      <Description>
        Flow variable for screen AddPersonKeepingUpHome.

        We only show this when
        * the TP is trying to qualify
        for HoH and QSS, and the person is still eligible as
        HohQualifyingPerson or QSSQualifyingPerson
        * OR the filer is
        MFS, could potentially be considered unmarried for
        the purposes of Form 2441, and this person could be a
        qualifying person
      </Description>

      <Derived>
        <Any>
          <All>
            <!-- We need to know this if the for MFS filers that could claim this person for CDCC -->
            <Dependency module="filers" path="/mfsFilerCouldBeConsiderUnmarriedForCdcc" />
            <Dependency path="../cdccQualifyingPerson" />
          </All>
          <All>
            <Any>
              <Dependency module="filers" path="/filerCouldQualifyForHoh" />
              <Dependency module="filers" path="/filerCouldQualifyForQss" />
            </Any>
            <Any>
              <Dependency module="dependentsRelationship" path="../qcRelationshipTest" />
              <All>
                <Dependency module="dependentsRelationship" path="../qrRelationshipTest" />
                <Any>
                  <Equal>
                    <Left>
                      <Dependency path="../residencyDuration" />
                    </Left>
                    <Right>
                      <Enum optionsPath="/residencyDurationOptions">sixToElevenMonths</Enum>
                    </Right>
                  </Equal>
                  <Equal>
                    <Left>
                      <Dependency path="../residencyDuration" />
                    </Left>
                    <Right>
                      <Enum optionsPath="/residencyDurationOptions">allYear</Enum>
                    </Right>
                  </Equal>
                </Any>
              </All>
            </Any>
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/flowAddPersonKeepingUpParentsHome">
      <Name>Need to show screen AddPersonKeepingUpParentsHome</Name>
      <Description>Flow variable for screen AddPersonKeepingUpParentsHome</Description>
      <Derived>
        <All>
          <Dependency module="filers" path="/filerCouldQualifyForHoh" />
          <Equal>
            <Left>
              <Dependency module="dependentsRelationship" path="../relationship" />
            </Left>
            <Right>
              <Enum optionsPath="/relationshipOptions">parent</Enum>
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Dependency path="../residencyDuration" />
            </Left>
            <Right>
              <Enum optionsPath="/residencyDurationOptions">lessThanSixMonths</Enum>
            </Right>
          </Equal>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/flowAddPersonSsnValidForWork">
      <Name>Need to show screen AddPersonSsnValidForWork</Name>
      <Description> We only ask this question if the dependent is still on track for being either a qualfiying child for
        CTC or a qualifying child for EITC
      </Description>

      <Derived>
        <All>
          <!-- These three criteria are the QC criteria we've already asked -->
          <Dependency path="../residencyTest" />
          <Dependency module="dependentsRelationship" path="../qcRelationshipTest" />
          <Dependency path="../ageTest" />
          <Equal>
            <Left>
              <Dependency path="../tinType" />
            </Left>
            <Right>
              <Enum optionsPath="/tinTypeOptions">ssn</Enum>
            </Right>
          </Equal>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/married">
      <Name>Married</Name>
      <Description>Is the dependent married?</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/writableJointReturn">
      <Name>Filing a joint return</Name>
      <Description>Are the dependent and their spouse filing a joint return?</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/jointReturn">
      <Name>Filing a joint return</Name>
      <Description>Are the dependent and their spouse filing a joint return?</Description>

      <Derived>
        <All>
          <Dependency path="../married" />
          <Dependency path="../writableJointReturn" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/writableRequiredToFile">
      <Description>
        Are the dependent and their spouse required to file?
      </Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/requiredToFile">
      <Description>
        Are the dependent and their spouse required to file?
      </Description>

      <Derived>
        <All>
          <Dependency path="../married" />
          <Dependency path="../jointReturn" />
          <Dependency path="../writableRequiredToFile" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/writableFilingOnlyForRefund">
      <Name>Filing only for refund</Name>
      <Description> Are the dependent and their spousefiling a return only to claim a refund of income tax withheld or
        estimated tax paid?</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/filingOnlyForRefund">
      <Name>Filing only for refund</Name>
      <Description> Are the dependent and their spousefiling a return only to claim a refund of income tax withheld or
        estimated tax paid?</Description>

      <Derived>
        <All>
          <Dependency path="../married" />
          <Dependency path="../jointReturn" />
          <Dependency path="../writableFilingOnlyForRefund" />

          <!-- We only ask either requiredToFile or filingOnlyForRefund, so if required to file is complete and true, we
          know this is false. Using the <All> below basically as parens -->
          <All>
            <IsComplete>
              <Dependency path="../requiredToFile" />
            </IsComplete>
            <Not>
              <Dependency path="../requiredToFile" />
            </Not>
          </All>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/jointReturnTest">
      <Name>Joint Return test</Name>
      <Description>Does the dependent pass the Joint Return test to be a qualifying child?</Description>

      <Derived>
        <Any>
          <Not>
            <Dependency path="../married" />
          </Not>
          <Not>
            <Dependency path="../jointReturn" />
          </Not>
          <All>
            <Dependency path="../filingOnlyForRefund" />
            <Not>
              <Dependency path="../requiredToFile" />
            </Not>
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/flowShowQcSupportTest">
      <Name>Flow should show QC support test.</Name>
      <Description>Used by the flow to decide whether to show screens to run the support test for the qualifying child.
        Comes before the joint return test.</Description>
      <Derived>
        <All>
          <Dependency module="dependentsRelationship" path="../qcRelationshipTest" />
          <Dependency path="../ageTest" />
          <Dependency path="../residencyTest" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/qualifyingChild">
      <Name>Qualifying child</Name>
      <Description>Does the dependent pass all five qualifying child tests?</Description>
      <Export stateSystems="true" />

      <Derived>
        <All>
          <Dependency module="dependentsRelationship" path="../qcRelationshipTest" />
          <Dependency path="../ageTest" />
          <Dependency path="../residencyTest" />
          <Dependency path="../qcSupportTest" />
          <Dependency path="../jointReturnTest" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/eitcRelAgeResJointTest">
      <Name>EITC relationship age residency and joint return test</Name>
      <Description>Determines whether a dependent passes the relationship, age, residency and joint return test</Description>

      <Derived>
        <All>
          <Dependency module="dependentsRelationship" path="../qcRelationshipTest" />
          <Dependency path="../ageTest" />
          <Dependency path="../livedWithTpInUsMostOfYear" />
          <Dependency path="../jointReturnTest" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/atLeastOneChildCanBeQCOfAnother">
      <Name>At least one child can be QC of another</Name>
      <Description>At least one child can be the qualifying child of another</Description>

      <Derived>
        <GreaterThanOrEqual>
          <Left>
            <Count>
              <Dependency path="/familyAndHousehold/*/isQualifyingChildOfAnother" />
            </Count>
          </Left>
          <Right>
            <Int>1</Int>
          </Right>
        </GreaterThanOrEqual>
      </Derived>
    </Fact>

    <Fact path="/atLeastOneChildFailsEitcRelAgeResJointTest">
      <Name>At least one child is disqualified because of relationship age residency or joint return
        test</Name>
      <Description>Whether at least one child is disqualified because of relationship, age, residency, or joint return
        test for EITC</Description>
      <Derived>
        <GreaterThanOrEqual>
          <Left>
            <Count>
              <Not>
                <Dependency path="/familyAndHousehold/*/eitcRelAgeResJointTest" />
              </Not>
            </Count>
          </Left>
          <Right>
            <Int>1</Int>
          </Right>
        </GreaterThanOrEqual>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/personQualifiesTPforEitc">
      <Description>
        The family member can be a QP for EITC, and the TP is eligible to receive EITC
      </Description>

      <Derived>
        <All>
          <Dependency path="../eitcQualifyingChild" />
          <Dependency module="filers" path="/filersCouldQualifyForEitc" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/personQualifiesTPforCdcc">
      <Description>
        The household member can be a QP for CDCC, and the TP is eligible to receive CDCC
      </Description>

      <Derived>
        <All>
          <Dependency path="../cdccQualifyingPerson" />
          <Dependency module="filers" path="/filersCouldQualifyForCdcc" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/personQualifiesTPforHoH">
      <Description>
        The household member can be a QP for HoH, and the TP is eligible to have a filing status of HoH
      </Description>

      <Derived>
        <All>
          <Dependency path="../hohQualifyingPerson" />
          <Dependency module="filers" path="/filerCouldQualifyForHoh" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/personQualifiesTPforQss">
      <Description>
        The TP can be a QP for QSS, and the TP is eligible to have a filing status of QSS
      </Description>

      <Derived>
        <All>
          <Dependency path="../qssQualifyingPerson" />
          <Dependency module="filers" path="/filerCouldQualifyForQss" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/eitcQualifyingChild">
      <Name>EITC Qualifying child</Name>
      <Description>
        Does the child qualify as a QC for EITC? This is mostly the same as the QC test, but omits the
        support test and has a different residency test.

        TODO: take into account QC of another
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency path="../eitcRelAgeResJointTest" />
          <Dependency path="../isClaimedIfClaimable" />
          <Not>
            <Dependency module="dependentsBenefitSplit" path="../disqualifiedDueToParentalCustody" />
          </Not>
          <Any>
            <!-- If the child is the QC of another, the TP must claim that child in order to receive
            EITC for the child. This will happen when both the TP and the other TP are eligible to claim
            the child as a QC, and they apply tiebreaker rules. -->
            <Not>
              <Dependency path="../isQualifyingChildOfAnother" />
            </Not>
            <Dependency path="../isClaimedDependent" />
          </Any>
          <Any>
            <!-- If the person is married, they must be a claimed dependent -->
            <Not>
              <Dependency path="../married" />
            </Not>
            <Dependency path="../isClaimedDependent" />
          </Any>
          <Any>
            <!-- Either the QC is not eligible for a benefit split, or they are eligible and this TP
                 is the one eligible to claim them -->
            <Not>
              <Dependency module="dependentsBenefitSplit" path="../eligibleForBenefitSplit" />
            </Not>
            <Dependency module="dependentsBenefitSplit" path="../tpCanClaimSplitBenefitsHohEitcCdcc" />
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/eitcQualifyingChildForCalculation">
      <Description>
        The child both qualifies the TP for EITC, and qualifies to increase the amount of EITC they will
        receive.

        EITC qualifying children use different paths for eligibility and calculation. A child may make a
        taxpayer eligible for the credit, but if they don't have an SSN, they will not increase the amount of the
        credit.
      </Description>

      <Derived>
        <All>
          <Dependency path="../eitcQualifyingChild" />
          <Dependency path="../ssnValidForEITCCalculation" />
        </All>
      </Derived>
    </Fact>


    <Fact path="/numEitcDependentsCollectionForCalculation">
      <Name>EITC Eligible Dependents Collection For Calculation</Name>
      <Description>The subset of people who qualify as qualifying children for EITC</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <Count>
          <Dependency path="/familyAndHousehold/*/eitcQualifyingChildForCalculation" />
        </Count>
      </Derived>
    </Fact>

    <Fact path="/eitcDependentsWhoQualify">
      <Name>Qualified EIC Dependents</Name>
      <Description>The qualified people to list on Schedule EIC</Description>
      <Derived>
        <Filter path="/familyAndHousehold">
          <Dependency path="eitcQualifyingChildForCalculation" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/scheduleEicDependents">
      <Description>
        The potential schedule EIC dependents, but only if we're actually receiving EITC
      </Description>

      <Derived>
        <Filter path="/potentialScheduleEicDependents">
          <Dependency module="eitc" path="/isReceivingEitc" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/potentialScheduleEicDependents">
      <Name>Schedule EIC Dependents</Name>
      <Description>The people to list on Schedule EIC</Description>
      <Derived>
        <Switch>
          <Case>
            <!-- When there are dependents but none qualify, just list the first one; ... -->
            <When>
              <All>
                <Equal>
                  <Left>
                    <CollectionSize>
                      <Dependency path="/eitcDependentsWhoQualify" />
                    </CollectionSize>
                  </Left>
                  <Right>
                    <Int>0</Int>
                  </Right>
                </Equal>
                <GreaterThan>
                  <Left>
                    <CollectionSize>
                      <Dependency path="/eitcDependentsCollection" />
                    </CollectionSize>
                  </Left>
                  <Right>
                    <Int>0</Int>
                  </Right>
                </GreaterThan>
              </All>
            </When>
            <Then>
              <FirstNCollectionItems>
                <Collection>
                  <Dependency path="/eitcDependentsCollection" />
                </Collection>
                <Count>
                  <Int>1</Int>
                </Count>
              </FirstNCollectionItems>
            </Then>
          </Case>
          <Case>
            <!-- ... otherwise, list all who qualify. -->
            <When>
              <True />
            </When>
            <Then>
              <Dependency path="/eitcDependentsWhoQualify" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/couldntBeQCOfAnother">
      <Name>Flow variable for qualifying child of another</Name>
      <Description>Whether to display the qualifying child of another subsubsection</Description>

      <Derived>
        <Not>
          <Dependency path="../askAboutQCOfAnother" />
        </Not>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/askAboutQCOfAnother">
      <Description>
        Whether we need to see if the person is a QC of another to make a determination
      </Description>
      <Derived>
        <All>
          <!-- If the person doesn't meet the age test, they couldn't be anyone's QC -->
          <!-- We may be able to add a joint return test here as well -->
          <Dependency path="../ageTest" />
          <Any>
            <!-- The person is trying to qualify as a QR, so we need to know if they can be QC of
            another -->
            <All>
              <!-- We only show this if they've filled out all the QR info and it's true -->
              <IsComplete>
                <Dependency path="../qualifyingRelativeMinusNotQcTest" />
              </IsComplete>
              <Dependency path="../qualifyingRelativeMinusNotQcTest" />
            </All>
            <!-- Or the person is the TP's QC, but not their biological or adopted child so we need
            to see if they could
               be someone else's QC as well. -->
            <Dependency path="../qualifyingChild" />
          </Any>
          <Not>
            <!-- If involved in a benefit split, we know who the qualifying people are -->
            <Dependency module="dependentsBenefitSplit" path="../tpCanClaimSplitBenefitsHohEitcCdcc" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/writableCouldBeQualifyingChildOfAnother">
      <Name>Qualifying child of another taxpayer</Name>
      <Description>(writable) Is the dependent the qualifying child of any other taxpayer?</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/couldBeQualifyingChildOfAnother">
      <Description>Is the dependent the qualifying child of any other taxpayer?</Description>
      <Derived>
        <All>
          <Not>
            <Dependency path="../couldntBeQCOfAnother" />
          </Not>
          <Dependency path="../writableCouldBeQualifyingChildOfAnother" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/qrPathCouldBeQualifyingChildOfAnother">
      <Description>The dependent is not our qualifying child, but could be someone else's.</Description>
      <Derived>
        <All>
          <Not>
            <Dependency path="../qualifyingChild" />
          </Not>
          <Dependency path="../couldBeQualifyingChildOfAnother" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/writablePotentialClaimerMustFile">
      <Description>Is the other taxpayer (for whom the dependent could be a qualifying child) required to file a return?</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/potentialClaimerMustFile">
      <Description>Is the other taxpayer (for whom the dependent could be a qualifying child) required to file a return?</Description>
      <Derived>
        <All>
          <Dependency path="../couldBeQualifyingChildOfAnother" />
          <Dependency path="../writablePotentialClaimerMustFile" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/writablePotentialClaimerDidFile">
      <Description>Is the other taxpayer (for whom the dependent could be a qualifying child) filing a return?</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/potentialClaimerDidFile">
      <Description>Is the other taxpayer (for whom the dependent could be a qualifying child) filing a return?</Description>
      <Derived>
        <All>
          <Dependency path="../couldBeQualifyingChildOfAnother" />
          <Not>
            <Dependency path="../potentialClaimerMustFile" />
          </Not>
          <Dependency path="../writablePotentialClaimerDidFile" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/writablePotentialClaimerFiledOnlyForRefund">
      <Name>Other taxpayer is filing</Name>
      <Description>Is the other taxpayer (for whom the dependent is a qualifying child) filing solely for refund of
        income tax withheld or estimated tax paid?</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/potentialClaimerFiledOnlyForRefund">
      <Name>Other taxpayer is filing</Name>
      <Description>Is the other taxpayer (for whom the dependent is a qualifying child) filing solely for refund of
        income tax withheld or estimated tax paid?</Description>

      <Derived>
        <All>
          <Dependency path="../couldBeQualifyingChildOfAnother" />
          <Not>
            <Dependency path="../potentialClaimerMustFile" />
          </Not>
          <Dependency path="../potentialClaimerDidFile" />
          <Dependency path="../writablePotentialClaimerFiledOnlyForRefund" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/qcOfAnotherButNot">
      <Description>The dependent would have been a qc of another but they are not filing, or not filing for
        credits/dependents</Description>

      <Derived>
        <All>
          <Dependency path="../couldBeQualifyingChildOfAnother" />
          <Not>
            <Dependency path="../potentialClaimerMustFile" />
          </Not>
          <Any>
            <Not>
              <Dependency path="../potentialClaimerDidFile" />
            </Not>
            <Dependency path="../potentialClaimerFiledOnlyForRefund" />
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isQualifyingChildOfAnother">
      <Description> Whether the dependent is the qualifying child of another taxpayer. This includes tests that they can
        be the qualifying child of another taxpayer, and makes sure that that they count as a QC of another taxpayer due
        to how that taxpayer is filing.
      </Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <All>
                <IsComplete>
                  <Dependency path="../qualifyingChild" />
                </IsComplete>
                <Dependency path="../qualifyingChild" />
              </All>
            </When>
            <Then>
              <All>
                <Not>
                  <Dependency path="../couldntBeQCOfAnother" />
                </Not>
                <Dependency path="../couldBeQualifyingChildOfAnother" />
              </All>
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <All>
                <Not>
                  <Dependency path="../couldntBeQCOfAnother" />
                </Not>
                <Dependency path="../couldBeQualifyingChildOfAnother" />
                <Not>
                  <Dependency path="../qcOfAnotherButNot" />
                </Not>
              </All>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/tpClaims">
      <Name>Taxpayer claims dependent</Name>
      <Description>Whether the taxpayer wants to claim the dependent.</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/notQualifyingChildTest">
      <Name>Not qualifying child test</Name>
      <Description>The dependent passes the not qualifying child test for purposes of determining qualifying relative.</Description>

      <Derived>
        <Not>
          <Dependency path="../isQualifyingChildOfAnother" />
        </Not>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/memberOfHouseholdTest">
      <Name>Lived with you all year</Name>
      <Description>Did the dependent live with you all year as a member of your household?</Description>

      <Derived>
        <Equal>
          <Left>
            <Dependency path="../residencyDuration" />
          </Left>
          <Right>
            <Enum optionsPath="/residencyDurationOptions">allYear</Enum>
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/relationshipMemberOfHouseholdTest">
      <Name>Relationship or member of household test</Name>
      <Description>The dependent passes the relationship/member of household test for purposes of determining qualifying
        relative.</Description>

      <Derived>
        <Any>
          <Dependency module="dependentsRelationship" path="../qrRelationshipTest" />
          <Dependency path="../memberOfHouseholdTest" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/grossIncomeLimit">
      <Name>Gross income limit</Name>
      <Description>The gross income limit for purposes of the qualifying relative gross income test referenced in
        §152(d)(1)(B).
        Rev Proc .24 Gross Income Limitation for a Qualifying Relative §152(d)(1)(B)
      </Description>
      <TaxYear>2024</TaxYear>

      <Derived>
        <Dollar>5050</Dollar>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/grossIncomeTest">
      <Name>Gross income test</Name>
      <Description>The dependent passes the gross income test for purposes of determining qualifying relative (their
        gross income was less than /grossIncomeLimit).</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/ownSupport">
      <Name>Own support</Name>
      <Description>Did the dependent provide more than half their own support?</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/qcSupportTest">
      <Name>Support test</Name>
      <Description>Does the dependent pass the Support test to be a qualifying child?</Description>

      <Derived>
        <Not>
          <Dependency path="../ownSupport" />
        </Not>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/writableQrSupportTest">
      <Name>Support test (for qualifying relative)</Name>
      <Description>The dependent passes the support test for purposes of determining qualifying relative (you provided
        more than half their support).</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>


    <Fact path="/familyAndHousehold/*/qrSupportTest">
      <Name>Support test (for qualifying relative)</Name>
      <Description>The dependent passes the support test for purposes of determining qualifying relative (you provided
        more than half their support).</Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <All>
                <IsComplete>
                  <Dependency path="../ownSupport" />
                </IsComplete>
                <Dependency path="../ownSupport" />
              </All>
            </When>
            <Then>
              <False />
            </Then>
          </Case>
          <Case>
            <When>
              <True />
            </When>
            <Then>
              <Dependency path="../writableQrSupportTest" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/qualifyingRelative">
      <Name>Qualifying relative</Name>
      <Description>Does the dependent pass all four qualifying relative tests?</Description>

      <Derived>
        <All>
          <Dependency path="../notQualifyingChildTest" />
          <Dependency path="../qualifyingRelativeMinusNotQcTest" />
        </All>
      </Derived>
    </Fact>


    <Fact path="/familyAndHousehold/*/qualifyingRelativeMinusNotQcTest">
      <Description>Does the dependent pass the three tests that precede QC of another</Description>

      <Derived>
        <All>
          <Dependency path="../relationshipMemberOfHouseholdTest" />
          <Dependency path="../grossIncomeTest" />
          <Dependency path="../qrSupportTest" />
        </All>
      </Derived>
    </Fact>


    <Fact path="/familyAndHousehold/*/writableUsResident">
      <Name>Resident of the U.S.</Name>
      <Description>The dependent resides in the United States of America.</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/writableUsNational">
      <Name>Dependent is U.S. National</Name>
      <Description>The dependent is not a citizen, but is a U.S. national.</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/writableCanadaMexicoResident">
      <Name>Resident of Canada or Mexico</Name>
      <Description>The dependent resides in Canada or Mexico.</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/isUsCitizenFullYear">
      <Name>Citizenship for dependent</Name>
      <Description>Whether the filer was a U.S. citizen for part of the tax year</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/usResident">
      <Name>Resident of the U.S.</Name>
      <Description>The dependent resides in the United States of America.</Description>

      <Derived>
        <All>
          <Not>
            <Dependency path="../isUsCitizenFullYear" />
          </Not>
          <Dependency path="../writableUsResident" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/usNational">
      <Name>Dependent is U.S. National</Name>
      <Description>
        The dependent is not a citizen, but is a U.S. national.
      </Description>

      <Derived>
        <All>
          <Not>
            <Dependency path="../isUsCitizenFullYear" />
          </Not>
          <Not>
            <Dependency path="../usResident" />
          </Not>
          <Dependency path="../writableUsNational" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/canadaMexicoResident">
      <Name>Resident of Canada or Mexico</Name>
      <Description>
        The dependent resides in Canada or Mexico and is not a U.S. citizen, resident, or national.
      </Description>

      <Derived>
        <All>
          <Not>
            <Dependency path="../isUsCitizenFullYear" />
          </Not>
          <Not>
            <Dependency path="../usResident" />
          </Not>
          <Not>
            <Dependency path="../usNational" />
          </Not>
          <Dependency path="../writableCanadaMexicoResident" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/citizenOrResidentTest">
      <Name>Citizen or resident test</Name>
      <Description>The dependent passes the Citizen or Resident Test for purposes of claiming as a dependent.</Description>

      <Derived>
        <Any>
          <Dependency path="../citizenOrUsResidentTest" />
          <Dependency path="../canadaMexicoResident" />
          <Dependency path="../adoptedChildException" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/mayHaveNotlivedWithTaxpayerInUSForFullTaxYear">
      <Name>May not have lived with Taxpayer in U.S. for entire tax year test</Name>
      <Description>The dependent might not have been living with the taxpayer in the U.S. for the entire tax year.
        Either they were born or died during the tax year, are adopted or a foster child, or could have been kidnapped.</Description>
      <Derived>
        <Any>
          <Dependency path="../childIsFosterOrAdopted" />
          <Dependency path="../yearOfBirthSameAsTaxYear" />
          <Dependency path="../deceased" />
          <Dependency path="../youngerThanEighteenAtEndOfYear" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/childIsAdopted">
      <Description>Is the person an adopted child?</Description>
      <Derived>
        <Equal>
          <Left>
            <Dependency module="dependentsRelationship" path="../relationship" />
          </Left>
          <Right>
            <Enum optionsPath="/relationshipOptions">adoptedChild</Enum>
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/adoptedChildException">
      <Name>Adopted child exception to the citizen or resident test</Name>
      <Description>If the taxpayer is a U.S. citizen or U.S. national and legally adopts a child who isn't a U.S.
        citizen, U.S. resident alien, or U.S. national, then that child can pass the dependent residency test if they
        lived with the taxpayer all year as a member of the household. This exception also applies if the child was
        lawfully placed with the taxpayer for legal adoption and the child lived with the taxpayer for the rest of the
        year after placement (even if it wasn't all year).</Description>
      <Derived>
        <All>

          <Dependency path="../childIsAdopted" />
          <Equal>
            <Left>
              <Dependency module="dependentsRelationship" path="../relationship" />
            </Left>
            <Right>
              <Enum optionsPath="/relationshipOptions">adoptedChild</Enum>
            </Right>
          </Equal>

          <Dependency module="filers" path="/eitherFilerUSCitizenOrNational" />

          <Equal>
            <Left>
              <Dependency path="../residencyDuration" />
            </Left>
            <Right>
              <Enum optionsPath="/residencyDurationOptions">allYear</Enum>
            </Right>
          </Equal>

        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/citizenOrUsResidentTest">
      <Name>Citizen or U.S. resident test</Name>
      <Description>A narrower Citizen or Resident Test for purposes of CTC and ODC, excluding residents of Canada and
        Mexico who are not U.S. nationals.</Description>
      <Export mef="true" />

      <Derived>
        <Any>
          <Dependency path="../isUsCitizenFullYear" />
          <Dependency path="../usResident" />
          <Dependency path="../usNational" />
          <Dependency path="../adoptedChildException" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/eligibleDependentMinusFilerInformation">
      <Description> The person is an eligible dependent, but that's without taking into account whether the filer is
        eligible to claim dependents
      </Description>

      <Derived>
        <All>
          <Dependency path="../qcOrQr" />
          <Not>
            <Dependency module="dependentsBenefitSplit" path="../disqualifiedDueToParentalCustody" />
          </Not>
          <Not>
            <Dependency module="dependentsBenefitSplit" path="../tpCanClaimSplitBenefitsHohEitcCdcc" />
          </Not>
          <Dependency path="../citizenOrResidentTest" />
          <Dependency path="../jointReturnTest" />
          <NotEqual>
            <Left>
              <Dependency path="../tinType" />
            </Left>
            <Right>
              <Enum optionsPath="/tinTypeOptions">none</Enum>
            </Right>
          </NotEqual>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/eligibleDependent">
      <Name>Eligible to be claimed as dependent</Name>
      <Description>The person is eligible to be claimed as a dependent.

        TODO: This does not account for qualifying child
        tiebreakers
        TODO: This does not account for MSAs, divorced/separated, etc.</Description>
      <Export stateSystems="true" />

      <Derived>
        <All>
          <Not>
            <Dependency module="filers" path="/treatFilersAsDependents" />
          </Not>
          <Dependency path="../eligibleDependentMinusFilerInformation" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/qcOrQr">
      <Description>The person is a Qualifying Child or a Qualifying Relative</Description>
      <Derived>
        <Any>
          <Dependency path="../qualifyingChild" />
          <Dependency path="../qualifyingRelative" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isClaimedDependent">
      <Name>Is claimed dependent</Name>
      <Description>Whether the person is both allowed to be claimed as a dependent, and has been claimed as a dependent.
        Exists as a derived fact to ensure that an edit that disqualifies a person as a dependent causes them to no
        longer count as a dependent.</Description>
      <Export downstreamFacts="true" stateSystems="true" />
      <Derived>
        <All>
          <Dependency path="../tpClaims" />
          <Dependency path="../eligibleDependent" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isNotClaimedDependent">
      <Name>Is not claimed dependent</Name>
      <Description>The negation of is claimed dependent</Description>

      <Derived>
        <Not>
          <Dependency path="../isClaimedDependent" />
        </Not>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/tpHasClaimedButIsNotCurrentlyEligible">
      <Description>At some point, we gave the TP the chance to claim this dependent, but right now they're not eligible
        anymore</Description>
      <Derived>
        <All>
          <Dependency path="../tpClaims" />
          <!-- Want to make sure we actually know if this person is actually eligible -->
          <Dependency path="../isCompleted" />
          <Not>
            <Dependency path="../eligibleDependent" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <!-- Either the filer edited the dependents to make them ineligible or made themselves ineligible to even claim
    dependents -->
    <Fact path="/hasClaimedDependentsWhoAreNotCurrentlyEligible">
      <Description>At some point, we gave the TP the chance to claim this dependent, but currently at least one of those
        dependents is no longer eligible to be claimed</Description>
      <Derived>
        <GreaterThan>
          <Left>
            <CollectionSize>
              <Filter path="/familyAndHousehold">
                <Dependency path="tpHasClaimedButIsNotCurrentlyEligible" />
              </Filter>
            </CollectionSize>
          </Left>
          <Right>
            <Int>0</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>

    <!-- The filer has changed themselves to be a dependent after claiming some -->
    <Fact path="/hasClaimedDependentsButIsNotEligibleToDoSo">
      <Description>The filer was at some point eligible to claim one or more dependents, and did so, but has since said
        they themselves are a dependent and so cannot have dependents of their own</Description>
      <Derived>
        <All>
          <!-- The filer can't claim dependents because they themselves are dependents -->
          <Dependency module="filers" path="/treatFilersAsDependents" />
          <!-- AND they have claimed dependents who aren't eligible, so we can assume it's because
          the filer became a
          dependent -->
          <Dependency path="/hasClaimedDependentsWhoAreNotCurrentlyEligible" />
        </All>
      </Derived>
    </Fact>

    <!-- The filer has changed themselves to be a dependent after claiming some -->
    <Fact path="/hasClaimedDependentsWhoAreNoLongerEligibleToBeClaimed">
      <Description>The filer was at some point eligible to claim one or more dependents, and did so, but has since said
        they themselves are a dependent and so cannot have dependents of their own</Description>
      <Derived>
        <All>
          <!-- The filer has claimed some dependents who are no longer eligible to be claimed -->
          <Dependency path="/hasClaimedDependentsWhoAreNotCurrentlyEligible" />

          <!-- The filer isn't a dependent, so the dependents must have become ineligible based on their own facts -->
          <Not>
            <Dependency module="filers" path="/treatFilersAsDependents" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/tpHasClaimedEligibleDependentsButDependentIsNotCurrentlyComplete">
      <Description>At some point, we gave the TP the chance to claim this dependent (and so were complete up to that
        point), but now the dependent isn't complete and we haven't ruled them out as eligible</Description>
      <Derived>
        <All>
          <!-- Okay, we know the filer go to the claim screen -->
          <Dependency path="../tpClaims" />

          <!-- And we know the dependent is incomplete -->
          <Dependency path="../isIncomplete" />

          <!-- And either we still know they're eligible or think they might be because eligibleDependent is incomplete -->
          <Any>
            <Dependency path="../eligibleDependent" />
            <Not>
              <IsComplete>
                <Dependency path="../eligibleDependent" />
              </IsComplete>
            </Not>
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/hasClaimedEligibleDependentsButDependentIsNotCurrentlyComplete">
      <Description>At some point, we gave the TP the chance to claim a dependent, but currently at least one of those
        dependents has become incomplete</Description>
      <Derived>
        <GreaterThan>
          <Left>
            <CollectionSize>
              <Filter path="/familyAndHousehold">
                <Dependency path="tpHasClaimedEligibleDependentsButDependentIsNotCurrentlyComplete" />
              </Filter>
            </CollectionSize>
          </Left>
          <Right>
            <Int>0</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>


    <Fact path="/familyAndHousehold/*/isCompleted">
      <Name>Is Completed Dependent</Name>
      <Description>Whether the TP has finished filling out the dependent section for this dependent. Right now, we're
        assuming that we should always complete whether a person is eligible to be a dependent and has been claimed.
        When we come back to revisit the dependents section post-GC, we may want to expand this condition to other
        qualifiers (e.g. HohQualifyingPerson)</Description>
      <Derived>
        <All>
          <IsComplete>
            <Dependency path="../isClaimedDependent" />
          </IsComplete>
          <IsComplete>
            <Dependency path="../eligibleDependent" />
          </IsComplete>
          <IsComplete>
            <Dependency path="../cdccQualifyingPerson" />
          </IsComplete>


          <Any>
            <Not>
              <!-- If they are not a claimed dependent, we have the info we need -->
              <Dependency path="../isClaimedDependent" />
            </Not>
            <!-- If they don't qualify for any benefits, we know what we need to know -->
            <Dependency path="../doesNotQualifyForAnyBenefits" />
            <All>
              <!-- otherwise we need their IP Pin and their TIN -->
              <IsComplete>
                <Dependency path="../tin" />
              </IsComplete>
              <IsComplete>
                <Dependency path="../hasIpPin" />
              </IsComplete>
              <Dependency path="../weHaveIpPinIfWeShould" />
            </All>
          </Any>
          <IsComplete>
            <Dependency path="../personQualifiesTPforHoH" />
          </IsComplete>
          <IsComplete>
            <Dependency path="../personQualifiesTPforEitc" />
          </IsComplete>
          <Any>
            <!-- if a person is selected for HOH, -->
            <Not>
              <IsComplete>
                <Dependency path="../isValidSelectedHohQP" />
              </IsComplete>
            </Not>
            <Not>
              <Dependency path="../isValidSelectedHohQP" />
            </Not>
            <All>
              <Dependency path="../isValidSelectedHohQP" />
              <IsComplete>
                <Dependency path="../tin" />
              </IsComplete>
            </All>
          </Any>
          <Dependency path="../hasInfoForEITCQCUnclaimedDependent" />

          <Any>
            <All>
              <Any>
                <Not>
                  <Dependency path="../flowAddPersonLivedWithTpInUs" />
                </Not>
                <IsComplete>
                  <Dependency path="../monthsLivedWithTPInUS" />
                </IsComplete>
              </Any>

              <Any>
                <Not>
                  <Dependency path="../flowAddPersonKeepingUpHome" />
                </Not>
                <IsComplete>
                  <Dependency path="../tpPaidMostOfHomeUpkeep" />
                </IsComplete>
              </Any>

              <Any>
                <Not>
                  <Dependency path="../flowAddPersonKeepingUpParentsHome" />
                </Not>
                <IsComplete>
                  <Dependency path="../tpPaidMostOfParentHomeUpkeep" />
                </IsComplete>
              </Any>
            </All>

            <!-- None of these supplemental questions are asked if the person is disqualifiedDueToParentalCustody -->
            <Dependency module="dependentsBenefitSplit" path="../disqualifiedDueToParentalCustody" />
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/hasInfoForEITCQCUnclaimedDependent">
      <Derived>
        <!-- Get TIN and other values for EITC QC Unclaimed Dependents -->
        <Any>
          <!-- If we don't know if you can be a EITC QC Unclaimed Dependent or if you're EITC Qualified, this is
          "complete" for now -->
          <Not>
            <IsComplete>
              <Dependency path="../isEITCQCUnclaimedDependent" />
            </IsComplete>
          </Not>
          <Not>
            <IsComplete>
              <Dependency module="eitc" path="/eitcQualified" />
            </IsComplete>
          </Not>

          <All>
            <!-- If you're not EITC qualified, none of this matters at all -->
            <IsComplete>
              <Dependency module="eitc" path="/eitcQualified" />
            </IsComplete>
            <Not>
              <Dependency module="eitc" path="/eitcQualified" />
            </Not>
          </All>

          <All>
            <IsComplete>
              <Dependency path="../isEITCQCUnclaimedDependent" />
            </IsComplete>
            <Any>
              <!-- Even if you are EITC qualified, is this dependent an EITC unclaimed dependent? If not, again, None of
              this matters -->
              <Not>
                <Dependency path="../isEITCQCUnclaimedDependent" />
              </Not>
              <!-- Okay, so you qualify for EITC and this dependent is unclaimed but can count toward it, we need some
              info -->
              <All>
                <Dependency path="../isEITCQCUnclaimedDependent" />
                <IsComplete>
                  <Dependency module="eitc" path="/eitcQualified" />
                </IsComplete>
                <Dependency module="eitc" path="/eitcQualified" />

                <!-- If you said you don't have a TIN (it's not not none ;), then we don't need it. Otherwise, we do! -->
                <!-- Also, if you don't have a TIN, you don't have a PIN, per Form 15227 (thanks Chris!) -->
                <Any>
                  <Dependency path="../hasTinTypeOfNone" />
                  <All>
                    <IsComplete>
                      <Dependency path="../tin" />
                    </IsComplete>
                    <IsComplete>
                      <Dependency path="../hasIpPin" />
                    </IsComplete>
                    <Dependency path="../weHaveIpPinIfWeShould" />
                  </All>
                </Any>
              </All>
            </Any>
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isIncomplete">
      <Name>Is incomplete</Name>
      <Description>The opposite of isCompleted</Description>

      <Derived>
        <Not>
          <Dependency path="../isCompleted" />
        </Not>
      </Derived>
    </Fact>


    <Fact path="/familyAndHousehold/*/hohQualifyingPerson">
      <Name>Qualifying person for Head of Household</Name>
      <Description>
        The person can qualify you for Head of Household filing status.
      </Description>
      <Export downstreamFacts="true" stateSystems="true" />

      <Derived>
        <All>
          <!-- If the filer is eligible to file married, but is filing HOH by being considered unmarried, by having
          lived apart for six months then the QP needs to be in a more restrictive set of relationships BUT if the
          spouse is a nonresident alien, then the set of restrictive relationship is not used -->
          <Any>
            <Not>
              <Dependency module="filingStatus" path="/eligibleForMFJ" />
            </Not>
            <Dependency module="dependentsRelationship" path="../marriedHohRelationshipTest" />
          </Any>
          <Not>
            <Dependency module="dependentsBenefitSplit" path="../disqualifiedDueToParentalCustody" />
          </Not>
          <Dependency path="../isClaimedIfClaimable" />
          <Any>
            <All>
              <Dependency path="../qualifyingChild" />
              <Dependency path="../tpPaidMostOfHomeUpkeep" />
              <!-- If the person is a QC of another, they have to be claimed in order to count as an hoh qualifying
              person-->
              <Any>
                <Not>
                  <Dependency path="../isQualifyingChildOfAnother" />
                </Not>
                <Dependency path="../isClaimedDependent" />
              </Any>
              <Any>
                <!-- The person is a QC who is single or is only not eligible to be a dependent because they're married -->
                <All>
                  <Dependency path="../qualifyingChild" />
                  <Any>
                    <Not>
                      <Dependency path="../married" />
                    </Not>
                    <Dependency path="../eligibleDependentMinusFilerInformation" />
                  </Any>
                </All>
                <!-- OR the person is either an eligible dependent -->
                <Dependency path="../eligibleDependent" />
                <!-- Or they're eligible for a benefit split, and the taxpayer is the one who can claim them for HoH -->
                <All>
                  <Dependency module="dependentsBenefitSplit" path="../tpCanClaimSplitBenefitsHohEitcCdcc" />
                  <!-- But also in this case, they are not allowed to be married -->
                  <Not>
                    <Dependency path="../married" />
                  </Not>
                </All>
              </Any>
            </All>
            <All>
              <Dependency path="../qualifyingRelative" />
              <Dependency path="../eligibleDependent" />
              <Dependency path="../flowAddPersonKeepingUpParentsHome" />
              <Dependency path="../tpPaidMostOfParentHomeUpkeep" />
              <Equal>
                <Left>
                  <Dependency module="dependentsRelationship" path="../relationship" />
                </Left>
                <Right>
                  <Enum optionsPath="/relationshipOptions">parent</Enum>
                </Right>
              </Equal>
            </All>
            <All>
              <Dependency path="../qualifyingRelative" />
              <Any>
                <!-- The person is either an eligible dependent -->
                <Dependency path="../eligibleDependent" />
                <!-- Or they're eligible for a benefit split, and the taxpayer is the one who can claim them for HoH -->
                <All>
                  <Dependency module="dependentsBenefitSplit" path="../tpCanClaimSplitBenefitsHohEitcCdcc" />
                </All>
              </Any>
              <Dependency module="dependentsRelationship" path="../qrRelationshipTest" />
              <Dependency path="../residencyTest" />
              <Dependency path="../tpPaidMostOfHomeUpkeep" />
              <Dependency path="../flowAddPersonKeepingUpHome" />
            </All>
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isClaimedIfClaimable">
      <Description>
        Per the decision record
        https://git.irslabs.org/irslabs-prototypes/direct-file/-/wikis/Decision-log/Your-dependents,-qualifying-persons/Must-claim-dependent-on-return
        a claimable dependent must be claimed to act as a QP in TY2023

        This fact tests if the person is either claimed,
        or not claimable. This is necessary to be a QP for HOH, QSS, EITC, or CDCC.
      </Description>

      <Derived>
        <Any>
          <Dependency path="../isClaimedDependent" />
          <Not>
            <Dependency path="../eligibleDependent" />
          </Not>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/qssQualifyingPerson">
      <Name>Qualifying person for Qualified Surviving Spouse</Name>
      <Description>The person can qualify you for Qualified Surviving Spouse filing status.</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency path="../tpPaidMostOfHomeUpkeep" />
          <Dependency path="../isClaimedIfClaimable" />
          <Any>
            <Equal>
              <Left>
                <Dependency module="dependentsRelationship" path="../relationship" />
              </Left>
              <Right>
                <Enum optionsPath="/relationshipOptions">biologicalChild</Enum>
              </Right>
            </Equal>
            <Dependency path="../childIsAdopted" />
            <Equal>
              <Left>
                <Dependency module="dependentsRelationship" path="../relationship" />
              </Left>
              <Right>
                <Enum optionsPath="/relationshipOptions">stepChild</Enum>
              </Right>
            </Equal>
          </Any>
          <!-- The child who meets any of the above three relationships must also meet requirements to be an eligible
          dependent, except for:
              * The joint return test
              * Gross income test
              * TP may be claimed as a dependent of another TP.
            This includes the citizen or resident test (specific rules for QSS) and the below
          -->
          <Dependency path="../citizenOrResidentTest" />
          <Dependency path="../qssPersonResidencyTest" />
          <!-- A Person can either qualify as a QC (hence the age test) OR a QR -->
          <!-- And then we need to look at the support test -->
          <Any>
            <All>
              <Dependency path="../ageTest" />
              <Dependency path="../qcSupportTest" />
            </All>
            <All>
              <Dependency path="../notQualifyingChildTest" />
              <Dependency path="../qrSupportTest" />
            </All>
          </Any>
          <!-- If the TP is on the custodial side of the beenfit split, the person is not
               eligible to be claimed as a dependent, and therefore cannot be used for QSS-->
          <Not>
            <Dependency module="dependentsBenefitSplit" path="../tpCanClaimSplitBenefitsHohEitcCdcc" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/flowAddPersonLivedWithTpInUs">
      <Name>Need to show AddPersonLivedWithTpInUs screen</Name>
      <Description>
        Flow variable for AddPersonLivedWithTpInUs screen. We only ask if we're still trying to validate if
        the person may qualify as a QC for EITC. So we ask if:
        1. The filers are eligible for EITC
        2. The person already
        passes the age test and relationship test for EITC QC
        3. They've lived with the TP most of the year
      </Description>

      <Derived>
        <All>
          <Dependency module="filers" path="/filersCouldQualifyForEitc" />
          <Dependency path="../ageTest" />
          <Dependency module="dependentsRelationship" path="../qcRelationshipTest" />
          <Dependency path="../residencyTest" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/livedWithTpInUsMostOfYear">
      <Name>Lived with taxpayer in U.S. most of the year</Name>
      <Description>
        Did the dependent live with the taxpayer in the U.S for most of the year?

        Note that "six" corresponds
        with the text "more than 6 months but less than 7 months." When reported on schedule EIC, this will be rounded
        up to a "7."
      </Description>

      <Derived>
        <All>
          <Dependency path="../residencyTest" />
          <Any>
            <Equal>
              <Left>
                <Dependency path="../monthsLivedWithTPInUS" />
              </Left>
              <Right>
                <Enum optionsPath="/monthsLivedWithTPInUSOptions">six</Enum>
              </Right>
            </Equal>
            <Equal>
              <Left>
                <Dependency path="../monthsLivedWithTPInUS" />
              </Left>
              <Right>
                <Enum optionsPath="/monthsLivedWithTPInUSOptions">seven</Enum>
              </Right>
            </Equal>
            <Equal>
              <Left>
                <Dependency path="../monthsLivedWithTPInUS" />
              </Left>
              <Right>
                <Enum optionsPath="/monthsLivedWithTPInUSOptions">eight</Enum>
              </Right>
            </Equal>
            <Equal>
              <Left>
                <Dependency path="../monthsLivedWithTPInUS" />
              </Left>
              <Right>
                <Enum optionsPath="/monthsLivedWithTPInUSOptions">nine</Enum>
              </Right>
            </Equal>
            <Equal>
              <Left>
                <Dependency path="../monthsLivedWithTPInUS" />
              </Left>
              <Right>
                <Enum optionsPath="/monthsLivedWithTPInUSOptions">ten</Enum>
              </Right>
            </Equal>
            <Equal>
              <Left>
                <Dependency path="../monthsLivedWithTPInUS" />
              </Left>
              <Right>
                <Enum optionsPath="/monthsLivedWithTPInUSOptions">eleven</Enum>
              </Right>
            </Equal>
            <Equal>
              <Left>
                <Dependency path="../monthsLivedWithTPInUS" />
              </Left>
              <Right>
                <Enum optionsPath="/monthsLivedWithTPInUSOptions">twelve</Enum>
              </Right>
            </Equal>
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/monthsLivedWithTPInUS">
      <Description>How many months did the person live with the TP in the US?</Description>
      <Export mef="true" stateSystems="true" />

      <Writable>
        <Enum optionsPath="/monthsLivedWithTPInUSOptions" />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/daysLivedWithTPInUS">
      <Description>How many days did the person live with the TP in the US?</Description>
      <Export mef="true" />

      <Derived>
        <Switch>
          <Case>
            <When>
              <Equal>
                <Left>
                  <Dependency path="../monthsLivedWithTPInUS" />
                </Left>
                <Right>
                  <Enum optionsPath="/monthsLivedWithTPInUSOptions">six</Enum>
                </Right>
              </Equal>
            </When>
            <Then>
              <Int>183</Int>
            </Then>
          </Case>

          <Case>
            <When>
              <Equal>
                <Left>
                  <Dependency path="../monthsLivedWithTPInUS" />
                </Left>
                <Right>
                  <Enum optionsPath="/monthsLivedWithTPInUSOptions">seven</Enum>
                </Right>
              </Equal>
            </When>
            <Then>
              <Int>212</Int>
            </Then>
          </Case>

          <Case>
            <When>
              <Equal>
                <Left>
                  <Dependency path="../monthsLivedWithTPInUS" />
                </Left>
                <Right>
                  <Enum optionsPath="/monthsLivedWithTPInUSOptions">eight</Enum>
                </Right>
              </Equal>
            </When>
            <Then>
              <Int>242</Int>
            </Then>
          </Case>

          <Case>
            <When>
              <Equal>
                <Left>
                  <Dependency path="../monthsLivedWithTPInUS" />
                </Left>
                <Right>
                  <Enum optionsPath="/monthsLivedWithTPInUSOptions">nine</Enum>
                </Right>
              </Equal>
            </When>
            <Then>
              <Int>273</Int>
            </Then>
          </Case>

          <Case>
            <When>
              <Equal>
                <Left>
                  <Dependency path="../monthsLivedWithTPInUS" />
                </Left>
                <Right>
                  <Enum optionsPath="/monthsLivedWithTPInUSOptions">ten</Enum>
                </Right>
              </Equal>
            </When>
            <Then>
              <Int>303</Int>
            </Then>
          </Case>

          <Case>
            <When>
              <Equal>
                <Left>
                  <Dependency path="../monthsLivedWithTPInUS" />
                </Left>
                <Right>
                  <Enum optionsPath="/monthsLivedWithTPInUSOptions">eleven</Enum>
                </Right>
              </Equal>
            </When>
            <Then>
              <Int>334</Int>
            </Then>
          </Case>

          <Case>
            <When>
              <Equal>
                <Left>
                  <Dependency path="../monthsLivedWithTPInUS" />
                </Left>
                <Right>
                  <Enum optionsPath="/monthsLivedWithTPInUSOptions">twelve</Enum>
                </Right>
              </Equal>
            </When>
            <Then>
              <Int>365</Int>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/tpPaidMostOfHomeUpkeep">
      <Name>Taxpayer paid most of home upkeep</Name>
      <Description>Did taxpayer pay more than half the cost of keeping up the home shared with the dependent?</Description>
      <Export downstreamFacts="true" />

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/tpPaidMostOfParentHomeUpkeep">
      <Name>Taxpayer paid most of parent's home upkeep</Name>
      <Description>Did taxpayer pay more than half the cost of keeping up their dependent parent's main home?</Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/ssnEmploymentValidity">
      <Name>Employment validity</Name>
      <Description>Employment validity statements printed on dependent's Social Security card.</Description>

      <Writable>
        <Enum optionsPath="/familyAndHouseholdSsnEmploymentValidityOptions" />
      </Writable>
    </Fact>


    <Fact path="/familyAndHousehold/*/ssnValidForEmployment">
      <Name>Has an SSN valid for employment</Name>
      <Description>The dependent has a Social Security Number that is not marked "Not Valid For Employment", or that
        requires work authorization but that authorization is no longer valid.</Description>

      <Derived>
        <Any>
          <Equal>
            <Left>
              <Dependency path="../ssnEmploymentValidity" />
            </Left>
            <Right>
              <Enum optionsPath="/familyAndHouseholdSsnEmploymentValidityOptions">neither</Enum>
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Dependency path="../ssnEmploymentValidity" />
            </Left>
            <Right>
              <Enum optionsPath="/familyAndHouseholdSsnEmploymentValidityOptions">
                validOnlyWithDhsAuthorizationInEffect</Enum>
            </Right>
          </Equal>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/ssnOnlyForFederallyFundedBenefit">
      <Description> The dependent received their social security number solely to apply for a federally funded benefit,
        like Medicaid.
      </Description>

      <Writable>
        <Boolean />
      </Writable>
    </Fact>

    <Fact path="/familyAndHousehold/*/ssnNotValidForEmployment">
      <Description>The SSN is marked "not valid" for employment</Description>
      <Export stateSystems="true" />

      <Derived>
        <Equal>
          <Left>
            <Dependency path="../ssnEmploymentValidity" />
          </Left>
          <Right>
            <Enum optionsPath="/familyAndHouseholdSsnEmploymentValidityOptions">notValid</Enum>
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/ssnValidForEITCCalculation">
      <Name>Has an SSN valid for employemnt</Name>
      <Description>The dependent has a Social Security Number that is not marked "Not Valid For Employment", or that
        requires work authorization but that authorization is no longer valid.</Description>
      <Derived>
        <All>
          <!-- They must have an ssn, not an ITIN or ATIN -->
          <Equal>
            <Left>
              <Dependency path="../tinType" />
            </Left>
            <Right>
              <Enum optionsPath="/tinTypeOptions">ssn</Enum>
            </Right>
          </Equal>
          <Any>
            <!-- The SSN has no restrictions -->
            <Equal>
              <Left>
                <Dependency path="../ssnEmploymentValidity" />
              </Left>
              <Right>
                <Enum optionsPath="/familyAndHouseholdSsnEmploymentValidityOptions">neither</Enum>
              </Right>
            </Equal>
            <!-- The SSN requires work authorization, and the authorization is currently in effect -->
            <Equal>
              <Left>
                <Dependency path="../ssnEmploymentValidity" />
              </Left>
              <Right>
                <Enum optionsPath="/familyAndHouseholdSsnEmploymentValidityOptions">
                  validOnlyWithDhsAuthorizationInEffect</Enum>
              </Right>
            </Equal>
            <!-- The SSN is not valid for employment, but was not issued solely for a federally funded benefit -->
            <All>
              <Dependency path="../ssnNotValidForEmployment" />
              <Not>
                <Dependency path="../ssnOnlyForFederallyFundedBenefit" />
              </Not>
            </All>
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/eligibleCtc">
      <Name>Eligible for the Child Tax Credit</Name>
      <Description>The dependent is eligible for the Child Tax Credit (CTC).</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency path="../isClaimedDependent" />
          <Dependency path="../qualifyingChild" />
          <LessThan>
            <Left>
              <Dependency path="../age" />
            </Left>
            <Right>
              <Int>17</Int>
            </Right>
          </LessThan>
          <Dependency path="../citizenOrUsResidentTest" />
          <Equal>
            <Left>
              <Dependency path="../tinType" />
            </Left>
            <Right>
              <Enum optionsPath="/tinTypeOptions">ssn</Enum>
            </Right>
          </Equal>
          <Dependency path="../ssnValidForEmployment" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isClaimedForCTC">
      <Name>Claimed for the Child Tax Credit Dependent</Name>
      <Description>The dependent is claimed for the Child Tax Credit (CTC).</Description>
      <Export mef="true" />
      <Derived>
        <All>
          <Dependency path="../eligibleCtc" />
          <Dependency module="ctcOdc" path="/ctcQualified" />
        </All>
      </Derived>
    </Fact>


    <Fact path="/familyAndHousehold/*/eligibleOdc">
      <Name>Eligible for the Credit for Other Dependents</Name>
      <Description>The dependent is eligible for the Credit for Other Dependents (ODC).</Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency path="../isClaimedDependent" />
          <Not>
            <Dependency path="../eligibleCtc" />
          </Not>
          <Dependency path="../citizenOrUsResidentTest" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isClaimedForODC">
      <Name>Claimed for the Credit for Other Dependents</Name>
      <Description>The dependent is claimed for the Credit for Other Dependents (ODC).</Description>
      <Export mef="true" />
      <Derived>
        <All>
          <Dependency path="../eligibleOdc" />
          <Dependency module="ctcOdc" path="/odcQualified" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/claimedStatus">
      <Name>Is Claimed</Name>
      <Description>The dependent's claimed status</Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency path="../isClaimedDependent" />
            </When>
            <Then>
              <Enum optionsPath="/claimedStatus">claimed</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Not>
                <Dependency path="../eligibleDependent" />
              </Not>
            </When>
            <Then>
              <Enum optionsPath="/claimedStatus">doesNotQualify</Enum>
            </Then>
          </Case>
          <Case>
            <When>
              <Dependency path="../isNotClaimedDependent" />
            </When>
            <Then>
              <Enum optionsPath="/claimedStatus">unclaimed</Enum>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isUnclaimedDependent">
      <Derived>
        <Equal>
          <Left>
            <Dependency path="../claimedStatus" />
          </Left>
          <Right>
            <Enum optionsPath="/claimedStatus">unclaimed</Enum>
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/doesNotQualify">
      <Derived>
        <Equal>
          <Left>
            <Dependency path="../claimedStatus" />
          </Left>
          <Right>
            <Enum optionsPath="/claimedStatus">doesNotQualify</Enum>
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/doesNotQualifyForAnyBenefits">
      <Derived>
        <All>
          <Not>
            <Dependency path="../eligibleDependent" />
          </Not>
          <Not>
            <Dependency path="../mayQualifyTPForTaxBenefits" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/mayQualifyTPForTaxBenefits">
      <Description>Household member may qualify TP for one of the benefits, but not certain unless filing status is
        known</Description>

      <Derived>
        <Any>
          <Dependency path="../personQualifiesTPforHoH" />
          <Dependency path="../personQualifiesTPforQss" />
          <Dependency path="../personQualifiesTPforEitc" />
          <Dependency path="../personQualifiesTPforCdcc" />
          <!-- TODO: Verify that ctc and Odc should be in here -->
          <Dependency path="../eligibleCtc" />
          <Dependency path="../eligibleOdc" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/doesQualifyTPForTaxBenefits">
      <Description>Household member qualifies TP for at least one benefit since we know filing status</Description>

      <Derived>
        <All>
          <Dependency path="../mayQualifyTPForTaxBenefits" />
          <IsComplete>
            <Dependency module="filingStatus" path="/filingStatus" />
          </IsComplete>
          <Any>
            <All>
              <Dependency module="filingStatus" path="/eligibleForHoh" />
              <Dependency path="../personQualifiesTPforHoH" />
            </All>
            <All>
              <Dependency module="filingStatus" path="/eligibleForQss" />
              <Dependency path="../personQualifiesTPforQss" />
            </All>
            <All>
              <Dependency path="../personQualifiesTPforEitc" />
              <Dependency path="/eitcQualified" module="eitc" />
            </All>
            <All>
              <Dependency path="../personQualifiesTPforCdcc" />
              <Dependency path="/cdccQualified" module="cdcc" />
            </All>
            <All>
              <Dependency path="../eligibleCtc" />
              <Dependency path="/ctcQualified" module="ctcOdc" />
            </All>
            <All>
              <Dependency path="../eligibleOdc" />
              <Dependency path="/odcQualified" module="ctcOdc" />
            </All>
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/hasIncompletePossibleBenefits">
      <Description>At least one of the benefits a household member qualifies for is not yet complete</Description>
      <Derived>
        <All>
          <Dependency path="../mayQualifyTPForTaxBenefits" />
          <IsComplete>
            <Dependency module="filingStatus" path="/filingStatus" />
          </IsComplete>
          <Any>
            <All>
              <Dependency path="../personQualifiesTPforHoH" />
              <Not>
                <IsComplete>
                  <Dependency path="/eligibleForHoh" module="filingStatus" />
                </IsComplete>
              </Not>
            </All>
            <All>
              <Dependency path="../personQualifiesTPforQss" />
              <Not>
                <IsComplete>
                  <Dependency path="/eligibleForQss" module="filingStatus" />
                </IsComplete>
              </Not>
            </All>
            <All>
              <Dependency path="../personQualifiesTPforCdcc" />
              <Not>
                <IsComplete>
                  <Dependency path="/cdccQualified" module="cdcc" />
                </IsComplete>
              </Not>
            </All>
            <All>
              <Dependency path="../personQualifiesTPforEitc" />
              <Not>
                <IsComplete>
                  <Dependency path="/eitcQualified" module="eitc" />
                </IsComplete>
              </Not>
            </All>
            <All>
              <Dependency path="../eligibleCtc" />
              <Not>
                <IsComplete>
                  <Dependency path="/ctcQualified" module="ctcOdc" />
                </IsComplete>
              </Not>
            </All>
            <All>
              <Dependency path="../eligibleOdc" />
              <Not>
                <IsComplete>
                  <Dependency path="/odcQualified" module="ctcOdc" />
                </IsComplete>
              </Not>
            </All>
          </Any>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/qualifiesForStatuses">
      <Name>Qualifies for filing status(es)</Name>
      <Description>Whether a dependent qualifies the TP for filing status(es), leverages TP's info</Description>
      <Derived>
        <Any>
          <Dependency path="../personQualifiesTPforQss" />
          <Dependency path="../personQualifiesTPforHoH" />
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/qualifiesForTaxCredits">
      <Name>Qualifies for tax credit(s)</Name>
      <Description>Whether a dependent qualifies the TP for tax credit(s), leverages TP's info. This requires the income
        section to be complete</Description>
      <Derived>
        <Any>
          <All>
            <Dependency path="../eligibleCtc" />
            <Dependency module="ctcOdc" path="/ctcQualified" />
          </All>
          <All>
            <Dependency path="../eligibleOdc" />
            <Dependency module="ctcOdc" path="/odcQualified" />
          </All>
          <All>
            <Dependency path="../eitcQualifyingChild" />
            <!-- This requires the income section to be complete -->
            <Dependency module="eitc" path="/eitcQualified" />
          </All>
          <All>
            <!-- TODO: Add "the TP actually qualified for CDCC here"-->
            <!-- https://git.irslabs.org/irslabs-prototypes/direct-file/-/issues/8667 -->
            <Dependency path="../cdccQualifyingPerson" />
          </All>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isEITCQCUnclaimedDependent">
      <Derived>
        <All>
          <Dependency path="../eitcQualifyingChild" />
          <Dependency path="../isNotClaimedDependent" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isEITCQCUnclaimedDependentWithTIN">
      <Description>The dependent is an EITC QC who is unclaimed and who has a TIN</Description>
      <Derived>
        <All>
          <Dependency path="../isEITCQCUnclaimedDependent" />
          <Not>
            <Dependency path="../hasTinTypeOfNone" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isEITCQCUnclaimedDependentMissingTIN">
      <Description>The dependent is an EITC QC who is unclaimed and who we need a TIN for</Description>
      <Derived>
        <All>
          <Dependency path="../isEITCQCUnclaimedDependentWithTIN" />
          <Not>
            <IsComplete>
              <Dependency path="../tin" />
            </IsComplete>
          </Not>
        </All>
      </Derived>
    </Fact>

    <!-- Dependents collections -->

    <Fact path="/qualifyingDependentsCollection">
      <Name>Qualifying Dependents Collection</Name>
      <Description>A collection of all the dependents that could be claimed</Description>
      <Derived>
        <Filter path="/familyAndHousehold">
          <Dependency path="eligibleDependent" />
        </Filter>
      </Derived>
    </Fact>


    <Fact path="/unclaimedEITCQcsCollection">
      <Name>Unclaimed EITC QCs</Name>
      <Description>A collection of people to be claimed as EITC QCs who have not been claimed as dependents</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <Filter path="/eitcDependentsCollection">
          <Dependency path="isEITCQCUnclaimedDependent" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/unclaimedEITCQcsWithTINsCollection">
      <Description>A collection of people to be claimed as EITC QCs who have not been claimed as dependents that have
        TINs (that we might need to collect)</Description>
      <Derived>
        <Filter path="/eitcDependentsCollection">
          <Dependency path="isEITCQCUnclaimedDependentWithTIN" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/unclaimedEITCQcsCollectionCount">
      <Description>How many unclaimed EITC QCs are are talking about</Description>
      <Derived>
        <CollectionSize>
          <Dependency path="/unclaimedEITCQcsCollection" />
        </CollectionSize>
      </Derived>
    </Fact>

    <Fact path="/hasAnyUnclaimedEITCQCs">
      <Description>Does the filer have more than zero EITC QC?</Description>
      <Derived>
        <GreaterThan>
          <Left>
            <Dependency path="/unclaimedEITCQcsCollectionCount" />
          </Left>
          <Right>
            <Int>0</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>

    <Fact path="/hasMoreThanOneUnclaimedEITCQC">
      <Description>Does the filer have more than one EITC QC?</Description>
      <Derived>
        <GreaterThan>
          <Left>
            <Dependency path="/unclaimedEITCQcsCollectionCount" />
          </Left>
          <Right>
            <Int>1</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>

    <Fact path="/familyAndHouseholdWhoDontQualifyForAnyBenefitsCollection">
      <Name>Dependents who don't qualify for any benefits</Name>
      <Description>A collection of dependents who don't qualify for any benefits</Description>
      <Derived>
        <Filter path="/familyAndHousehold">
          <All>
            <Not>
              <Dependency path="eligibleDependent" />
            </Not>
            <Not>
              <Dependency path="mayQualifyTPForTaxBenefits" />
            </Not>
          </All>
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/familyAndHouseholdWhoHaveAnIpPinButNotReady">
      <Name>Dependents who don't qualify for any benefits</Name>
      <Description>A collection of dependents who don't qualify for any benefits</Description>
      <Derived>
        <Filter path="/qualifyingDependentsCollection">
          <All>
            <Not>
              <Dependency path="eligibleDependent" />
            </Not>
            <Not>
              <Dependency path="mayQualifyTPForTaxBenefits" />
            </Not>
          </All>
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/hasAtLeastOneDependentWhoDoesntQualifyForAnyBenefits">
      <Name>At least one dependent who doesn't qualify for any benefits</Name>
      <Description>Checks whether there is at least one dependent that doesn't qualify for any benefits</Description>
      <Derived>
        <GreaterThanOrEqual>
          <Left>
            <CollectionSize>
              <Dependency path="/familyAndHouseholdWhoDontQualifyForAnyBenefitsCollection" />
            </CollectionSize>
          </Left>
          <Right>
            <Int>1</Int>
          </Right>
        </GreaterThanOrEqual>
      </Derived>
    </Fact>

    <Fact path="/claimedDependentsCollection">
      <Name>Claimed Dependents Collection</Name>
      <Description>The subset of claimable dependents that actually are claimed</Description>
      <Derived>
        <Filter path="/qualifyingDependentsCollection">
          <Dependency path="isClaimedDependent" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/ctcDependentsCollection">
      <Name>CTC Eligible Dependents Collection</Name>
      <Description>The subset of claimed dependents who qualify for CTC</Description>
      <Derived>
        <Filter path="/claimedDependentsCollection">
          <Dependency path="eligibleCtc" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/hasCtcDependentsCollectionCountGreaterThanOne">
      <Description>The count of subset of claimed dependents who qualify for CTC is greater than one</Description>
      <Derived>
        <GreaterThan>
          <Left>
            <CollectionSize>
              <Dependency path="/ctcDependentsCollection" />
            </CollectionSize>
          </Left>
          <Right>
            <Int>1</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>

    <Fact path="/form8862CtcDependentsCollection">
      <Name>CTC Eligible Dependents when form 8862 is required for CTC Collection</Name>
      <Description>The subset of dependents who are claimed for CTC when the TP is required to use form 8862 for CTC</Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency module="ctcOdc" path="/ctc8862Required" />
            </When>
            <Then>
              <Filter path="/claimedDependentsCollection">
                <Dependency path="isClaimedForCTC" />
              </Filter>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/eitcDependentsCollection">
      <Name>EITC Eligible Dependents Collection</Name>
      <Description>The subset of people who qualify as qualifying children for EITC</Description>

      <Derived>
        <Filter path="/familyAndHousehold">
          <Dependency path="eitcQualifyingChild" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/form8862EitcDependentsCollection">
      <Name>EITC Eligible Dependents for form 8862 Collection</Name>
      <Description>The subset of people who qualify as qualifying children for EITC when form 8862 is required, for PDF</Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency module="eitc" path="/form8862RequiredAndHasQualifyingChildren" />
            </When>
            <Then>
              <Dependency path="/eitcDependentsCollection" />
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/odcDependentsCollection">
      <Name>ODC Eligible Dependents Collection</Name>
      <Description>The subset of claimed dependents who qualify for ODC</Description>

      <Derived>
        <Filter path="/claimedDependentsCollection">
          <Dependency path="eligibleOdc" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/hasOdcDependentsCollectionCountGreaterThanOne">
      <Name>Whether the ODC Eligible Dependents Collection has a count greater than one</Name>
      <Description>The subset of claimed dependents who qualify for ODC</Description>

      <Derived>
        <GreaterThan>
          <Left>
            <CollectionSize>
              <Dependency path="/claimedDependentsCollection" />
            </CollectionSize>
          </Left>
          <Right>
            <Int>0</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>

    <Fact path="/form8862OdcDependentsCollection">
      <Name>ODC Eligible Dependents when form 8862 is required for ODC Collection</Name>
      <Description>The subset of dependents that are claimed for ODC when form 8862 is required for
        ODC</Description>

      <Derived>
        <Switch>
          <Case>
            <When>
              <Dependency module="ctcOdc" path="/ctc8862Required" />
            </When>
            <Then>
              <Filter path="/odcDependentsCollection">
                <Dependency path="isClaimedForODC" />
              </Filter>
            </Then>
          </Case>
        </Switch>
      </Derived>
    </Fact>

    <Fact path="/unclaimedDependentsCollection">
      <Name>Unclaimed Dependents Collection</Name>
      <Description>The subset of people the TP has entered who have not been claimed as dependents</Description>
      <Derived>
        <Filter path="/familyAndHousehold">
          <Dependency path="isNotClaimedDependent" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/deceasedEitcEligibleQcCollection">
      <Name>DeceasedEitcEligibleQcCollection</Name>
      <Description>The collection of EITC eligible QCs who died during the tax year. Required for form 8862, if the TP
        has to file form 8862.</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <Filter path="/eitcDependentsCollection">
          <Dependency path="deceased" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/hasClaimedDependents">
      <Name>Claiming More Than 1 Dependents</Name>
      <Description>Are you claiming more than 1 dependents</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <GreaterThanOrEqual>
          <Left>
            <CollectionSize>
              <Dependency path="/claimedDependentsCollection" />
            </CollectionSize>
          </Left>
          <Right>
            <Int>1</Int>
          </Right>
        </GreaterThanOrEqual>
      </Derived>
    </Fact>

    <Fact path="/hasUnclaimedEITCQcsWithTINs">
      <Description>The filer has unclaimed EITC QCs for whom we still need to collect TINs</Description>
      <Derived>
        <GreaterThan>
          <Left>
            <CollectionSize>
              <Filter path="/unclaimedEITCQcsCollection">
                <Dependency path="isEITCQCUnclaimedDependentWithTIN" />
              </Filter>
            </CollectionSize>
          </Left>
          <Right>
            <Int>0</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>

    <Fact path="/hasUnclaimedEITCQcsAndQualifiesForEITC">
      <Description>The filer has unclaimed EITC QCs and qualifies for EITC overall</Description>
      <Derived>
        <All>
          <Dependency module="eitc" path="/eitcQualified" />
          <GreaterThan>
            <Left>
              <CollectionSize>
                <Dependency path="/unclaimedEITCQcsCollection" />
              </CollectionSize>
            </Left>
            <Right>
              <Int>0</Int>
            </Right>
          </GreaterThan>
        </All>
      </Derived>
    </Fact>

    <Fact path="/hasNoUnclaimedEITCQcsCollectionWhoNeedTINs">
      <Derived>
        <Any>
          <!-- If we don't know if you qualify for EITC yet, this is complete -->
          <Not>
            <IsComplete>
              <Dependency module="eitc" path="/eitcQualified" />
            </IsComplete>
          </Not>
          <!-- Or if you don't qualify for EITC, this is complete -->
          <Not>
            <Dependency module="eitc" path="/eitcQualified" />
          </Not>
          <Not>
            <Dependency path="/hasUnclaimedEITCQcsWithTINs" />
          </Not>
          <Equal>
            <Left>
              <CollectionSize>
                <Filter path="/unclaimedEITCQcsCollection">
                  <Dependency path="isEITCQCUnclaimedDependentMissingTIN" />
                </Filter>
              </CollectionSize>
            </Left>
            <Right>
              <Int>0</Int>
            </Right>
          </Equal>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/hasUnclaimedPeople">
      <Name>Has Unclaimed People</Name>
      <Description>Are there family or household members who have not been claimed as dependents?</Description>
      <Derived>
        <GreaterThanOrEqual>
          <Left>
            <CollectionSize>
              <Dependency path="/unclaimedDependentsCollection" />
            </CollectionSize>
          </Left>
          <Right>
            <Int>1</Int>
          </Right>
        </GreaterThanOrEqual>
      </Derived>
    </Fact>

    <Fact path="/firstQualifyingDependent">
      <Name>First Qualifying Dependent</Name>
      <Description>The first qualifying dependent</Description>
      <Derived>
        <IndexOf>
          <Collection>
            <Dependency path="/qualifyingDependentsCollection" />
          </Collection>
          <Index>
            <Int>0</Int>
          </Index>
        </IndexOf>
      </Derived>
    </Fact>


    <Fact path="/claimingMoreThan4Dependents">
      <Name>Claiming More Than 4 Dependents</Name>
      <Description>Are you claiming more than 4 dependents</Description>
      <Export mef="true" />

      <Derived>
        <GreaterThan>
          <Left>
            <Count>
              <Dependency path="/claimedDependentsCollection/*/isClaimedDependent" />
            </Count>
          </Left>
          <Right>
            <Int>4</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>

    <Fact path="/form8862ClaimingMoreThan4CtcDependents">
      <Name>Claiming More Than 4 CTC/RCTC/ACTC Dependents</Name>
      <Description>Are you claiming more than 4 dependents for CTC/RCTC/ACTC; for gating additional ctc dependents page
        for pdf form 8862</Description>

      <Derived>
        <GreaterThan>
          <Left>
            <Count>
              <Dependency path="/form8862CtcDependentsCollection/*/isClaimedDependent" />
            </Count>
          </Left>
          <Right>
            <Int>4</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>

    <Fact path="/form8862ClaimingMoreThan4OdcDependents">
      <Name>Claiming More Than 4 ODC Dependents</Name>
      <Description>Are you claiming more than 4 dependents for ODC; for gating additional ODC dependents page for pdf
        form 8862</Description>

      <Derived>
        <GreaterThan>
          <Left>
            <Count>
              <Dependency path="/form8862OdcDependentsCollection/*/isClaimedDependent" />
            </Count>
          </Left>
          <Right>
            <Int>4</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isMissingIpPin">
      <Name>Dependent is missing their IP Pin</Name>
      <Derived>
        <All>
          <Dependency path="../hasIpPin" />
          <Not>
            <Dependency path="../flowIpPinReady" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/weHaveIpPinIfWeShould">
      <Description>The filer says they have an IP Pin, they know it, and they've given it to us</Description>
      <Derived>
        <Any>
          <!-- No IP Pin, no Problem -->
          <Not>
            <Dependency path="../hasIpPin" />
          </Not>
          <!-- They've already said they don't have it -->
          <Dependency path="../isMissingIpPin" />
          <All>
            <Dependency path="../hasIpPin" />
            <Not>
              <Dependency path="../isMissingIpPin" />
            </Not>
            <IsComplete>
              <Dependency path="../identityPin" />
            </IsComplete>
          </All>

        </Any>
      </Derived>
    </Fact>

    <Fact path="/oneOrMoreDependentsAreMissingIpPin">
      <Name>One or more dependents are missing IP Pin</Name>
      <Export downstreamFacts="true" />

      <Derived>
        <GreaterThan>
          <Left>
            <CollectionSize>
              <Filter path="/familyAndHousehold">
                <Dependency path="isMissingIpPin" />
              </Filter>
            </CollectionSize>
          </Left>
          <Right>
            <Int>0</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>

    <Fact path="/numEitcQualifyingChildren">
      <Name>Number of EITC Qualifying Children</Name>
      <Description>The number of dependents who qualify as QCs for EITC.</Description>
      <Export downstreamFacts="true" mef="true" />

      <Derived>
        <Count>
          <Dependency path="/familyAndHousehold/*/eitcQualifyingChild" />
        </Count>
      </Derived>
    </Fact>

    <Fact path="/claimedDependentsCount">
      <Name>Claimed Dependents Count</Name>
      <Description>The number of claimed dependents</Description>
      <Export downstreamFacts="true" />
      <Derived>
        <Count>
          <Dependency path="/claimedDependentsCollection/*/isClaimedDependent" />
        </Count>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isAStudentUnder24">
      <Description> Allows the student person to pass the age test as a student. The same age test applies to QC for
        dependents and EITC.
      </Description>
      <Export mef="true" />
      <Derived>
        <All>
          <Dependency path="../fullTimeStudent" />
          <Dependency path="../studentStatusMayAffectBenefits" />
          <GreaterThan>
            <Left>
              <Dependency path="../dateOfBirth" />
            </Left>
            <Right>
              <Dependency module="filers" path="/minimumFilerDateOfBirth" />
            </Right>
          </GreaterThan>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/scheduleEicLine4aYes">
      <Name>Schedule EIC Line 4a Yes checkbox</Name>
      <Description>Whether to mark the PDF checkbox for this EIC qualifying child.</Description>
      <Export stateSystems="true" />
      <Derived>
        <All>
          <Not>
            <Dependency path="../ageUnderNineteen" />
          </Not>
          <Dependency path="../isAStudentUnder24" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/scheduleEicLine4aNo">
      <Name>Schedule EIC Line 4a No checkbox</Name>
      <Description>Whether to mark the PDF checkbox for this EIC qualifying child.</Description>
      <Export mef="true" stateSystems="true" />
      <Derived>
        <All>
          <Not>
            <Dependency path="../ageUnderNineteen" />
          </Not>
          <Not>
            <Dependency path="../isAStudentUnder24" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/scheduleEicLine4bYes">
      <Name>Schedule EIC Line 4b Yes checkbox</Name>
      <Description>Whether to mark the PDF checkbox for this EIC qualifying child.</Description>
      <Export stateSystems="true" />
      <Derived>
        <All>
          <Dependency path="../scheduleEicLine4aNo" />
          <Dependency path="../disabilityStatusMayAffectBenefits" />
          <Dependency path="../permanentTotalDisability" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/flowDidNotEnterPeople">
      <Description>The taxpayer has not entered people in their family and HH section</Description>
      <Derived>
        <Equal>
          <Left>
            <CollectionSize>
              <Dependency path="/familyAndHousehold" />
            </CollectionSize>
          </Left>
          <Right>
            <Int>0</Int>
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/qssQualifyingDependentCollection">
      <Name>QSS Qualifying Dependent Collection</Name>
      <Description>A collection of all dependents that are QSS qualifying irrespective of claim status</Description>

      <Derived>
        <Filter path="/familyAndHousehold">
          <Dependency path="qssQualifyingPerson" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/qssQualifyingUnclaimedCollection">
      <Name>QSS Qualifying Dependent Unclaimed Collection</Name>
      <Description>A collection of all dependents that are QSS qualifying and not claimed</Description>
      <Derived>
        <Filter path="/qssQualifyingDependentCollection">
          <Dependency path="isNotClaimedDependent" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/qssQualifyingClaimedDependentCount">
      <Name>QSS Qualifying Claimed Dependent Count</Name>
      <Description>A count of all of the QSS qualifying dependents that are claimed</Description>
      <Derived>
        <CollectionSize>
          <Filter path="/qssQualifyingDependentCollection">
            <Dependency path="isClaimedDependent" />
          </Filter>
        </CollectionSize>
      </Derived>
    </Fact>

    <Fact path="/qssHasQualifyingUnclaimedDependent">
      <Name>Has QSS Qualifying Unclaimed Dependent</Name>
      <Description>Boolean check for whether there are any unclaimed QSS qualifying dependents</Description>
      <Export mef="true" />
      <Derived>
        <All>
          <GreaterThan>
            <Left>
              <CollectionSize>
                <Dependency path="/qssQualifyingUnclaimedCollection" />
              </CollectionSize>
            </Left>
            <Right>
              <Int>0</Int>
            </Right>
          </GreaterThan>
          <Equal>
            <Left>
              <Dependency path="/qssQualifyingClaimedDependentCount" />
            </Left>
            <Right>
              <Int>0</Int>
            </Right>
          </Equal>
          <Dependency module="filingStatus" path="/isFilingStatusQSS" />
        </All>
      </Derived>
    </Fact>

    <Fact path="/xmlFirstQssQualifyingUnclaimedDependent">
      <Name>First QSS Qualifying Unclaimed Dependent</Name>
      <Description>We need a name for the QualifyingPersonName field, and this is the intermediate
        step</Description>

      <Derived>
        <IndexOf>
          <Collection>
            <Dependency path="/qssQualifyingUnclaimedCollection" />
          </Collection>
          <Index>
            <Int>0</Int>
          </Index>
        </IndexOf>
      </Derived>
    </Fact>

    <Fact path="/xmlFirstQssQualifyingUnclaimedDependentFirstName">
      <Name>First QSS Qualifying Unclaimed Dependent First Name</Name>
      <Description>First name of the QSS qualifying unclaimed dependent</Description>
      <Export mef="true" />
      <Derived>
        <Dependency path="/xmlFirstQssQualifyingUnclaimedDependent/firstName" />
      </Derived>
    </Fact>

    <Fact path="/xmlFirstQssQualifyingUnclaimedDependentLastName">
      <Name>First QSS Qualifying Unclaimed Dependent Last Name</Name>
      <Description>Last name of the QSS qualifying unclaimed dependent</Description>
      <Export mef="true" />
      <Derived>
        <Dependency path="/xmlFirstQssQualifyingUnclaimedDependent/lastName" />
      </Derived>
    </Fact>

    <Fact path="/hasHohQualifyingParent">
      <Name>Filer has a hoh qualifying parent</Name>
      <Description>This determines whether the filer's hoh qualifying person is a parent</Description>
      <Derived>
        <GreaterThan>
          <Left>
            <Count>
              <All>
                <Dependency path="/familyAndHousehold/*/hohQualifyingPerson" />
                <Equal>
                  <Left>
                    <Dependency module="dependentsRelationship" path="/familyAndHousehold/*/relationship" />
                  </Left>
                  <Right>
                    <Enum optionsPath="/relationshipOptions">parent</Enum>
                  </Right>
                </Equal>
              </All>
            </Count>
          </Left>
          <Right>
            <Int>0</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>

    <Fact path="/hohQualifyingPeople">
      <Description>The set of people who qualify the TP for HoH</Description>
      <Derived>
        <Filter path="/familyAndHousehold">
          <Dependency path="hohQualifyingPerson" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/hohQualifyingPerson">
      <Description>
        If the TP is HoH, this is the person that they've chosen to allow them to claim HoH status.
      </Description>
      <Export downstreamFacts="true" />

      <Writable>
        <CollectionItem collection="/hohQualifyingPeople" />
      </Writable>
    </Fact>

    <!-- This checks whether the filer deleted their HoH QP -->
    <Fact path="/hohQualifyingPersonStoppedExisting">
      <Description>Did you delete your HoH qualifying person?</Description>
      <Derived>
        <Not>
          <IsComplete>
            <Dependency path="/hohQualifyingPerson/existentialFact" />
          </IsComplete>
        </Not>
      </Derived>
    </Fact>

    <!-- This checks whether the HoH QP is no longer actually a QP become of some edit -->
    <Fact path="/hasUnqualifiedHohQualifyingPerson">
      <Description>The filer selected a dependent who, at the time, was an hohQualifyingPerson, but something changed
        and now they are not</Description>
      <Derived>

        <All>
          <IsComplete>
            <Dependency path="/hohQualifyingPerson" />
          </IsComplete>
          <Not>
            <Dependency path="/hohQualifyingPerson/hohQualifyingPerson" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isBiologicalAdoptedFosterOrStepchild">
      <Name>Is Biological, Adopted, Foster, or Stepchild</Name>
      <Description>Is biological, adopted, foster, or stepchild</Description>
      <Derived>
        <Any>
          <Equal>
            <Left>
              <Dependency module="dependentsRelationship" path="../relationship" />
            </Left>
            <Right>
              <Enum optionsPath="/relationshipOptions">biologicalChild</Enum>
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Dependency module="dependentsRelationship" path="../relationship" />
            </Left>
            <Right>
              <Enum optionsPath="/relationshipOptions">adoptedChild</Enum>
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Dependency module="dependentsRelationship" path="../relationship" />
            </Left>
            <Right>
              <Enum optionsPath="/relationshipOptions">fosterChild</Enum>
            </Right>
          </Equal>
          <Equal>
            <Left>
              <Dependency module="dependentsRelationship" path="../relationship" />
            </Left>
            <Right>
              <Enum optionsPath="/relationshipOptions">stepChild</Enum>
            </Right>
          </Equal>
        </Any>
      </Derived>
    </Fact>

    <Fact path="/hasHohQualifyingChild">
      <Name>Has a child qualifying filer to file as HoH</Name>
      <Description>If the filer has a qualifying child type as hoh qualifying person</Description>
      <Derived>
        <GreaterThan>
          <Left>
            <Count>
              <All>
                <Dependency path="/familyAndHousehold/*/hohQualifyingPerson" />
                <Dependency path="/familyAndHousehold/*/isBiologicalAdoptedFosterOrStepchild" />
              </All>
            </Count>
          </Left>
          <Right>
            <Int>0</Int>
          </Right>
        </GreaterThan>
      </Derived>
    </Fact>

    <Fact path="/needsToRevisitHohQualifyingPersonSelectionOrFilingStatus">
      <Description>The filer's HoH qualifying person is no longer qualified or got deleted. They need to take corrective
        action.</Description>
      <BlockSubmissionOnTrue />
      <Derived>
        <All>
          <Dependency module="filingStatus" path="/isFilingStatusHOH" />
          <Dependency module="filingStatus" path="/eligibleForHoh" />
          <IsComplete>
            <Dependency path="/hohQualifyingPerson" />
          </IsComplete>
          <Any>
            <Dependency path="/hohQualifyingPersonStoppedExisting" />
            <Dependency path="/hasUnqualifiedHohQualifyingPerson" />
          </Any>
        </All>
      </Derived>

    </Fact>

    <Fact path="/hasExactlyOneHohQP">
      <Derived>
        <Equal>
          <Left>
            <CollectionSize>
              <Dependency path="/hohQualifyingPeople" />
            </CollectionSize>
          </Left>
          <Right>
            <Int>1</Int>
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/firstHohQP">
      <Derived>
        <IndexOf>
          <Collection>
            <Dependency path="/hohQualifyingPeople" />
          </Collection>
          <Index>
            <Int>0</Int>
          </Index>
        </IndexOf>
      </Derived>
    </Fact>

    <Fact path="/hohQPHasTin">
      <Description>Whether the TP's HOH QP has a tin known to the TP</Description>
      <Derived>
        <NotEqual>
          <Left>
            <Dependency path="/hohQualifyingPerson/tinType" />
          </Left>
          <Right>
            <Enum optionsPath="/tinTypeOptions">none</Enum>
          </Right>
        </NotEqual>
      </Derived>
    </Fact>

    <Fact path="/knockoutHohQpHasNoTin">
      <Description>
        The TP's chosen HOH QP does not have a TIN, so we must knock the user out of the product.
      </Description>
      <Export downstreamFacts="true" />

      <Derived>
        <All>
          <Dependency path="/isFilingStatusHOH" module="filingStatus" />
          <Not>
            <Dependency path="/hohQPHasTin" />
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/needToEnterHohQPTin">
      <Description>
        Whether the TP needs to enter the TIN for the HoH QP
      </Description>

      <Derived>
        <All>
          <Dependency path="/hohQPHasTin" />
          <Not>
            <IsComplete>
              <Dependency path="/hohQualifyingPerson/tin" />
            </IsComplete>
          </Not>
        </All>
      </Derived>
    </Fact>

    <Fact path="/claimedHohQPs">
      <Description>The set of people who qualify the TP for HoH</Description>
      <Derived>
        <Filter path="/hohQualifyingPeople">
          <Dependency path="isClaimedDependent" />
        </Filter>
      </Derived>
    </Fact>

    <Fact path="/allHoHQPsAreClaimedDependents">
      <Derived>
        <Equal>
          <Left>
            <CollectionSize>
              <Dependency path="/claimedHohQPs" />
            </CollectionSize>
          </Left>
          <Right>
            <CollectionSize>
              <Dependency path="/hohQualifyingPeople" />
            </CollectionSize>
          </Right>
        </Equal>
      </Derived>
    </Fact>


    <Fact path="/familyAndHousehold/*/isSelectedHohQP">
      <Derived>
        <Equal>
          <Left>
            <Dependency path="/hohQualifyingPerson" />
          </Left>
          <Right>
            <Dependency path=".." />
          </Right>
        </Equal>
      </Derived>
    </Fact>

    <Fact path="/familyAndHousehold/*/isValidSelectedHohQP">
      <Description>Is both the selected HoH QP and is eligible to be</Description>
      <Derived>
        <All>
          <Dependency path="../isSelectedHohQP" />
          <Dependency path="../hohQualifyingPerson" />
        </All>
      </Derived>
    </Fact>


    <Fact path="/familyAndHousehold/*/needsToEnterTINForHoh">
      <Derived>
        <All>
          <Dependency path="../isSelectedHohQP" />
          <Not>
            <IsComplete>
              <Dependency path="../tin" />
            </IsComplete>
          </Not>
        </All>
      </Derived>
    </Fact>
  </Facts>
</FactDictionaryModule>
